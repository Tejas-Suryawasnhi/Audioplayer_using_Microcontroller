
demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da64  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  0800dbec  0800dbec  0001dbec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd64  0800dd64  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd64  0800dd64  0001dd64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd6c  0800dd6c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd6c  0800dd6c  0001dd6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd70  0800dd70  0001dd70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800dd74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00001d18  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00004000  20001da8  20001da8  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ce76  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ad3  00000000  00000000  0003cf36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001448  00000000  00000000  00041a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001248  00000000  00000000  00042e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026aa1  00000000  00000000  000440a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021d83  00000000  00000000  0006ab41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb981  00000000  00000000  0008c8c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00158245  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005440  00000000  00000000  00158298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800dbd4 	.word	0x0800dbd4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800dbd4 	.word	0x0800dbd4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <write_register>:
static void write_register(uint8_t reg, uint8_t *data);
static void read_register(uint8_t reg, uint8_t *data);

// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af02      	add	r7, sp, #8
 80004d2:	4603      	mov	r3, r0
 80004d4:	6039      	str	r1, [r7, #0]
 80004d6:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	733b      	strb	r3, [r7, #12]
	iData[1] = data[0];
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004e2:	f107 020c 	add.w	r2, r7, #12
 80004e6:	2364      	movs	r3, #100	; 0x64
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	2302      	movs	r3, #2
 80004ec:	2194      	movs	r1, #148	; 0x94
 80004ee:	4803      	ldr	r0, [pc, #12]	; (80004fc <write_register+0x30>)
 80004f0:	f003 fd9e 	bl	8004030 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80004f4:	bf00      	nop
 80004f6:	3710      	adds	r7, #16
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	200000ac 	.word	0x200000ac

08000500 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af02      	add	r7, sp, #8
 8000506:	4603      	mov	r3, r0
 8000508:	6039      	str	r1, [r7, #0]
 800050a:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 8000510:	f107 020c 	add.w	r2, r7, #12
 8000514:	2364      	movs	r3, #100	; 0x64
 8000516:	9300      	str	r3, [sp, #0]
 8000518:	2301      	movs	r3, #1
 800051a:	2194      	movs	r1, #148	; 0x94
 800051c:	4807      	ldr	r0, [pc, #28]	; (800053c <read_register+0x3c>)
 800051e:	f003 fd87 	bl	8004030 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 8000522:	2364      	movs	r3, #100	; 0x64
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	2301      	movs	r3, #1
 8000528:	683a      	ldr	r2, [r7, #0]
 800052a:	2194      	movs	r1, #148	; 0x94
 800052c:	4803      	ldr	r0, [pc, #12]	; (800053c <read_register+0x3c>)
 800052e:	f003 fe7d 	bl	800422c <HAL_I2C_Master_Receive>
}
 8000532:	bf00      	nop
 8000534:	3710      	adds	r7, #16
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	200000ac 	.word	0x200000ac

08000540 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000540:	b084      	sub	sp, #16
 8000542:	b580      	push	{r7, lr}
 8000544:	b082      	sub	sp, #8
 8000546:	af00      	add	r7, sp, #0
 8000548:	f107 0c10 	add.w	ip, r7, #16
 800054c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t iData[2];
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000550:	4b7b      	ldr	r3, [pc, #492]	; (8000740 <CS43_Init+0x200>)
 8000552:	2200      	movs	r2, #0
 8000554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000558:	4b79      	ldr	r3, [pc, #484]	; (8000740 <CS43_Init+0x200>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	69da      	ldr	r2, [r3, #28]
 800055e:	4b78      	ldr	r3, [pc, #480]	; (8000740 <CS43_Init+0x200>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000566:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000568:	2201      	movs	r2, #1
 800056a:	2110      	movs	r1, #16
 800056c:	4875      	ldr	r0, [pc, #468]	; (8000744 <CS43_Init+0x204>)
 800056e:	f001 fff7 	bl	8002560 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000572:	4b75      	ldr	r3, [pc, #468]	; (8000748 <CS43_Init+0x208>)
 8000574:	4618      	mov	r0, r3
 8000576:	f107 0310 	add.w	r3, r7, #16
 800057a:	2254      	movs	r2, #84	; 0x54
 800057c:	4619      	mov	r1, r3
 800057e:	f00d fa15 	bl	800d9ac <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000582:	2301      	movs	r3, #1
 8000584:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,iData);
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	4619      	mov	r1, r3
 800058a:	2002      	movs	r0, #2
 800058c:	f7ff ff9e 	bl	80004cc <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	717b      	strb	r3, [r7, #5]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000594:	797b      	ldrb	r3, [r7, #5]
 8000596:	f043 0320 	orr.w	r3, r3, #32
 800059a:	b2db      	uxtb	r3, r3
 800059c:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 800059e:	797b      	ldrb	r3, [r7, #5]
 80005a0:	f043 030c 	orr.w	r3, r3, #12
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80005a8:	797b      	ldrb	r3, [r7, #5]
 80005aa:	f043 0303 	orr.w	r3, r3, #3
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL2,&iData[1]);
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	3301      	adds	r3, #1
 80005b6:	4619      	mov	r1, r3
 80005b8:	2004      	movs	r0, #4
 80005ba:	f7ff ff87 	bl	80004cc <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005be:	2380      	movs	r3, #128	; 0x80
 80005c0:	717b      	strb	r3, [r7, #5]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	3301      	adds	r3, #1
 80005c6:	4619      	mov	r1, r3
 80005c8:	2005      	movs	r0, #5
 80005ca:	f7ff ff7f 	bl	80004cc <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	4619      	mov	r1, r3
 80005d2:	2006      	movs	r0, #6
 80005d4:	f7ff ff94 	bl	8000500 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80005d8:	797b      	ldrb	r3, [r7, #5]
 80005da:	f003 0320 	and.w	r3, r3, #32
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 7);  // Slave
 80005e2:	797b      	ldrb	r3, [r7, #5]
 80005e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80005ec:	797b      	ldrb	r3, [r7, #5]
 80005ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 4);  // No DSP mode
 80005f6:	797b      	ldrb	r3, [r7, #5]
 80005f8:	f023 0310 	bic.w	r3, r3, #16
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8000600:	797b      	ldrb	r3, [r7, #5]
 8000602:	f023 0304 	bic.w	r3, r3, #4
 8000606:	b2db      	uxtb	r3, r3
 8000608:	717b      	strb	r3, [r7, #5]
	iData[1] |= (1 << 2);
 800060a:	797b      	ldrb	r3, [r7, #5]
 800060c:	f043 0304 	orr.w	r3, r3, #4
 8000610:	b2db      	uxtb	r3, r3
 8000612:	717b      	strb	r3, [r7, #5]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000614:	797b      	ldrb	r3, [r7, #5]
 8000616:	f043 0303 	orr.w	r3, r3, #3
 800061a:	b2db      	uxtb	r3, r3
 800061c:	717b      	strb	r3, [r7, #5]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	3301      	adds	r3, #1
 8000622:	4619      	mov	r1, r3
 8000624:	2006      	movs	r0, #6
 8000626:	f7ff ff51 	bl	80004cc <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	3301      	adds	r3, #1
 800062e:	4619      	mov	r1, r3
 8000630:	2008      	movs	r0, #8
 8000632:	f7ff ff65 	bl	8000500 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000636:	797b      	ldrb	r3, [r7, #5]
 8000638:	f023 030f 	bic.w	r3, r3, #15
 800063c:	b2db      	uxtb	r3, r3
 800063e:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000640:	797b      	ldrb	r3, [r7, #5]
 8000642:	f043 0301 	orr.w	r3, r3, #1
 8000646:	b2db      	uxtb	r3, r3
 8000648:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_A,&iData[1]);
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	3301      	adds	r3, #1
 800064e:	4619      	mov	r1, r3
 8000650:	2008      	movs	r0, #8
 8000652:	f7ff ff3b 	bl	80004cc <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	3301      	adds	r3, #1
 800065a:	4619      	mov	r1, r3
 800065c:	2009      	movs	r0, #9
 800065e:	f7ff ff4f 	bl	8000500 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000662:	797b      	ldrb	r3, [r7, #5]
 8000664:	f023 030f 	bic.w	r3, r3, #15
 8000668:	b2db      	uxtb	r3, r3
 800066a:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 800066c:	797b      	ldrb	r3, [r7, #5]
 800066e:	f043 0301 	orr.w	r3, r3, #1
 8000672:	b2db      	uxtb	r3, r3
 8000674:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_B,&iData[1]);
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	3301      	adds	r3, #1
 800067a:	4619      	mov	r1, r3
 800067c:	2009      	movs	r0, #9
 800067e:	f7ff ff25 	bl	80004cc <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	3301      	adds	r3, #1
 8000686:	4619      	mov	r1, r3
 8000688:	200e      	movs	r0, #14
 800068a:	f7ff ff39 	bl	8000500 <read_register>
	if(outputMode == MODE_ANALOG)
 800068e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000692:	2b03      	cmp	r3, #3
 8000694:	d119      	bne.n	80006ca <CS43_Init+0x18a>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 8000696:	797b      	ldrb	r3, [r7, #5]
 8000698:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800069c:	b2db      	uxtb	r3, r3
 800069e:	717b      	strb	r3, [r7, #5]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 80006a0:	797b      	ldrb	r3, [r7, #5]
 80006a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80006aa:	797b      	ldrb	r3, [r7, #5]
 80006ac:	f023 0320 	bic.w	r3, r3, #32
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80006b4:	797b      	ldrb	r3, [r7, #5]
 80006b6:	f023 0310 	bic.w	r3, r3, #16
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80006be:	797b      	ldrb	r3, [r7, #5]
 80006c0:	f023 0308 	bic.w	r3, r3, #8
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	717b      	strb	r3, [r7, #5]
 80006c8:	e005      	b.n	80006d6 <CS43_Init+0x196>
	}
	else if(outputMode == MODE_I2S)
 80006ca:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d101      	bne.n	80006d6 <CS43_Init+0x196>
	{
		iData[1] = 0x02;
 80006d2:	2302      	movs	r3, #2
 80006d4:	717b      	strb	r3, [r7, #5]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	3301      	adds	r3, #1
 80006da:	4619      	mov	r1, r3
 80006dc:	200e      	movs	r0, #14
 80006de:	f7ff fef5 	bl	80004cc <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	3301      	adds	r3, #1
 80006e6:	4619      	mov	r1, r3
 80006e8:	200f      	movs	r0, #15
 80006ea:	f7ff ff09 	bl	8000500 <read_register>
	iData[1] = 0x00;
 80006ee:	2300      	movs	r3, #0
 80006f0:	717b      	strb	r3, [r7, #5]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	3301      	adds	r3, #1
 80006f6:	4619      	mov	r1, r3
 80006f8:	200f      	movs	r0, #15
 80006fa:	f7ff fee7 	bl	80004cc <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	3301      	adds	r3, #1
 8000706:	4619      	mov	r1, r3
 8000708:	2014      	movs	r0, #20
 800070a:	f7ff fedf 	bl	80004cc <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	3301      	adds	r3, #1
 8000712:	4619      	mov	r1, r3
 8000714:	2015      	movs	r0, #21
 8000716:	f7ff fed9 	bl	80004cc <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	3301      	adds	r3, #1
 800071e:	4619      	mov	r1, r3
 8000720:	201a      	movs	r0, #26
 8000722:	f7ff fed3 	bl	80004cc <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	3301      	adds	r3, #1
 800072a:	4619      	mov	r1, r3
 800072c:	201b      	movs	r0, #27
 800072e:	f7ff fecd 	bl	80004cc <write_register>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800073c:	b004      	add	sp, #16
 800073e:	4770      	bx	lr
 8000740:	2000139c 	.word	0x2000139c
 8000744:	40020c00 	.word	0x40020c00
 8000748:	200000ac 	.word	0x200000ac

0800074c <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	switch (side)
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2b03      	cmp	r3, #3
 800075a:	d82b      	bhi.n	80007b4 <CS43_Enable_RightLeft+0x68>
 800075c:	a201      	add	r2, pc, #4	; (adr r2, 8000764 <CS43_Enable_RightLeft+0x18>)
 800075e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000762:	bf00      	nop
 8000764:	08000775 	.word	0x08000775
 8000768:	08000785 	.word	0x08000785
 800076c:	08000795 	.word	0x08000795
 8000770:	080007a5 	.word	0x080007a5
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000774:	23c0      	movs	r3, #192	; 0xc0
 8000776:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000778:	7b7b      	ldrb	r3, [r7, #13]
 800077a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800077e:	b2db      	uxtb	r3, r3
 8000780:	737b      	strb	r3, [r7, #13]
			break;
 8000782:	e018      	b.n	80007b6 <CS43_Enable_RightLeft+0x6a>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000784:	2380      	movs	r3, #128	; 0x80
 8000786:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000788:	7b7b      	ldrb	r3, [r7, #13]
 800078a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800078e:	b2db      	uxtb	r3, r3
 8000790:	737b      	strb	r3, [r7, #13]
			break;
 8000792:	e010      	b.n	80007b6 <CS43_Enable_RightLeft+0x6a>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000794:	23c0      	movs	r3, #192	; 0xc0
 8000796:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000798:	7b7b      	ldrb	r3, [r7, #13]
 800079a:	f043 0320 	orr.w	r3, r3, #32
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	737b      	strb	r3, [r7, #13]
			break;
 80007a2:	e008      	b.n	80007b6 <CS43_Enable_RightLeft+0x6a>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007a8:	7b7b      	ldrb	r3, [r7, #13]
 80007aa:	f043 0320 	orr.w	r3, r3, #32
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	737b      	strb	r3, [r7, #13]
			break;
 80007b2:	e000      	b.n	80007b6 <CS43_Enable_RightLeft+0x6a>
		default:
			break;
 80007b4:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80007b6:	7b7b      	ldrb	r3, [r7, #13]
 80007b8:	f043 030c 	orr.w	r3, r3, #12
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	737b      	strb	r3, [r7, #13]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80007c0:	7b7b      	ldrb	r3, [r7, #13]
 80007c2:	f043 0303 	orr.w	r3, r3, #3
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	737b      	strb	r3, [r7, #13]
	write_register(POWER_CONTROL2,&iData[1]);
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	3301      	adds	r3, #1
 80007d0:	4619      	mov	r1, r3
 80007d2:	2004      	movs	r0, #4
 80007d4:	f7ff fe7a 	bl	80004cc <write_register>
}
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  /* Set the Master volume */
  iData[1] = VOLUME_MASTER(volume);
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	3319      	adds	r3, #25
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	737b      	strb	r3, [r7, #13]
  write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	3301      	adds	r3, #1
 80007f8:	4619      	mov	r1, r3
 80007fa:	2020      	movs	r0, #32
 80007fc:	f7ff fe66 	bl	80004cc <write_register>
  write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	3301      	adds	r3, #1
 8000806:	4619      	mov	r1, r3
 8000808:	2021      	movs	r0, #33	; 0x21
 800080a:	f7ff fe5f 	bl	80004cc <write_register>
}
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <CS43_SetMute>:

void CS43_SetMute(bool mute)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b084      	sub	sp, #16
 800081a:	af00      	add	r7, sp, #0
 800081c:	4603      	mov	r3, r0
 800081e:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  if(mute)
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d019      	beq.n	800085a <CS43_SetMute+0x44>
  {
    iData[1] = 0xFF;
 8000826:	23ff      	movs	r3, #255	; 0xff
 8000828:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	3301      	adds	r3, #1
 8000830:	4619      	mov	r1, r3
 8000832:	2004      	movs	r0, #4
 8000834:	f7ff fe4a 	bl	80004cc <write_register>
    iData[1] = 0x01;
 8000838:	2301      	movs	r3, #1
 800083a:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	3301      	adds	r3, #1
 8000842:	4619      	mov	r1, r3
 8000844:	2022      	movs	r0, #34	; 0x22
 8000846:	f7ff fe41 	bl	80004cc <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	3301      	adds	r3, #1
 8000850:	4619      	mov	r1, r3
 8000852:	2023      	movs	r0, #35	; 0x23
 8000854:	f7ff fe3a 	bl	80004cc <write_register>
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
    iData[1] = 0xAF;
    write_register(POWER_CONTROL2,&iData[1]);
  }
}
 8000858:	e018      	b.n	800088c <CS43_SetMute+0x76>
    iData[1] = 0x00;
 800085a:	2300      	movs	r3, #0
 800085c:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	3301      	adds	r3, #1
 8000864:	4619      	mov	r1, r3
 8000866:	2022      	movs	r0, #34	; 0x22
 8000868:	f7ff fe30 	bl	80004cc <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	3301      	adds	r3, #1
 8000872:	4619      	mov	r1, r3
 8000874:	2023      	movs	r0, #35	; 0x23
 8000876:	f7ff fe29 	bl	80004cc <write_register>
    iData[1] = 0xAF;
 800087a:	23af      	movs	r3, #175	; 0xaf
 800087c:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	3301      	adds	r3, #1
 8000884:	4619      	mov	r1, r3
 8000886:	2004      	movs	r0, #4
 8000888:	f7ff fe20 	bl	80004cc <write_register>
}
 800088c:	bf00      	nop
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(0);
 800089a:	2000      	movs	r0, #0
 800089c:	f7ff ffbb 	bl	8000816 <CS43_SetMute>
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 80008a0:	2399      	movs	r3, #153	; 0x99
 80008a2:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	3301      	adds	r3, #1
 80008a8:	4619      	mov	r1, r3
 80008aa:	2000      	movs	r0, #0
 80008ac:	f7ff fe0e 	bl	80004cc <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008b0:	2380      	movs	r3, #128	; 0x80
 80008b2:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_47,&iData[1]);
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	3301      	adds	r3, #1
 80008b8:	4619      	mov	r1, r3
 80008ba:	2047      	movs	r0, #71	; 0x47
 80008bc:	f7ff fe06 	bl	80004cc <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	3301      	adds	r3, #1
 80008c4:	4619      	mov	r1, r3
 80008c6:	2032      	movs	r0, #50	; 0x32
 80008c8:	f7ff fe1a 	bl	8000500 <read_register>
	iData[1] |= 0x80;
 80008cc:	797b      	ldrb	r3, [r7, #5]
 80008ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	3301      	adds	r3, #1
 80008da:	4619      	mov	r1, r3
 80008dc:	2032      	movs	r0, #50	; 0x32
 80008de:	f7ff fdf5 	bl	80004cc <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	3301      	adds	r3, #1
 80008e6:	4619      	mov	r1, r3
 80008e8:	2032      	movs	r0, #50	; 0x32
 80008ea:	f7ff fe09 	bl	8000500 <read_register>
	iData[1] &= ~(0x80);
 80008ee:	797b      	ldrb	r3, [r7, #5]
 80008f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	3301      	adds	r3, #1
 80008fc:	4619      	mov	r1, r3
 80008fe:	2032      	movs	r0, #50	; 0x32
 8000900:	f7ff fde4 	bl	80004cc <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8000904:	2300      	movs	r3, #0
 8000906:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	3301      	adds	r3, #1
 800090c:	4619      	mov	r1, r3
 800090e:	2000      	movs	r0, #0
 8000910:	f7ff fddc 	bl	80004cc <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 8000914:	239e      	movs	r3, #158	; 0x9e
 8000916:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	3301      	adds	r3, #1
 800091c:	4619      	mov	r1, r3
 800091e:	2002      	movs	r0, #2
 8000920:	f7ff fdd4 	bl	80004cc <write_register>
}
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <CS43_Stop>:

void CS43_Stop(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(1);
 8000932:	2001      	movs	r0, #1
 8000934:	f7ff ff6f 	bl	8000816 <CS43_SetMute>
  iData[1] = 0x04;
 8000938:	2304      	movs	r3, #4
 800093a:	717b      	strb	r3, [r7, #5]
  write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	3301      	adds	r3, #1
 8000940:	4619      	mov	r1, r3
 8000942:	200e      	movs	r0, #14
 8000944:	f7ff fdc2 	bl	80004cc <write_register>
	iData[1] = 0x9F;
 8000948:	239f      	movs	r3, #159	; 0x9f
 800094a:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	3301      	adds	r3, #1
 8000950:	4619      	mov	r1, r3
 8000952:	2002      	movs	r0, #2
 8000954:	f7ff fdba 	bl	80004cc <write_register>
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <audioI2S_pllClockConfig>:

/**
 * @brief I2S Clock Config
 */
static void audioI2S_pllClockConfig(uint32_t audioFreq)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 8000968:	2300      	movs	r3, #0
 800096a:	77fb      	strb	r3, [r7, #31]
 800096c:	23ff      	movs	r3, #255	; 0xff
 800096e:	77bb      	strb	r3, [r7, #30]

  for(index = 0; index < 8; index++)
 8000970:	2300      	movs	r3, #0
 8000972:	77fb      	strb	r3, [r7, #31]
 8000974:	e00b      	b.n	800098e <audioI2S_pllClockConfig+0x2e>
  {
    if(I2SFreq[index] == audioFreq)
 8000976:	7ffb      	ldrb	r3, [r7, #31]
 8000978:	4a1c      	ldr	r2, [pc, #112]	; (80009ec <audioI2S_pllClockConfig+0x8c>)
 800097a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	429a      	cmp	r2, r3
 8000982:	d101      	bne.n	8000988 <audioI2S_pllClockConfig+0x28>
    {
      freqindex = index;
 8000984:	7ffb      	ldrb	r3, [r7, #31]
 8000986:	77bb      	strb	r3, [r7, #30]
  for(index = 0; index < 8; index++)
 8000988:	7ffb      	ldrb	r3, [r7, #31]
 800098a:	3301      	adds	r3, #1
 800098c:	77fb      	strb	r3, [r7, #31]
 800098e:	7ffb      	ldrb	r3, [r7, #31]
 8000990:	2b07      	cmp	r3, #7
 8000992:	d9f0      	bls.n	8000976 <audioI2S_pllClockConfig+0x16>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	4618      	mov	r0, r3
 800099a:	f005 ff9d 	bl	80068d8 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 800099e:	7fbb      	ldrb	r3, [r7, #30]
 80009a0:	f003 0307 	and.w	r3, r3, #7
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d111      	bne.n	80009cc <audioI2S_pllClockConfig+0x6c>
  {
    /* I2S clock config
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) × (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009a8:	2301      	movs	r3, #1
 80009aa:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 80009ac:	7fbb      	ldrb	r3, [r7, #30]
 80009ae:	4a10      	ldr	r2, [pc, #64]	; (80009f0 <audioI2S_pllClockConfig+0x90>)
 80009b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b4:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 80009b6:	7fbb      	ldrb	r3, [r7, #30]
 80009b8:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <audioI2S_pllClockConfig+0x94>)
 80009ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009be:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	4618      	mov	r0, r3
 80009c6:	f005 fea5 	bl	8006714 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 80009ca:	e00b      	b.n	80009e4 <audioI2S_pllClockConfig+0x84>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009cc:	2301      	movs	r3, #1
 80009ce:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 80009d0:	f44f 7381 	mov.w	r3, #258	; 0x102
 80009d4:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 80009d6:	2303      	movs	r3, #3
 80009d8:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	4618      	mov	r0, r3
 80009e0:	f005 fe98 	bl	8006714 <HAL_RCCEx_PeriphCLKConfig>
}
 80009e4:	bf00      	nop
 80009e6:	3720      	adds	r7, #32
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	0800dc50 	.word	0x0800dc50
 80009f0:	0800dc70 	.word	0x0800dc70
 80009f4:	0800dc90 	.word	0x0800dc90

080009f8 <I2S3_freqUpdate>:

/**
 * @brief update I2S peripheral with selected Sampling Frequency
 */
static bool I2S3_freqUpdate(uint32_t AudioFreq)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioI2S->Instance         = SPI3;
 8000a00:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <I2S3_freqUpdate+0x80>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a1d      	ldr	r2, [pc, #116]	; (8000a7c <I2S3_freqUpdate+0x84>)
 8000a06:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(hAudioI2S);
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <I2S3_freqUpdate+0x80>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	69da      	ldr	r2, [r3, #28]
 8000a10:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <I2S3_freqUpdate+0x80>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a1a:	61da      	str	r2, [r3, #28]

  /* I2S3 peripheral configuration */
  hAudioI2S->Init.AudioFreq   = AudioFreq;
 8000a1c:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <I2S3_freqUpdate+0x80>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	615a      	str	r2, [r3, #20]
  hAudioI2S->Init.ClockSource = I2S_CLOCK_PLL;
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <I2S3_freqUpdate+0x80>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	61da      	str	r2, [r3, #28]
  hAudioI2S->Init.CPOL        = I2S_CPOL_LOW;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <I2S3_freqUpdate+0x80>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  hAudioI2S->Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000a34:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <I2S3_freqUpdate+0x80>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
  hAudioI2S->Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <I2S3_freqUpdate+0x80>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a44:	611a      	str	r2, [r3, #16]
  hAudioI2S->Init.Mode        = I2S_MODE_MASTER_TX;
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <I2S3_freqUpdate+0x80>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a4e:	605a      	str	r2, [r3, #4]
  hAudioI2S->Init.Standard    = I2S_STANDARD_PHILIPS;
 8000a50:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <I2S3_freqUpdate+0x80>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(hAudioI2S) != HAL_OK)
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <I2S3_freqUpdate+0x80>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f004 f939 	bl	8004cd4 <HAL_I2S_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <I2S3_freqUpdate+0x74>
  {
    return false;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	e000      	b.n	8000a6e <I2S3_freqUpdate+0x76>
  }
  else
  {
    return true;
 8000a6c:	2301      	movs	r3, #1
  }
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000100 	.word	0x20000100
 8000a7c:	40003c00 	.word	0x40003c00

08000a80 <audioI2S_setHandle>:

/**
 * @brief set I2S HAL handle
 */
void audioI2S_setHandle(I2S_HandleTypeDef *pI2Shandle)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  hAudioI2S = pI2Shandle;
 8000a88:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <audioI2S_setHandle+0x1c>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6013      	str	r3, [r2, #0]
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20000100 	.word	0x20000100

08000aa0 <audioI2S_init>:
 * @param audioFreq - WAV file Audio sampling rate (44.1KHz, 48KHz, ...)
 * @param volume - CS43L22 Codec volume settings (0 - 100)
 * @retval state - true: Successfully, false: Failed
 */
bool audioI2S_init(uint32_t audioFreq)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  //Update PLL Clock Frequency setting
  audioI2S_pllClockConfig(audioFreq);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff ff59 	bl	8000960 <audioI2S_pllClockConfig>
  //Update I2S peripheral sampling frequency
  I2S3_freqUpdate(audioFreq);
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff ffa2 	bl	80009f8 <I2S3_freqUpdate>
  return true;
 8000ab4:	2301      	movs	r3, #1
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <audioI2S_play>:

/**
 * @brief Starts Playing Audio from buffer
 */
bool audioI2S_play(uint16_t* pDataBuf, uint32_t len)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
  //Start Codec
  CS43_Start();
 8000aca:	f7ff fee3 	bl	8000894 <CS43_Start>
  //Start I2S DMA transfer
  HAL_I2S_Transmit_DMA(hAudioI2S, pDataBuf, DMA_MAX(len/AUDIODATA_SIZE));
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <audioI2S_play+0x38>)
 8000ad0:	6818      	ldr	r0, [r3, #0]
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000ad8:	d203      	bcs.n	8000ae2 <audioI2S_play+0x22>
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	085b      	lsrs	r3, r3, #1
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	e001      	b.n	8000ae6 <audioI2S_play+0x26>
 8000ae2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	6879      	ldr	r1, [r7, #4]
 8000aea:	f004 fa33 	bl	8004f54 <HAL_I2S_Transmit_DMA>
  return true;
 8000aee:	2301      	movs	r3, #1
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000100 	.word	0x20000100

08000afc <audioI2S_pause>:

/**
 * @brief Pause audio out
 */
void audioI2S_pause(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000b00:	f7ff ff14 	bl	800092c <CS43_Stop>
  HAL_I2S_DMAPause(hAudioI2S);
 8000b04:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <audioI2S_pause+0x18>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f004 facb 	bl	80050a4 <HAL_I2S_DMAPause>
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000100 	.word	0x20000100

08000b18 <audioI2S_resume>:

/**
 * @brief Resume audio out
 */
void audioI2S_resume(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  CS43_Start();
 8000b1c:	f7ff feba 	bl	8000894 <CS43_Start>
  HAL_I2S_DMAResume(hAudioI2S);
 8000b20:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <audioI2S_resume+0x18>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f004 fb1f 	bl	8005168 <HAL_I2S_DMAResume>
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000100 	.word	0x20000100

08000b34 <audioI2S_stop>:

/**
 * @brief Stop audio
 */
void audioI2S_stop(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000b38:	f7ff fef8 	bl	800092c <CS43_Stop>
  HAL_I2S_DMAStop(hAudioI2S);
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <audioI2S_stop+0x18>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f004 fba5 	bl	8005290 <HAL_I2S_DMAStop>
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000100 	.word	0x20000100

08000b50 <HAL_I2S_TxCpltCallback>:
{

}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <HAL_I2S_TxCpltCallback+0x20>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d101      	bne.n	8000b66 <HAL_I2S_TxCpltCallback+0x16>
  {
    audioI2S_fullTransfer_Callback();
 8000b62:	f000 f929 	bl	8000db8 <audioI2S_fullTransfer_Callback>
  }
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40003c00 	.word	0x40003c00

08000b74 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d101      	bne.n	8000b8a <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    audioI2S_halfTransfer_Callback();
 8000b86:	f000 f90b 	bl	8000da0 <audioI2S_halfTransfer_Callback>
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40003c00 	.word	0x40003c00

08000b98 <wavPlayer_reset>:
  PLAYER_CONTROL_EndOfFile,
}PLAYER_CONTROL_e;
static volatile PLAYER_CONTROL_e playerControlSM = PLAYER_CONTROL_Idle;

static void wavPlayer_reset(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  audioRemainSize = 0;
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <wavPlayer_reset+0x1c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
  playerReadBytes = 0;
 8000ba2:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <wavPlayer_reset+0x20>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20001338 	.word	0x20001338
 8000bb8:	20001340 	.word	0x20001340

08000bbc <wavPlayer_fileSelect>:
/**
 * @brief Select WAV file to play
 * @retval returns true when file is found in USB Drive
 */
bool wavPlayer_fileSelect(const char* filePath)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08e      	sub	sp, #56	; 0x38
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  WAV_HeaderTypeDef wavHeader;
  UINT readBytes = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
  //Open WAV file
  if(f_open(&wavFile, filePath, FA_READ) != FR_OK)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	480d      	ldr	r0, [pc, #52]	; (8000c04 <wavPlayer_fileSelect+0x48>)
 8000bce:	f00b fd97 	bl	800c700 <f_open>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <wavPlayer_fileSelect+0x20>
  {
    return false;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	e00e      	b.n	8000bfa <wavPlayer_fileSelect+0x3e>
  }
  //Read WAV file Header
  f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 8000bdc:	f107 0308 	add.w	r3, r7, #8
 8000be0:	f107 010c 	add.w	r1, r7, #12
 8000be4:	222c      	movs	r2, #44	; 0x2c
 8000be6:	4807      	ldr	r0, [pc, #28]	; (8000c04 <wavPlayer_fileSelect+0x48>)
 8000be8:	f00b ff48 	bl	800ca7c <f_read>
  //Get audio data size
  fileLength = wavHeader.FileSize;
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	4a06      	ldr	r2, [pc, #24]	; (8000c08 <wavPlayer_fileSelect+0x4c>)
 8000bf0:	6013      	str	r3, [r2, #0]
  //Play the WAV file with frequency specified in header
  samplingFreq = wavHeader.SampleRate;
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf4:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <wavPlayer_fileSelect+0x50>)
 8000bf6:	6013      	str	r3, [r2, #0]
  return true;
 8000bf8:	2301      	movs	r3, #1
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3738      	adds	r7, #56	; 0x38
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000104 	.word	0x20000104
 8000c08:	20000334 	.word	0x20000334
 8000c0c:	2000133c 	.word	0x2000133c

08000c10 <wavPlayer_play>:

/**
 * @brief WAV File Play
 */
void wavPlayer_play(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  isFinished = false;
 8000c14:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <wavPlayer_play+0x48>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
  //Initialise I2S Audio Sampling settings
  audioI2S_init(samplingFreq);
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <wavPlayer_play+0x4c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ff3e 	bl	8000aa0 <audioI2S_init>
  //Read Audio data from USB Disk
  f_lseek(&wavFile, 0);
 8000c24:	2100      	movs	r1, #0
 8000c26:	480e      	ldr	r0, [pc, #56]	; (8000c60 <wavPlayer_play+0x50>)
 8000c28:	f00c f90f 	bl	800ce4a <f_lseek>
  f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &playerReadBytes);
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <wavPlayer_play+0x54>)
 8000c2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c32:	490d      	ldr	r1, [pc, #52]	; (8000c68 <wavPlayer_play+0x58>)
 8000c34:	480a      	ldr	r0, [pc, #40]	; (8000c60 <wavPlayer_play+0x50>)
 8000c36:	f00b ff21 	bl	800ca7c <f_read>
  audioRemainSize = fileLength - playerReadBytes;
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <wavPlayer_play+0x5c>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <wavPlayer_play+0x54>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <wavPlayer_play+0x60>)
 8000c46:	6013      	str	r3, [r2, #0]
  //Start playing the WAV
  audioI2S_play((uint16_t *)&audioBuffer[0], AUDIO_BUFFER_SIZE);
 8000c48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c4c:	4806      	ldr	r0, [pc, #24]	; (8000c68 <wavPlayer_play+0x58>)
 8000c4e:	f7ff ff37 	bl	8000ac0 <audioI2S_play>
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20001344 	.word	0x20001344
 8000c5c:	2000133c 	.word	0x2000133c
 8000c60:	20000104 	.word	0x20000104
 8000c64:	20001340 	.word	0x20001340
 8000c68:	20000338 	.word	0x20000338
 8000c6c:	20000334 	.word	0x20000334
 8000c70:	20001338 	.word	0x20001338

08000c74 <wavPlayer_process>:

/**
 * @brief Process WAV
 */
void wavPlayer_process(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  switch(playerControlSM)
 8000c78:	4b30      	ldr	r3, [pc, #192]	; (8000d3c <wavPlayer_process+0xc8>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	2b03      	cmp	r3, #3
 8000c80:	d859      	bhi.n	8000d36 <wavPlayer_process+0xc2>
 8000c82:	a201      	add	r2, pc, #4	; (adr r2, 8000c88 <wavPlayer_process+0x14>)
 8000c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c88:	08000d35 	.word	0x08000d35
 8000c8c:	08000c99 	.word	0x08000c99
 8000c90:	08000cdb 	.word	0x08000cdb
 8000c94:	08000d1d 	.word	0x08000d1d
  {
  case PLAYER_CONTROL_Idle:
    break;

  case PLAYER_CONTROL_HalfBuffer:
    playerReadBytes = 0;
 8000c98:	4b29      	ldr	r3, [pc, #164]	; (8000d40 <wavPlayer_process+0xcc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000c9e:	4b27      	ldr	r3, [pc, #156]	; (8000d3c <wavPlayer_process+0xc8>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8000ca4:	4b26      	ldr	r3, [pc, #152]	; (8000d40 <wavPlayer_process+0xcc>)
 8000ca6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000caa:	4926      	ldr	r1, [pc, #152]	; (8000d44 <wavPlayer_process+0xd0>)
 8000cac:	4826      	ldr	r0, [pc, #152]	; (8000d48 <wavPlayer_process+0xd4>)
 8000cae:	f00b fee5 	bl	800ca7c <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8000cb2:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <wavPlayer_process+0xd8>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cba:	d907      	bls.n	8000ccc <wavPlayer_process+0x58>
    {
      audioRemainSize -= playerReadBytes;
 8000cbc:	4b23      	ldr	r3, [pc, #140]	; (8000d4c <wavPlayer_process+0xd8>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <wavPlayer_process+0xcc>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	4a21      	ldr	r2, [pc, #132]	; (8000d4c <wavPlayer_process+0xd8>)
 8000cc8:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8000cca:	e034      	b.n	8000d36 <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <wavPlayer_process+0xd8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <wavPlayer_process+0xc8>)
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	701a      	strb	r2, [r3, #0]
    break;
 8000cd8:	e02d      	b.n	8000d36 <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_FullBuffer:
    playerReadBytes = 0;
 8000cda:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <wavPlayer_process+0xcc>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000ce0:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <wavPlayer_process+0xc8>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8000ce6:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <wavPlayer_process+0xcc>)
 8000ce8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cec:	4918      	ldr	r1, [pc, #96]	; (8000d50 <wavPlayer_process+0xdc>)
 8000cee:	4816      	ldr	r0, [pc, #88]	; (8000d48 <wavPlayer_process+0xd4>)
 8000cf0:	f00b fec4 	bl	800ca7c <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8000cf4:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <wavPlayer_process+0xd8>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cfc:	d907      	bls.n	8000d0e <wavPlayer_process+0x9a>
    {
      audioRemainSize -= playerReadBytes;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <wavPlayer_process+0xd8>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <wavPlayer_process+0xcc>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	4a10      	ldr	r2, [pc, #64]	; (8000d4c <wavPlayer_process+0xd8>)
 8000d0a:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8000d0c:	e013      	b.n	8000d36 <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <wavPlayer_process+0xd8>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8000d14:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <wavPlayer_process+0xc8>)
 8000d16:	2203      	movs	r2, #3
 8000d18:	701a      	strb	r2, [r3, #0]
    break;
 8000d1a:	e00c      	b.n	8000d36 <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_EndOfFile:
    f_close(&wavFile);
 8000d1c:	480a      	ldr	r0, [pc, #40]	; (8000d48 <wavPlayer_process+0xd4>)
 8000d1e:	f00c f86a 	bl	800cdf6 <f_close>
    wavPlayer_reset();
 8000d22:	f7ff ff39 	bl	8000b98 <wavPlayer_reset>
    isFinished = true;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <wavPlayer_process+0xe0>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	701a      	strb	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <wavPlayer_process+0xc8>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
    break;
 8000d32:	e000      	b.n	8000d36 <wavPlayer_process+0xc2>
    break;
 8000d34:	bf00      	nop
  }
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20001345 	.word	0x20001345
 8000d40:	20001340 	.word	0x20001340
 8000d44:	20000338 	.word	0x20000338
 8000d48:	20000104 	.word	0x20000104
 8000d4c:	20001338 	.word	0x20001338
 8000d50:	20000b38 	.word	0x20000b38
 8000d54:	20001344 	.word	0x20001344

08000d58 <wavPlayer_stop>:

/**
 * @brief WAV stop
 */
void wavPlayer_stop(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  audioI2S_stop();
 8000d5c:	f7ff feea 	bl	8000b34 <audioI2S_stop>
  isFinished = true;
 8000d60:	4b02      	ldr	r3, [pc, #8]	; (8000d6c <wavPlayer_stop+0x14>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	701a      	strb	r2, [r3, #0]
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20001344 	.word	0x20001344

08000d70 <wavPlayer_pause>:

/**
 * @brief WAV pause/resume
 */
void wavPlayer_pause(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  audioI2S_pause();
 8000d74:	f7ff fec2 	bl	8000afc <audioI2S_pause>
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <wavPlayer_resume>:
void wavPlayer_resume(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  audioI2S_resume();
 8000d80:	f7ff feca 	bl	8000b18 <audioI2S_resume>
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <wavPlayer_isFinished>:

/**
 * @brief isEndofFile reached
 */
bool wavPlayer_isFinished(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return isFinished;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <wavPlayer_isFinished+0x14>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20001344 	.word	0x20001344

08000da0 <audioI2S_halfTransfer_Callback>:

/**
 * @brief Half/Full transfer Audio callback for buffer management
 */
void audioI2S_halfTransfer_Callback(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_HalfBuffer;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <audioI2S_halfTransfer_Callback+0x14>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	701a      	strb	r2, [r3, #0]
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	20001345 	.word	0x20001345

08000db8 <audioI2S_fullTransfer_Callback>:
void audioI2S_fullTransfer_Callback(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_FullBuffer;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <audioI2S_fullTransfer_Callback+0x14>)
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	701a      	strb	r2, [r3, #0]
//  audioI2S_changeBuffer((uint16_t*)&audioBuffer[0], AUDIO_BUFFER_SIZE / 2);
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	20001345 	.word	0x20001345

08000dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b095      	sub	sp, #84	; 0x54
 8000dd4:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd6:	f000 fc87 	bl	80016e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dda:	f000 f90f 	bl	8000ffc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dde:	f000 fa0b 	bl	80011f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000de2:	f000 f9e9 	bl	80011b8 <MX_DMA_Init>
  MX_I2C1_Init();
 8000de6:	f000 f98b 	bl	8001100 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000dea:	f000 f9b7 	bl	800115c <MX_I2S3_Init>
  MX_FATFS_Init();
 8000dee:	f006 fde3 	bl	80079b8 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000df2:	f00c fa8f 	bl	800d314 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  CS43_Init(hi2c1, MODE_I2S);
 8000df6:	4c77      	ldr	r4, [pc, #476]	; (8000fd4 <main+0x204>)
 8000df8:	2300      	movs	r3, #0
 8000dfa:	9311      	str	r3, [sp, #68]	; 0x44
 8000dfc:	4668      	mov	r0, sp
 8000dfe:	f104 0310 	add.w	r3, r4, #16
 8000e02:	2244      	movs	r2, #68	; 0x44
 8000e04:	4619      	mov	r1, r3
 8000e06:	f00c fdd1 	bl	800d9ac <memcpy>
 8000e0a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e0e:	f7ff fb97 	bl	8000540 <CS43_Init>
  CS43_SetVolume(230);//0-255
 8000e12:	20e6      	movs	r0, #230	; 0xe6
 8000e14:	f7ff fce4 	bl	80007e0 <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8000e18:	2003      	movs	r0, #3
 8000e1a:	f7ff fc97 	bl	800074c <CS43_Enable_RightLeft>

  audioI2S_setHandle(&hi2s3);
 8000e1e:	486e      	ldr	r0, [pc, #440]	; (8000fd8 <main+0x208>)
 8000e20:	f7ff fe2e 	bl	8000a80 <audioI2S_setHandle>

  bool isSdCardMounted=0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	71fb      	strb	r3, [r7, #7]
  bool pauseResumeToggle=0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	71bb      	strb	r3, [r7, #6]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000e2c:	f00c fa98 	bl	800d360 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if(Appli_state == APPLICATION_START)
 8000e30:	4b6a      	ldr	r3, [pc, #424]	; (8000fdc <main+0x20c>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d106      	bne.n	8000e46 <main+0x76>
    {
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e3e:	4868      	ldr	r0, [pc, #416]	; (8000fe0 <main+0x210>)
 8000e40:	f001 fb8e 	bl	8002560 <HAL_GPIO_WritePin>
 8000e44:	e010      	b.n	8000e68 <main+0x98>
    }
    else if(Appli_state == APPLICATION_DISCONNECT)
 8000e46:	4b65      	ldr	r3, [pc, #404]	; (8000fdc <main+0x20c>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	d10c      	bne.n	8000e68 <main+0x98>
    {
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e54:	4862      	ldr	r0, [pc, #392]	; (8000fe0 <main+0x210>)
 8000e56:	f001 fb83 	bl	8002560 <HAL_GPIO_WritePin>
      f_mount(NULL, (TCHAR const*)"", 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	4961      	ldr	r1, [pc, #388]	; (8000fe4 <main+0x214>)
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f00b fc08 	bl	800c674 <f_mount>
      isSdCardMounted = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	71fb      	strb	r3, [r7, #7]
    }

    if(Appli_state == APPLICATION_READY)
 8000e68:	4b5c      	ldr	r3, [pc, #368]	; (8000fdc <main+0x20c>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d1dd      	bne.n	8000e2c <main+0x5c>
    {
      if(!isSdCardMounted)
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	f083 0301 	eor.w	r3, r3, #1
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d006      	beq.n	8000e8a <main+0xba>
      {
        f_mount(&USBHFatFS, (const TCHAR*)USBHPath, 0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	495a      	ldr	r1, [pc, #360]	; (8000fe8 <main+0x218>)
 8000e80:	485a      	ldr	r0, [pc, #360]	; (8000fec <main+0x21c>)
 8000e82:	f00b fbf7 	bl	800c674 <f_mount>
        isSdCardMounted = 1;
 8000e86:	2301      	movs	r3, #1
 8000e88:	71fb      	strb	r3, [r7, #7]
      }
      if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	4858      	ldr	r0, [pc, #352]	; (8000ff0 <main+0x220>)
 8000e8e:	f001 fb4f 	bl	8002530 <HAL_GPIO_ReadPin>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d0c9      	beq.n	8000e2c <main+0x5c>
      {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e9e:	4850      	ldr	r0, [pc, #320]	; (8000fe0 <main+0x210>)
 8000ea0:	f001 fb5e 	bl	8002560 <HAL_GPIO_WritePin>
        HAL_Delay(500);
 8000ea4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ea8:	f000 fc90 	bl	80017cc <HAL_Delay>
        wavPlayer_fileSelect(WAV_FILE1);
 8000eac:	4851      	ldr	r0, [pc, #324]	; (8000ff4 <main+0x224>)
 8000eae:	f7ff fe85 	bl	8000bbc <wavPlayer_fileSelect>
        wavPlayer_play();
 8000eb2:	f7ff fead 	bl	8000c10 <wavPlayer_play>

        while(!wavPlayer_isFinished())
 8000eb6:	e035      	b.n	8000f24 <main+0x154>
        {
          wavPlayer_process();
 8000eb8:	f7ff fedc 	bl	8000c74 <wavPlayer_process>
          if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	484c      	ldr	r0, [pc, #304]	; (8000ff0 <main+0x220>)
 8000ec0:	f001 fb36 	bl	8002530 <HAL_GPIO_ReadPin>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d02c      	beq.n	8000f24 <main+0x154>
          {
            pauseResumeToggle^=1;
 8000eca:	79bb      	ldrb	r3, [r7, #6]
 8000ecc:	f083 0301 	eor.w	r3, r3, #1
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	bf14      	ite	ne
 8000ed6:	2301      	movne	r3, #1
 8000ed8:	2300      	moveq	r3, #0
 8000eda:	71bb      	strb	r3, [r7, #6]
            if(pauseResumeToggle)
 8000edc:	79bb      	ldrb	r3, [r7, #6]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d00b      	beq.n	8000efa <main+0x12a>
            {
              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ee8:	483d      	ldr	r0, [pc, #244]	; (8000fe0 <main+0x210>)
 8000eea:	f001 fb39 	bl	8002560 <HAL_GPIO_WritePin>
              wavPlayer_pause();
 8000eee:	f7ff ff3f 	bl	8000d70 <wavPlayer_pause>
              HAL_Delay(200);
 8000ef2:	20c8      	movs	r0, #200	; 0xc8
 8000ef4:	f000 fc6a 	bl	80017cc <HAL_Delay>
 8000ef8:	e014      	b.n	8000f24 <main+0x154>
            }
            else
            {
              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f00:	4837      	ldr	r0, [pc, #220]	; (8000fe0 <main+0x210>)
 8000f02:	f001 fb2d 	bl	8002560 <HAL_GPIO_WritePin>
              HAL_Delay(1000);
 8000f06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f0a:	f000 fc5f 	bl	80017cc <HAL_Delay>
              if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000f0e:	2101      	movs	r1, #1
 8000f10:	4837      	ldr	r0, [pc, #220]	; (8000ff0 <main+0x220>)
 8000f12:	f001 fb0d 	bl	8002530 <HAL_GPIO_ReadPin>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <main+0x150>
              {
                wavPlayer_stop();
 8000f1c:	f7ff ff1c 	bl	8000d58 <wavPlayer_stop>
              }
              {
                wavPlayer_resume();
 8000f20:	f7ff ff2c 	bl	8000d7c <wavPlayer_resume>
        while(!wavPlayer_isFinished())
 8000f24:	f7ff ff30 	bl	8000d88 <wavPlayer_isFinished>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	f083 0301 	eor.w	r3, r3, #1
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d1c1      	bne.n	8000eb8 <main+0xe8>
              }
            }
          }
        }
        wavPlayer_fileSelect(WAV_FILE2);
 8000f34:	4830      	ldr	r0, [pc, #192]	; (8000ff8 <main+0x228>)
 8000f36:	f7ff fe41 	bl	8000bbc <wavPlayer_fileSelect>
                wavPlayer_play();
 8000f3a:	f7ff fe69 	bl	8000c10 <wavPlayer_play>

                while(!wavPlayer_isFinished())
 8000f3e:	e035      	b.n	8000fac <main+0x1dc>
                {
                  wavPlayer_process();
 8000f40:	f7ff fe98 	bl	8000c74 <wavPlayer_process>
                  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000f44:	2101      	movs	r1, #1
 8000f46:	482a      	ldr	r0, [pc, #168]	; (8000ff0 <main+0x220>)
 8000f48:	f001 faf2 	bl	8002530 <HAL_GPIO_ReadPin>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d02c      	beq.n	8000fac <main+0x1dc>
                  {
                    pauseResumeToggle^=1;
 8000f52:	79bb      	ldrb	r3, [r7, #6]
 8000f54:	f083 0301 	eor.w	r3, r3, #1
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	bf14      	ite	ne
 8000f5e:	2301      	movne	r3, #1
 8000f60:	2300      	moveq	r3, #0
 8000f62:	71bb      	strb	r3, [r7, #6]
                    if(pauseResumeToggle)
 8000f64:	79bb      	ldrb	r3, [r7, #6]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00b      	beq.n	8000f82 <main+0x1b2>
                    {
                      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f70:	481b      	ldr	r0, [pc, #108]	; (8000fe0 <main+0x210>)
 8000f72:	f001 faf5 	bl	8002560 <HAL_GPIO_WritePin>
                      wavPlayer_pause();
 8000f76:	f7ff fefb 	bl	8000d70 <wavPlayer_pause>
                      HAL_Delay(200);
 8000f7a:	20c8      	movs	r0, #200	; 0xc8
 8000f7c:	f000 fc26 	bl	80017cc <HAL_Delay>
 8000f80:	e014      	b.n	8000fac <main+0x1dc>
                    }
                    else
                    {
                      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f88:	4815      	ldr	r0, [pc, #84]	; (8000fe0 <main+0x210>)
 8000f8a:	f001 fae9 	bl	8002560 <HAL_GPIO_WritePin>
                      HAL_Delay(1000);
 8000f8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f92:	f000 fc1b 	bl	80017cc <HAL_Delay>
                      if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000f96:	2101      	movs	r1, #1
 8000f98:	4815      	ldr	r0, [pc, #84]	; (8000ff0 <main+0x220>)
 8000f9a:	f001 fac9 	bl	8002530 <HAL_GPIO_ReadPin>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <main+0x1d8>
                      {
                        wavPlayer_stop();
 8000fa4:	f7ff fed8 	bl	8000d58 <wavPlayer_stop>
                      }
                      {
                        wavPlayer_resume();
 8000fa8:	f7ff fee8 	bl	8000d7c <wavPlayer_resume>
                while(!wavPlayer_isFinished())
 8000fac:	f7ff feec 	bl	8000d88 <wavPlayer_isFinished>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	f083 0301 	eor.w	r3, r3, #1
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1c1      	bne.n	8000f40 <main+0x170>
                      }
                    }
                  }
                }

        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc2:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <main+0x210>)
 8000fc4:	f001 facc 	bl	8002560 <HAL_GPIO_WritePin>
        HAL_Delay(1000);
 8000fc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fcc:	f000 fbfe 	bl	80017cc <HAL_Delay>
    MX_USB_HOST_Process();
 8000fd0:	e72c      	b.n	8000e2c <main+0x5c>
 8000fd2:	bf00      	nop
 8000fd4:	20001348 	.word	0x20001348
 8000fd8:	2000139c 	.word	0x2000139c
 8000fdc:	20001a90 	.word	0x20001a90
 8000fe0:	40020c00 	.word	0x40020c00
 8000fe4:	0800dbec 	.word	0x0800dbec
 8000fe8:	20001450 	.word	0x20001450
 8000fec:	20001454 	.word	0x20001454
 8000ff0:	40020000 	.word	0x40020000
 8000ff4:	0800dbf0 	.word	0x0800dbf0
 8000ff8:	0800dbfc 	.word	0x0800dbfc

08000ffc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b098      	sub	sp, #96	; 0x60
 8001000:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001002:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001006:	2230      	movs	r2, #48	; 0x30
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f00c fcdc 	bl	800d9c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001010:	f107 031c 	add.w	r3, r7, #28
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	4b31      	ldr	r3, [pc, #196]	; (80010f8 <SystemClock_Config+0xfc>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	4a30      	ldr	r2, [pc, #192]	; (80010f8 <SystemClock_Config+0xfc>)
 8001038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103c:	6413      	str	r3, [r2, #64]	; 0x40
 800103e:	4b2e      	ldr	r3, [pc, #184]	; (80010f8 <SystemClock_Config+0xfc>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	4b2b      	ldr	r3, [pc, #172]	; (80010fc <SystemClock_Config+0x100>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a2a      	ldr	r2, [pc, #168]	; (80010fc <SystemClock_Config+0x100>)
 8001054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001058:	6013      	str	r3, [r2, #0]
 800105a:	4b28      	ldr	r3, [pc, #160]	; (80010fc <SystemClock_Config+0x100>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001066:	2301      	movs	r3, #1
 8001068:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800106a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800106e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001070:	2302      	movs	r3, #2
 8001072:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001074:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001078:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800107a:	2308      	movs	r3, #8
 800107c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800107e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001082:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001084:	2302      	movs	r3, #2
 8001086:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001088:	2307      	movs	r3, #7
 800108a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001090:	4618      	mov	r0, r3
 8001092:	f004 febb 	bl	8005e0c <HAL_RCC_OscConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800109c:	f000 f93e 	bl	800131c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a0:	230f      	movs	r3, #15
 80010a2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a4:	2302      	movs	r3, #2
 80010a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	2105      	movs	r1, #5
 80010be:	4618      	mov	r0, r3
 80010c0:	f005 f91c 	bl	80062fc <HAL_RCC_ClockConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80010ca:	f000 f927 	bl	800131c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80010ce:	2301      	movs	r3, #1
 80010d0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 271;
 80010d2:	f240 130f 	movw	r3, #271	; 0x10f
 80010d6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 80010d8:	2306      	movs	r3, #6
 80010da:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	4618      	mov	r0, r3
 80010e2:	f005 fb17 	bl	8006714 <HAL_RCCEx_PeriphCLKConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80010ec:	f000 f916 	bl	800131c <Error_Handler>
  }
}
 80010f0:	bf00      	nop
 80010f2:	3760      	adds	r7, #96	; 0x60
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40007000 	.word	0x40007000

08001100 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <MX_I2C1_Init+0x50>)
 8001106:	4a13      	ldr	r2, [pc, #76]	; (8001154 <MX_I2C1_Init+0x54>)
 8001108:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <MX_I2C1_Init+0x50>)
 800110c:	4a12      	ldr	r2, [pc, #72]	; (8001158 <MX_I2C1_Init+0x58>)
 800110e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_I2C1_Init+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <MX_I2C1_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_I2C1_Init+0x50>)
 800111e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001122:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001124:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <MX_I2C1_Init+0x50>)
 8001126:	2200      	movs	r2, #0
 8001128:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_I2C1_Init+0x50>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001130:	4b07      	ldr	r3, [pc, #28]	; (8001150 <MX_I2C1_Init+0x50>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <MX_I2C1_Init+0x50>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <MX_I2C1_Init+0x50>)
 800113e:	f002 fe33 	bl	8003da8 <HAL_I2C_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001148:	f000 f8e8 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20001348 	.word	0x20001348
 8001154:	40005400 	.word	0x40005400
 8001158:	000186a0 	.word	0x000186a0

0800115c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <MX_I2S3_Init+0x54>)
 8001162:	4a14      	ldr	r2, [pc, #80]	; (80011b4 <MX_I2S3_Init+0x58>)
 8001164:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001166:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <MX_I2S3_Init+0x54>)
 8001168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800116c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <MX_I2S3_Init+0x54>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001174:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_I2S3_Init+0x54>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800117a:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <MX_I2S3_Init+0x54>)
 800117c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001180:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_I2S3_Init+0x54>)
 8001184:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001188:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_I2S3_Init+0x54>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <MX_I2S3_Init+0x54>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_I2S3_Init+0x54>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <MX_I2S3_Init+0x54>)
 800119e:	f003 fd99 	bl	8004cd4 <HAL_I2S_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80011a8:	f000 f8b8 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	2000139c 	.word	0x2000139c
 80011b4:	40003c00 	.word	0x40003c00

080011b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_DMA_Init+0x3c>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <MX_DMA_Init+0x3c>)
 80011c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_DMA_Init+0x3c>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	2010      	movs	r0, #16
 80011e0:	f000 fbf3 	bl	80019ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80011e4:	2010      	movs	r0, #16
 80011e6:	f000 fc0c 	bl	8001a02 <HAL_NVIC_EnableIRQ>

}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800

080011f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	; 0x28
 80011fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
 8001212:	4b3e      	ldr	r3, [pc, #248]	; (800130c <MX_GPIO_Init+0x114>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a3d      	ldr	r2, [pc, #244]	; (800130c <MX_GPIO_Init+0x114>)
 8001218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b3b      	ldr	r3, [pc, #236]	; (800130c <MX_GPIO_Init+0x114>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	4b37      	ldr	r3, [pc, #220]	; (800130c <MX_GPIO_Init+0x114>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a36      	ldr	r2, [pc, #216]	; (800130c <MX_GPIO_Init+0x114>)
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b34      	ldr	r3, [pc, #208]	; (800130c <MX_GPIO_Init+0x114>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	4b30      	ldr	r3, [pc, #192]	; (800130c <MX_GPIO_Init+0x114>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a2f      	ldr	r2, [pc, #188]	; (800130c <MX_GPIO_Init+0x114>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b2d      	ldr	r3, [pc, #180]	; (800130c <MX_GPIO_Init+0x114>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	4b29      	ldr	r3, [pc, #164]	; (800130c <MX_GPIO_Init+0x114>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a28      	ldr	r2, [pc, #160]	; (800130c <MX_GPIO_Init+0x114>)
 800126c:	f043 0308 	orr.w	r3, r3, #8
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b26      	ldr	r3, [pc, #152]	; (800130c <MX_GPIO_Init+0x114>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	4b22      	ldr	r3, [pc, #136]	; (800130c <MX_GPIO_Init+0x114>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a21      	ldr	r2, [pc, #132]	; (800130c <MX_GPIO_Init+0x114>)
 8001288:	f043 0302 	orr.w	r3, r3, #2
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b1f      	ldr	r3, [pc, #124]	; (800130c <MX_GPIO_Init+0x114>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	2101      	movs	r1, #1
 800129e:	481c      	ldr	r0, [pc, #112]	; (8001310 <MX_GPIO_Init+0x118>)
 80012a0:	f001 f95e 	bl	8002560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80012a4:	2200      	movs	r2, #0
 80012a6:	f24f 0110 	movw	r1, #61456	; 0xf010
 80012aa:	481a      	ldr	r0, [pc, #104]	; (8001314 <MX_GPIO_Init+0x11c>)
 80012ac:	f001 f958 	bl	8002560 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012b0:	2301      	movs	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	4812      	ldr	r0, [pc, #72]	; (8001310 <MX_GPIO_Init+0x118>)
 80012c8:	f000 ff96 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012cc:	2301      	movs	r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	480e      	ldr	r0, [pc, #56]	; (8001318 <MX_GPIO_Init+0x120>)
 80012e0:	f000 ff8a 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80012e4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80012e8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4619      	mov	r1, r3
 80012fc:	4805      	ldr	r0, [pc, #20]	; (8001314 <MX_GPIO_Init+0x11c>)
 80012fe:	f000 ff7b 	bl	80021f8 <HAL_GPIO_Init>

}
 8001302:	bf00      	nop
 8001304:	3728      	adds	r7, #40	; 0x28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800
 8001310:	40020800 	.word	0x40020800
 8001314:	40020c00 	.word	0x40020c00
 8001318:	40020000 	.word	0x40020000

0800131c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
	...

0800132c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <HAL_MspInit+0x4c>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	4a0f      	ldr	r2, [pc, #60]	; (8001378 <HAL_MspInit+0x4c>)
 800133c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001340:	6453      	str	r3, [r2, #68]	; 0x44
 8001342:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <HAL_MspInit+0x4c>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	603b      	str	r3, [r7, #0]
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_MspInit+0x4c>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	4a08      	ldr	r2, [pc, #32]	; (8001378 <HAL_MspInit+0x4c>)
 8001358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800135c:	6413      	str	r3, [r2, #64]	; 0x40
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_MspInit+0x4c>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800136a:	2007      	movs	r0, #7
 800136c:	f000 fb22 	bl	80019b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40023800 	.word	0x40023800

0800137c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a19      	ldr	r2, [pc, #100]	; (8001400 <HAL_I2C_MspInit+0x84>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d12c      	bne.n	80013f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <HAL_I2C_MspInit+0x88>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a17      	ldr	r2, [pc, #92]	; (8001404 <HAL_I2C_MspInit+0x88>)
 80013a8:	f043 0302 	orr.w	r3, r3, #2
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <HAL_I2C_MspInit+0x88>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80013ba:	f44f 7310 	mov.w	r3, #576	; 0x240
 80013be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013c0:	2312      	movs	r3, #18
 80013c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c8:	2303      	movs	r3, #3
 80013ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013cc:	2304      	movs	r3, #4
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	480c      	ldr	r0, [pc, #48]	; (8001408 <HAL_I2C_MspInit+0x8c>)
 80013d8:	f000 ff0e 	bl	80021f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013dc:	2300      	movs	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <HAL_I2C_MspInit+0x88>)
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	4a07      	ldr	r2, [pc, #28]	; (8001404 <HAL_I2C_MspInit+0x88>)
 80013e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013ea:	6413      	str	r3, [r2, #64]	; 0x40
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <HAL_I2C_MspInit+0x88>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013f8:	bf00      	nop
 80013fa:	3728      	adds	r7, #40	; 0x28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40005400 	.word	0x40005400
 8001404:	40023800 	.word	0x40023800
 8001408:	40020400 	.word	0x40020400

0800140c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08e      	sub	sp, #56	; 0x38
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a4e      	ldr	r2, [pc, #312]	; (8001570 <HAL_I2S_MspInit+0x164>)
 8001438:	4293      	cmp	r3, r2
 800143a:	f040 8095 	bne.w	8001568 <HAL_I2S_MspInit+0x15c>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800143e:	2301      	movs	r3, #1
 8001440:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 271;
 8001442:	f240 130f 	movw	r3, #271	; 0x10f
 8001446:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 8001448:	2306      	movs	r3, #6
 800144a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	4618      	mov	r0, r3
 8001452:	f005 f95f 	bl	8006714 <HAL_RCCEx_PeriphCLKConfig>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <HAL_I2S_MspInit+0x54>
    {
      Error_Handler();
 800145c:	f7ff ff5e 	bl	800131c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001460:	2300      	movs	r3, #0
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	4b43      	ldr	r3, [pc, #268]	; (8001574 <HAL_I2S_MspInit+0x168>)
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	4a42      	ldr	r2, [pc, #264]	; (8001574 <HAL_I2S_MspInit+0x168>)
 800146a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800146e:	6413      	str	r3, [r2, #64]	; 0x40
 8001470:	4b40      	ldr	r3, [pc, #256]	; (8001574 <HAL_I2S_MspInit+0x168>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	4b3c      	ldr	r3, [pc, #240]	; (8001574 <HAL_I2S_MspInit+0x168>)
 8001482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001484:	4a3b      	ldr	r2, [pc, #236]	; (8001574 <HAL_I2S_MspInit+0x168>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	6313      	str	r3, [r2, #48]	; 0x30
 800148c:	4b39      	ldr	r3, [pc, #228]	; (8001574 <HAL_I2S_MspInit+0x168>)
 800148e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001498:	2300      	movs	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	4b35      	ldr	r3, [pc, #212]	; (8001574 <HAL_I2S_MspInit+0x168>)
 800149e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a0:	4a34      	ldr	r2, [pc, #208]	; (8001574 <HAL_I2S_MspInit+0x168>)
 80014a2:	f043 0304 	orr.w	r3, r3, #4
 80014a6:	6313      	str	r3, [r2, #48]	; 0x30
 80014a8:	4b32      	ldr	r3, [pc, #200]	; (8001574 <HAL_I2S_MspInit+0x168>)
 80014aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014b4:	2310      	movs	r3, #16
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014c4:	2306      	movs	r3, #6
 80014c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014cc:	4619      	mov	r1, r3
 80014ce:	482a      	ldr	r0, [pc, #168]	; (8001578 <HAL_I2S_MspInit+0x16c>)
 80014d0:	f000 fe92 	bl	80021f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80014d4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014e6:	2306      	movs	r3, #6
 80014e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ee:	4619      	mov	r1, r3
 80014f0:	4822      	ldr	r0, [pc, #136]	; (800157c <HAL_I2S_MspInit+0x170>)
 80014f2:	f000 fe81 	bl	80021f8 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80014f6:	4b22      	ldr	r3, [pc, #136]	; (8001580 <HAL_I2S_MspInit+0x174>)
 80014f8:	4a22      	ldr	r2, [pc, #136]	; (8001584 <HAL_I2S_MspInit+0x178>)
 80014fa:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80014fc:	4b20      	ldr	r3, [pc, #128]	; (8001580 <HAL_I2S_MspInit+0x174>)
 80014fe:	2200      	movs	r2, #0
 8001500:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001502:	4b1f      	ldr	r3, [pc, #124]	; (8001580 <HAL_I2S_MspInit+0x174>)
 8001504:	2240      	movs	r2, #64	; 0x40
 8001506:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001508:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <HAL_I2S_MspInit+0x174>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800150e:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <HAL_I2S_MspInit+0x174>)
 8001510:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001514:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001516:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <HAL_I2S_MspInit+0x174>)
 8001518:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800151c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800151e:	4b18      	ldr	r3, [pc, #96]	; (8001580 <HAL_I2S_MspInit+0x174>)
 8001520:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001524:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001526:	4b16      	ldr	r3, [pc, #88]	; (8001580 <HAL_I2S_MspInit+0x174>)
 8001528:	f44f 7280 	mov.w	r2, #256	; 0x100
 800152c:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800152e:	4b14      	ldr	r3, [pc, #80]	; (8001580 <HAL_I2S_MspInit+0x174>)
 8001530:	2200      	movs	r2, #0
 8001532:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_I2S_MspInit+0x174>)
 8001536:	2204      	movs	r2, #4
 8001538:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <HAL_I2S_MspInit+0x174>)
 800153c:	2203      	movs	r2, #3
 800153e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <HAL_I2S_MspInit+0x174>)
 8001542:	2200      	movs	r2, #0
 8001544:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <HAL_I2S_MspInit+0x174>)
 8001548:	2200      	movs	r2, #0
 800154a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800154c:	480c      	ldr	r0, [pc, #48]	; (8001580 <HAL_I2S_MspInit+0x174>)
 800154e:	f000 fa73 	bl	8001a38 <HAL_DMA_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <HAL_I2S_MspInit+0x150>
    {
      Error_Handler();
 8001558:	f7ff fee0 	bl	800131c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a08      	ldr	r2, [pc, #32]	; (8001580 <HAL_I2S_MspInit+0x174>)
 8001560:	639a      	str	r2, [r3, #56]	; 0x38
 8001562:	4a07      	ldr	r2, [pc, #28]	; (8001580 <HAL_I2S_MspInit+0x174>)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001568:	bf00      	nop
 800156a:	3738      	adds	r7, #56	; 0x38
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40003c00 	.word	0x40003c00
 8001574:	40023800 	.word	0x40023800
 8001578:	40020000 	.word	0x40020000
 800157c:	40020800 	.word	0x40020800
 8001580:	200013e4 	.word	0x200013e4
 8001584:	40026088 	.word	0x40026088

08001588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800158c:	e7fe      	b.n	800158c <NMI_Handler+0x4>

0800158e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001592:	e7fe      	b.n	8001592 <HardFault_Handler+0x4>

08001594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <MemManage_Handler+0x4>

0800159a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <BusFault_Handler+0x4>

080015a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <UsageFault_Handler+0x4>

080015a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d4:	f000 f8da 	bl	800178c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}

080015dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80015e0:	4802      	ldr	r0, [pc, #8]	; (80015ec <DMA1_Stream5_IRQHandler+0x10>)
 80015e2:	f000 fb9f 	bl	8001d24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200013e4 	.word	0x200013e4

080015f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80015f4:	4802      	ldr	r0, [pc, #8]	; (8001600 <OTG_FS_IRQHandler+0x10>)
 80015f6:	f001 fa37 	bl	8002a68 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20001a94 	.word	0x20001a94

08001604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800160c:	4a14      	ldr	r2, [pc, #80]	; (8001660 <_sbrk+0x5c>)
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <_sbrk+0x60>)
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <_sbrk+0x64>)
 8001622:	4a12      	ldr	r2, [pc, #72]	; (800166c <_sbrk+0x68>)
 8001624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <_sbrk+0x64>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	429a      	cmp	r2, r3
 8001632:	d207      	bcs.n	8001644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001634:	f00c f980 	bl	800d938 <__errno>
 8001638:	4603      	mov	r3, r0
 800163a:	220c      	movs	r2, #12
 800163c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001642:	e009      	b.n	8001658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001644:	4b08      	ldr	r3, [pc, #32]	; (8001668 <_sbrk+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800164a:	4b07      	ldr	r3, [pc, #28]	; (8001668 <_sbrk+0x64>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	4a05      	ldr	r2, [pc, #20]	; (8001668 <_sbrk+0x64>)
 8001654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001656:	68fb      	ldr	r3, [r7, #12]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20020000 	.word	0x20020000
 8001664:	00002000 	.word	0x00002000
 8001668:	20001444 	.word	0x20001444
 800166c:	20001da8 	.word	0x20001da8

08001670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <SystemInit+0x20>)
 8001676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800167a:	4a05      	ldr	r2, [pc, #20]	; (8001690 <SystemInit+0x20>)
 800167c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001694:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001698:	480d      	ldr	r0, [pc, #52]	; (80016d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800169a:	490e      	ldr	r1, [pc, #56]	; (80016d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800169c:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a0:	e002      	b.n	80016a8 <LoopCopyDataInit>

080016a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a6:	3304      	adds	r3, #4

080016a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ac:	d3f9      	bcc.n	80016a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ae:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016b0:	4c0b      	ldr	r4, [pc, #44]	; (80016e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b4:	e001      	b.n	80016ba <LoopFillZerobss>

080016b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b8:	3204      	adds	r2, #4

080016ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016bc:	d3fb      	bcc.n	80016b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016be:	f7ff ffd7 	bl	8001670 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016c2:	f00c f93f 	bl	800d944 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016c6:	f7ff fb83 	bl	8000dd0 <main>
  bx  lr    
 80016ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80016d8:	0800dd74 	.word	0x0800dd74
  ldr r2, =_sbss
 80016dc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80016e0:	20001da8 	.word	0x20001da8

080016e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e4:	e7fe      	b.n	80016e4 <ADC_IRQHandler>
	...

080016e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016ec:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <HAL_Init+0x40>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a0d      	ldr	r2, [pc, #52]	; (8001728 <HAL_Init+0x40>)
 80016f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016f8:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <HAL_Init+0x40>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <HAL_Init+0x40>)
 80016fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001702:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <HAL_Init+0x40>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a07      	ldr	r2, [pc, #28]	; (8001728 <HAL_Init+0x40>)
 800170a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001710:	2003      	movs	r0, #3
 8001712:	f000 f94f 	bl	80019b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001716:	2000      	movs	r0, #0
 8001718:	f000 f808 	bl	800172c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800171c:	f7ff fe06 	bl	800132c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023c00 	.word	0x40023c00

0800172c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_InitTick+0x54>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_InitTick+0x58>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4619      	mov	r1, r3
 800173e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001742:	fbb3 f3f1 	udiv	r3, r3, r1
 8001746:	fbb2 f3f3 	udiv	r3, r2, r3
 800174a:	4618      	mov	r0, r3
 800174c:	f000 f967 	bl	8001a1e <HAL_SYSTICK_Config>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e00e      	b.n	8001778 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b0f      	cmp	r3, #15
 800175e:	d80a      	bhi.n	8001776 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001760:	2200      	movs	r2, #0
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001768:	f000 f92f 	bl	80019ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800176c:	4a06      	ldr	r2, [pc, #24]	; (8001788 <HAL_InitTick+0x5c>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	e000      	b.n	8001778 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
}
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000000 	.word	0x20000000
 8001784:	20000008 	.word	0x20000008
 8001788:	20000004 	.word	0x20000004

0800178c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_IncTick+0x20>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	461a      	mov	r2, r3
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_IncTick+0x24>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4413      	add	r3, r2
 800179c:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <HAL_IncTick+0x24>)
 800179e:	6013      	str	r3, [r2, #0]
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20000008 	.word	0x20000008
 80017b0:	20001448 	.word	0x20001448

080017b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return uwTick;
 80017b8:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <HAL_GetTick+0x14>)
 80017ba:	681b      	ldr	r3, [r3, #0]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20001448 	.word	0x20001448

080017cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d4:	f7ff ffee 	bl	80017b4 <HAL_GetTick>
 80017d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017e4:	d005      	beq.n	80017f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_Delay+0x44>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4413      	add	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017f2:	bf00      	nop
 80017f4:	f7ff ffde 	bl	80017b4 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	429a      	cmp	r2, r3
 8001802:	d8f7      	bhi.n	80017f4 <HAL_Delay+0x28>
  {
  }
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000008 	.word	0x20000008

08001814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001830:	4013      	ands	r3, r2
 8001832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800183c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001846:	4a04      	ldr	r2, [pc, #16]	; (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	60d3      	str	r3, [r2, #12]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <__NVIC_GetPriorityGrouping+0x18>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	0a1b      	lsrs	r3, r3, #8
 8001866:	f003 0307 	and.w	r3, r3, #7
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	2b00      	cmp	r3, #0
 8001888:	db0b      	blt.n	80018a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	f003 021f 	and.w	r2, r3, #31
 8001890:	4907      	ldr	r1, [pc, #28]	; (80018b0 <__NVIC_EnableIRQ+0x38>)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	095b      	lsrs	r3, r3, #5
 8001898:	2001      	movs	r0, #1
 800189a:	fa00 f202 	lsl.w	r2, r0, r2
 800189e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000e100 	.word	0xe000e100

080018b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	db0a      	blt.n	80018de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	490c      	ldr	r1, [pc, #48]	; (8001900 <__NVIC_SetPriority+0x4c>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	0112      	lsls	r2, r2, #4
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	440b      	add	r3, r1
 80018d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018dc:	e00a      	b.n	80018f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4908      	ldr	r1, [pc, #32]	; (8001904 <__NVIC_SetPriority+0x50>)
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	3b04      	subs	r3, #4
 80018ec:	0112      	lsls	r2, r2, #4
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	440b      	add	r3, r1
 80018f2:	761a      	strb	r2, [r3, #24]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000e100 	.word	0xe000e100
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	; 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f1c3 0307 	rsb	r3, r3, #7
 8001922:	2b04      	cmp	r3, #4
 8001924:	bf28      	it	cs
 8001926:	2304      	movcs	r3, #4
 8001928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3304      	adds	r3, #4
 800192e:	2b06      	cmp	r3, #6
 8001930:	d902      	bls.n	8001938 <NVIC_EncodePriority+0x30>
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3b03      	subs	r3, #3
 8001936:	e000      	b.n	800193a <NVIC_EncodePriority+0x32>
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43da      	mvns	r2, r3
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	401a      	ands	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001950:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	43d9      	mvns	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	4313      	orrs	r3, r2
         );
}
 8001962:	4618      	mov	r0, r3
 8001964:	3724      	adds	r7, #36	; 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001980:	d301      	bcc.n	8001986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001982:	2301      	movs	r3, #1
 8001984:	e00f      	b.n	80019a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001986:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <SysTick_Config+0x40>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198e:	210f      	movs	r1, #15
 8001990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001994:	f7ff ff8e 	bl	80018b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <SysTick_Config+0x40>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199e:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <SysTick_Config+0x40>)
 80019a0:	2207      	movs	r2, #7
 80019a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	e000e010 	.word	0xe000e010

080019b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ff29 	bl	8001814 <__NVIC_SetPriorityGrouping>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b086      	sub	sp, #24
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
 80019d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019dc:	f7ff ff3e 	bl	800185c <__NVIC_GetPriorityGrouping>
 80019e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	6978      	ldr	r0, [r7, #20]
 80019e8:	f7ff ff8e 	bl	8001908 <NVIC_EncodePriority>
 80019ec:	4602      	mov	r2, r0
 80019ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff5d 	bl	80018b4 <__NVIC_SetPriority>
}
 80019fa:	bf00      	nop
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	4603      	mov	r3, r0
 8001a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff31 	bl	8001878 <__NVIC_EnableIRQ>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ffa2 	bl	8001970 <SysTick_Config>
 8001a2c:	4603      	mov	r3, r0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a44:	f7ff feb6 	bl	80017b4 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e099      	b.n	8001b88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2202      	movs	r2, #2
 8001a58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0201 	bic.w	r2, r2, #1
 8001a72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a74:	e00f      	b.n	8001a96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a76:	f7ff fe9d 	bl	80017b4 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b05      	cmp	r3, #5
 8001a82:	d908      	bls.n	8001a96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2220      	movs	r2, #32
 8001a88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e078      	b.n	8001b88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1e8      	bne.n	8001a76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	4b38      	ldr	r3, [pc, #224]	; (8001b90 <HAL_DMA_Init+0x158>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ac2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ace:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ada:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	2b04      	cmp	r3, #4
 8001aee:	d107      	bne.n	8001b00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af8:	4313      	orrs	r3, r2
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f023 0307 	bic.w	r3, r3, #7
 8001b16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	d117      	bne.n	8001b5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00e      	beq.n	8001b5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 fadf 	bl	8002100 <DMA_CheckFifoParam>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d008      	beq.n	8001b5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2240      	movs	r2, #64	; 0x40
 8001b4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b56:	2301      	movs	r3, #1
 8001b58:	e016      	b.n	8001b88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 fa96 	bl	8002094 <DMA_CalcBaseAndBitshift>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b70:	223f      	movs	r2, #63	; 0x3f
 8001b72:	409a      	lsls	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	f010803f 	.word	0xf010803f

08001b94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
 8001ba0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001baa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d101      	bne.n	8001bba <HAL_DMA_Start_IT+0x26>
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	e040      	b.n	8001c3c <HAL_DMA_Start_IT+0xa8>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d12f      	bne.n	8001c2e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	68b9      	ldr	r1, [r7, #8]
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 fa28 	bl	8002038 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bec:	223f      	movs	r2, #63	; 0x3f
 8001bee:	409a      	lsls	r2, r3
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0216 	orr.w	r2, r2, #22
 8001c02:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d007      	beq.n	8001c1c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0208 	orr.w	r2, r2, #8
 8001c1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	e005      	b.n	8001c3a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c36:	2302      	movs	r3, #2
 8001c38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c50:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c52:	f7ff fdaf 	bl	80017b4 <HAL_GetTick>
 8001c56:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d008      	beq.n	8001c76 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2280      	movs	r2, #128	; 0x80
 8001c68:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e052      	b.n	8001d1c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0216 	bic.w	r2, r2, #22
 8001c84:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	695a      	ldr	r2, [r3, #20]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c94:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d103      	bne.n	8001ca6 <HAL_DMA_Abort+0x62>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d007      	beq.n	8001cb6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0208 	bic.w	r2, r2, #8
 8001cb4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 0201 	bic.w	r2, r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cc6:	e013      	b.n	8001cf0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cc8:	f7ff fd74 	bl	80017b4 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b05      	cmp	r3, #5
 8001cd4:	d90c      	bls.n	8001cf0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2203      	movs	r2, #3
 8001ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e015      	b.n	8001d1c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1e4      	bne.n	8001cc8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d02:	223f      	movs	r2, #63	; 0x3f
 8001d04:	409a      	lsls	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d30:	4b8e      	ldr	r3, [pc, #568]	; (8001f6c <HAL_DMA_IRQHandler+0x248>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a8e      	ldr	r2, [pc, #568]	; (8001f70 <HAL_DMA_IRQHandler+0x24c>)
 8001d36:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3a:	0a9b      	lsrs	r3, r3, #10
 8001d3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4e:	2208      	movs	r2, #8
 8001d50:	409a      	lsls	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4013      	ands	r3, r2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d01a      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d013      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0204 	bic.w	r2, r2, #4
 8001d76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7c:	2208      	movs	r2, #8
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d88:	f043 0201 	orr.w	r2, r3, #1
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d94:	2201      	movs	r2, #1
 8001d96:	409a      	lsls	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d012      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00b      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db2:	2201      	movs	r2, #1
 8001db4:	409a      	lsls	r2, r3
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dbe:	f043 0202 	orr.w	r2, r3, #2
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dca:	2204      	movs	r2, #4
 8001dcc:	409a      	lsls	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d012      	beq.n	8001dfc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00b      	beq.n	8001dfc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de8:	2204      	movs	r2, #4
 8001dea:	409a      	lsls	r2, r3
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df4:	f043 0204 	orr.w	r2, r3, #4
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e00:	2210      	movs	r2, #16
 8001e02:	409a      	lsls	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d043      	beq.n	8001e94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d03c      	beq.n	8001e94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1e:	2210      	movs	r2, #16
 8001e20:	409a      	lsls	r2, r3
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d018      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d108      	bne.n	8001e54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d024      	beq.n	8001e94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	4798      	blx	r3
 8001e52:	e01f      	b.n	8001e94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d01b      	beq.n	8001e94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	4798      	blx	r3
 8001e64:	e016      	b.n	8001e94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d107      	bne.n	8001e84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0208 	bic.w	r2, r2, #8
 8001e82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e98:	2220      	movs	r2, #32
 8001e9a:	409a      	lsls	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 808f 	beq.w	8001fc4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0310 	and.w	r3, r3, #16
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 8087 	beq.w	8001fc4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eba:	2220      	movs	r2, #32
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b05      	cmp	r3, #5
 8001ecc:	d136      	bne.n	8001f3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0216 	bic.w	r2, r2, #22
 8001edc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695a      	ldr	r2, [r3, #20]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d103      	bne.n	8001efe <HAL_DMA_IRQHandler+0x1da>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d007      	beq.n	8001f0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0208 	bic.w	r2, r2, #8
 8001f0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f12:	223f      	movs	r2, #63	; 0x3f
 8001f14:	409a      	lsls	r2, r3
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d07e      	beq.n	8002030 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	4798      	blx	r3
        }
        return;
 8001f3a:	e079      	b.n	8002030 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d01d      	beq.n	8001f86 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d10d      	bne.n	8001f74 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d031      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	4798      	blx	r3
 8001f68:	e02c      	b.n	8001fc4 <HAL_DMA_IRQHandler+0x2a0>
 8001f6a:	bf00      	nop
 8001f6c:	20000000 	.word	0x20000000
 8001f70:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d023      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	4798      	blx	r3
 8001f84:	e01e      	b.n	8001fc4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10f      	bne.n	8001fb4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0210 	bic.w	r2, r2, #16
 8001fa2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d032      	beq.n	8002032 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d022      	beq.n	800201e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2205      	movs	r2, #5
 8001fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0201 	bic.w	r2, r2, #1
 8001fee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d307      	bcc.n	800200c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f2      	bne.n	8001ff0 <HAL_DMA_IRQHandler+0x2cc>
 800200a:	e000      	b.n	800200e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800200c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002022:	2b00      	cmp	r3, #0
 8002024:	d005      	beq.n	8002032 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	4798      	blx	r3
 800202e:	e000      	b.n	8002032 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002030:	bf00      	nop
    }
  }
}
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
 8002044:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002054:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	2b40      	cmp	r3, #64	; 0x40
 8002064:	d108      	bne.n	8002078 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002076:	e007      	b.n	8002088 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	60da      	str	r2, [r3, #12]
}
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	3b10      	subs	r3, #16
 80020a4:	4a14      	ldr	r2, [pc, #80]	; (80020f8 <DMA_CalcBaseAndBitshift+0x64>)
 80020a6:	fba2 2303 	umull	r2, r3, r2, r3
 80020aa:	091b      	lsrs	r3, r3, #4
 80020ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020ae:	4a13      	ldr	r2, [pc, #76]	; (80020fc <DMA_CalcBaseAndBitshift+0x68>)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4413      	add	r3, r2
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2b03      	cmp	r3, #3
 80020c0:	d909      	bls.n	80020d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020ca:	f023 0303 	bic.w	r3, r3, #3
 80020ce:	1d1a      	adds	r2, r3, #4
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	659a      	str	r2, [r3, #88]	; 0x58
 80020d4:	e007      	b.n	80020e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020de:	f023 0303 	bic.w	r3, r3, #3
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	aaaaaaab 	.word	0xaaaaaaab
 80020fc:	0800dcc8 	.word	0x0800dcc8

08002100 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002110:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d11f      	bne.n	800215a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2b03      	cmp	r3, #3
 800211e:	d856      	bhi.n	80021ce <DMA_CheckFifoParam+0xce>
 8002120:	a201      	add	r2, pc, #4	; (adr r2, 8002128 <DMA_CheckFifoParam+0x28>)
 8002122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002126:	bf00      	nop
 8002128:	08002139 	.word	0x08002139
 800212c:	0800214b 	.word	0x0800214b
 8002130:	08002139 	.word	0x08002139
 8002134:	080021cf 	.word	0x080021cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d046      	beq.n	80021d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002148:	e043      	b.n	80021d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002152:	d140      	bne.n	80021d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002158:	e03d      	b.n	80021d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002162:	d121      	bne.n	80021a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2b03      	cmp	r3, #3
 8002168:	d837      	bhi.n	80021da <DMA_CheckFifoParam+0xda>
 800216a:	a201      	add	r2, pc, #4	; (adr r2, 8002170 <DMA_CheckFifoParam+0x70>)
 800216c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002170:	08002181 	.word	0x08002181
 8002174:	08002187 	.word	0x08002187
 8002178:	08002181 	.word	0x08002181
 800217c:	08002199 	.word	0x08002199
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
      break;
 8002184:	e030      	b.n	80021e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d025      	beq.n	80021de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002196:	e022      	b.n	80021de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021a0:	d11f      	bne.n	80021e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021a6:	e01c      	b.n	80021e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d903      	bls.n	80021b6 <DMA_CheckFifoParam+0xb6>
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d003      	beq.n	80021bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021b4:	e018      	b.n	80021e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	73fb      	strb	r3, [r7, #15]
      break;
 80021ba:	e015      	b.n	80021e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00e      	beq.n	80021e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
      break;
 80021cc:	e00b      	b.n	80021e6 <DMA_CheckFifoParam+0xe6>
      break;
 80021ce:	bf00      	nop
 80021d0:	e00a      	b.n	80021e8 <DMA_CheckFifoParam+0xe8>
      break;
 80021d2:	bf00      	nop
 80021d4:	e008      	b.n	80021e8 <DMA_CheckFifoParam+0xe8>
      break;
 80021d6:	bf00      	nop
 80021d8:	e006      	b.n	80021e8 <DMA_CheckFifoParam+0xe8>
      break;
 80021da:	bf00      	nop
 80021dc:	e004      	b.n	80021e8 <DMA_CheckFifoParam+0xe8>
      break;
 80021de:	bf00      	nop
 80021e0:	e002      	b.n	80021e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80021e2:	bf00      	nop
 80021e4:	e000      	b.n	80021e8 <DMA_CheckFifoParam+0xe8>
      break;
 80021e6:	bf00      	nop
    }
  } 
  
  return status; 
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop

080021f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b089      	sub	sp, #36	; 0x24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800220a:	2300      	movs	r3, #0
 800220c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
 8002212:	e16b      	b.n	80024ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002214:	2201      	movs	r2, #1
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	4013      	ands	r3, r2
 8002226:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	429a      	cmp	r2, r3
 800222e:	f040 815a 	bne.w	80024e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	2b01      	cmp	r3, #1
 800223c:	d005      	beq.n	800224a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002246:	2b02      	cmp	r3, #2
 8002248:	d130      	bne.n	80022ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	2203      	movs	r2, #3
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43db      	mvns	r3, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4013      	ands	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002280:	2201      	movs	r2, #1
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	091b      	lsrs	r3, r3, #4
 8002296:	f003 0201 	and.w	r2, r3, #1
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	d017      	beq.n	80022e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	2203      	movs	r2, #3
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d123      	bne.n	800233c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	08da      	lsrs	r2, r3, #3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3208      	adds	r2, #8
 80022fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002300:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	220f      	movs	r2, #15
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	691a      	ldr	r2, [r3, #16]
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	08da      	lsrs	r2, r3, #3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3208      	adds	r2, #8
 8002336:	69b9      	ldr	r1, [r7, #24]
 8002338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	2203      	movs	r2, #3
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 0203 	and.w	r2, r3, #3
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 80b4 	beq.w	80024e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	4b60      	ldr	r3, [pc, #384]	; (8002504 <HAL_GPIO_Init+0x30c>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002386:	4a5f      	ldr	r2, [pc, #380]	; (8002504 <HAL_GPIO_Init+0x30c>)
 8002388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800238c:	6453      	str	r3, [r2, #68]	; 0x44
 800238e:	4b5d      	ldr	r3, [pc, #372]	; (8002504 <HAL_GPIO_Init+0x30c>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800239a:	4a5b      	ldr	r2, [pc, #364]	; (8002508 <HAL_GPIO_Init+0x310>)
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	089b      	lsrs	r3, r3, #2
 80023a0:	3302      	adds	r3, #2
 80023a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	220f      	movs	r2, #15
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a52      	ldr	r2, [pc, #328]	; (800250c <HAL_GPIO_Init+0x314>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d02b      	beq.n	800241e <HAL_GPIO_Init+0x226>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a51      	ldr	r2, [pc, #324]	; (8002510 <HAL_GPIO_Init+0x318>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d025      	beq.n	800241a <HAL_GPIO_Init+0x222>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a50      	ldr	r2, [pc, #320]	; (8002514 <HAL_GPIO_Init+0x31c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d01f      	beq.n	8002416 <HAL_GPIO_Init+0x21e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4f      	ldr	r2, [pc, #316]	; (8002518 <HAL_GPIO_Init+0x320>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d019      	beq.n	8002412 <HAL_GPIO_Init+0x21a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4e      	ldr	r2, [pc, #312]	; (800251c <HAL_GPIO_Init+0x324>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d013      	beq.n	800240e <HAL_GPIO_Init+0x216>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4d      	ldr	r2, [pc, #308]	; (8002520 <HAL_GPIO_Init+0x328>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d00d      	beq.n	800240a <HAL_GPIO_Init+0x212>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4c      	ldr	r2, [pc, #304]	; (8002524 <HAL_GPIO_Init+0x32c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d007      	beq.n	8002406 <HAL_GPIO_Init+0x20e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a4b      	ldr	r2, [pc, #300]	; (8002528 <HAL_GPIO_Init+0x330>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d101      	bne.n	8002402 <HAL_GPIO_Init+0x20a>
 80023fe:	2307      	movs	r3, #7
 8002400:	e00e      	b.n	8002420 <HAL_GPIO_Init+0x228>
 8002402:	2308      	movs	r3, #8
 8002404:	e00c      	b.n	8002420 <HAL_GPIO_Init+0x228>
 8002406:	2306      	movs	r3, #6
 8002408:	e00a      	b.n	8002420 <HAL_GPIO_Init+0x228>
 800240a:	2305      	movs	r3, #5
 800240c:	e008      	b.n	8002420 <HAL_GPIO_Init+0x228>
 800240e:	2304      	movs	r3, #4
 8002410:	e006      	b.n	8002420 <HAL_GPIO_Init+0x228>
 8002412:	2303      	movs	r3, #3
 8002414:	e004      	b.n	8002420 <HAL_GPIO_Init+0x228>
 8002416:	2302      	movs	r3, #2
 8002418:	e002      	b.n	8002420 <HAL_GPIO_Init+0x228>
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <HAL_GPIO_Init+0x228>
 800241e:	2300      	movs	r3, #0
 8002420:	69fa      	ldr	r2, [r7, #28]
 8002422:	f002 0203 	and.w	r2, r2, #3
 8002426:	0092      	lsls	r2, r2, #2
 8002428:	4093      	lsls	r3, r2
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002430:	4935      	ldr	r1, [pc, #212]	; (8002508 <HAL_GPIO_Init+0x310>)
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	089b      	lsrs	r3, r3, #2
 8002436:	3302      	adds	r3, #2
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800243e:	4b3b      	ldr	r3, [pc, #236]	; (800252c <HAL_GPIO_Init+0x334>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002462:	4a32      	ldr	r2, [pc, #200]	; (800252c <HAL_GPIO_Init+0x334>)
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002468:	4b30      	ldr	r3, [pc, #192]	; (800252c <HAL_GPIO_Init+0x334>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800248c:	4a27      	ldr	r2, [pc, #156]	; (800252c <HAL_GPIO_Init+0x334>)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002492:	4b26      	ldr	r3, [pc, #152]	; (800252c <HAL_GPIO_Init+0x334>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	43db      	mvns	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4013      	ands	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024b6:	4a1d      	ldr	r2, [pc, #116]	; (800252c <HAL_GPIO_Init+0x334>)
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024bc:	4b1b      	ldr	r3, [pc, #108]	; (800252c <HAL_GPIO_Init+0x334>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024e0:	4a12      	ldr	r2, [pc, #72]	; (800252c <HAL_GPIO_Init+0x334>)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	3301      	adds	r3, #1
 80024ea:	61fb      	str	r3, [r7, #28]
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	2b0f      	cmp	r3, #15
 80024f0:	f67f ae90 	bls.w	8002214 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop
 80024f8:	3724      	adds	r7, #36	; 0x24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800
 8002508:	40013800 	.word	0x40013800
 800250c:	40020000 	.word	0x40020000
 8002510:	40020400 	.word	0x40020400
 8002514:	40020800 	.word	0x40020800
 8002518:	40020c00 	.word	0x40020c00
 800251c:	40021000 	.word	0x40021000
 8002520:	40021400 	.word	0x40021400
 8002524:	40021800 	.word	0x40021800
 8002528:	40021c00 	.word	0x40021c00
 800252c:	40013c00 	.word	0x40013c00

08002530 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	887b      	ldrh	r3, [r7, #2]
 8002542:	4013      	ands	r3, r2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d002      	beq.n	800254e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002548:	2301      	movs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
 800254c:	e001      	b.n	8002552 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800254e:	2300      	movs	r3, #0
 8002550:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002552:	7bfb      	ldrb	r3, [r7, #15]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	807b      	strh	r3, [r7, #2]
 800256c:	4613      	mov	r3, r2
 800256e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002570:	787b      	ldrb	r3, [r7, #1]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002576:	887a      	ldrh	r2, [r7, #2]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800257c:	e003      	b.n	8002586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800257e:	887b      	ldrh	r3, [r7, #2]
 8002580:	041a      	lsls	r2, r3, #16
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	619a      	str	r2, [r3, #24]
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002592:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002594:	b08f      	sub	sp, #60	; 0x3c
 8002596:	af0a      	add	r7, sp, #40	; 0x28
 8002598:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e054      	b.n	800264e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d106      	bne.n	80025c4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f00a ff06 	bl	800d3d0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2203      	movs	r2, #3
 80025c8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d102      	bne.n	80025de <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f004 fa74 	bl	8006ad0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	603b      	str	r3, [r7, #0]
 80025ee:	687e      	ldr	r6, [r7, #4]
 80025f0:	466d      	mov	r5, sp
 80025f2:	f106 0410 	add.w	r4, r6, #16
 80025f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002602:	e885 0003 	stmia.w	r5, {r0, r1}
 8002606:	1d33      	adds	r3, r6, #4
 8002608:	cb0e      	ldmia	r3, {r1, r2, r3}
 800260a:	6838      	ldr	r0, [r7, #0]
 800260c:	f004 f9ee 	bl	80069ec <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2101      	movs	r1, #1
 8002616:	4618      	mov	r0, r3
 8002618:	f004 fa6b 	bl	8006af2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	603b      	str	r3, [r7, #0]
 8002622:	687e      	ldr	r6, [r7, #4]
 8002624:	466d      	mov	r5, sp
 8002626:	f106 0410 	add.w	r4, r6, #16
 800262a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800262c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800262e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002632:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002636:	e885 0003 	stmia.w	r5, {r0, r1}
 800263a:	1d33      	adds	r3, r6, #4
 800263c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800263e:	6838      	ldr	r0, [r7, #0]
 8002640:	f004 fbf4 	bl	8006e2c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002656 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002656:	b590      	push	{r4, r7, lr}
 8002658:	b089      	sub	sp, #36	; 0x24
 800265a:	af04      	add	r7, sp, #16
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	4608      	mov	r0, r1
 8002660:	4611      	mov	r1, r2
 8002662:	461a      	mov	r2, r3
 8002664:	4603      	mov	r3, r0
 8002666:	70fb      	strb	r3, [r7, #3]
 8002668:	460b      	mov	r3, r1
 800266a:	70bb      	strb	r3, [r7, #2]
 800266c:	4613      	mov	r3, r2
 800266e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002676:	2b01      	cmp	r3, #1
 8002678:	d101      	bne.n	800267e <HAL_HCD_HC_Init+0x28>
 800267a:	2302      	movs	r3, #2
 800267c:	e076      	b.n	800276c <HAL_HCD_HC_Init+0x116>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002686:	78fb      	ldrb	r3, [r7, #3]
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	212c      	movs	r1, #44	; 0x2c
 800268c:	fb01 f303 	mul.w	r3, r1, r3
 8002690:	4413      	add	r3, r2
 8002692:	333d      	adds	r3, #61	; 0x3d
 8002694:	2200      	movs	r2, #0
 8002696:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002698:	78fb      	ldrb	r3, [r7, #3]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	212c      	movs	r1, #44	; 0x2c
 800269e:	fb01 f303 	mul.w	r3, r1, r3
 80026a2:	4413      	add	r3, r2
 80026a4:	3338      	adds	r3, #56	; 0x38
 80026a6:	787a      	ldrb	r2, [r7, #1]
 80026a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80026aa:	78fb      	ldrb	r3, [r7, #3]
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	212c      	movs	r1, #44	; 0x2c
 80026b0:	fb01 f303 	mul.w	r3, r1, r3
 80026b4:	4413      	add	r3, r2
 80026b6:	3340      	adds	r3, #64	; 0x40
 80026b8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80026ba:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	212c      	movs	r1, #44	; 0x2c
 80026c2:	fb01 f303 	mul.w	r3, r1, r3
 80026c6:	4413      	add	r3, r2
 80026c8:	3339      	adds	r3, #57	; 0x39
 80026ca:	78fa      	ldrb	r2, [r7, #3]
 80026cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80026ce:	78fb      	ldrb	r3, [r7, #3]
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	212c      	movs	r1, #44	; 0x2c
 80026d4:	fb01 f303 	mul.w	r3, r1, r3
 80026d8:	4413      	add	r3, r2
 80026da:	333f      	adds	r3, #63	; 0x3f
 80026dc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80026e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80026e2:	78fb      	ldrb	r3, [r7, #3]
 80026e4:	78ba      	ldrb	r2, [r7, #2]
 80026e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026ea:	b2d0      	uxtb	r0, r2
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	212c      	movs	r1, #44	; 0x2c
 80026f0:	fb01 f303 	mul.w	r3, r1, r3
 80026f4:	4413      	add	r3, r2
 80026f6:	333a      	adds	r3, #58	; 0x3a
 80026f8:	4602      	mov	r2, r0
 80026fa:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80026fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002700:	2b00      	cmp	r3, #0
 8002702:	da09      	bge.n	8002718 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002704:	78fb      	ldrb	r3, [r7, #3]
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	212c      	movs	r1, #44	; 0x2c
 800270a:	fb01 f303 	mul.w	r3, r1, r3
 800270e:	4413      	add	r3, r2
 8002710:	333b      	adds	r3, #59	; 0x3b
 8002712:	2201      	movs	r2, #1
 8002714:	701a      	strb	r2, [r3, #0]
 8002716:	e008      	b.n	800272a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	212c      	movs	r1, #44	; 0x2c
 800271e:	fb01 f303 	mul.w	r3, r1, r3
 8002722:	4413      	add	r3, r2
 8002724:	333b      	adds	r3, #59	; 0x3b
 8002726:	2200      	movs	r2, #0
 8002728:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800272a:	78fb      	ldrb	r3, [r7, #3]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	212c      	movs	r1, #44	; 0x2c
 8002730:	fb01 f303 	mul.w	r3, r1, r3
 8002734:	4413      	add	r3, r2
 8002736:	333c      	adds	r3, #60	; 0x3c
 8002738:	f897 2020 	ldrb.w	r2, [r7, #32]
 800273c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	787c      	ldrb	r4, [r7, #1]
 8002744:	78ba      	ldrb	r2, [r7, #2]
 8002746:	78f9      	ldrb	r1, [r7, #3]
 8002748:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800274a:	9302      	str	r3, [sp, #8]
 800274c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002750:	9301      	str	r3, [sp, #4]
 8002752:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	4623      	mov	r3, r4
 800275a:	f004 fced 	bl	8007138 <USB_HC_Init>
 800275e:	4603      	mov	r3, r0
 8002760:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800276a:	7bfb      	ldrb	r3, [r7, #15]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	bd90      	pop	{r4, r7, pc}

08002774 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002780:	2300      	movs	r3, #0
 8002782:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800278a:	2b01      	cmp	r3, #1
 800278c:	d101      	bne.n	8002792 <HAL_HCD_HC_Halt+0x1e>
 800278e:	2302      	movs	r3, #2
 8002790:	e00f      	b.n	80027b2 <HAL_HCD_HC_Halt+0x3e>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	78fa      	ldrb	r2, [r7, #3]
 80027a0:	4611      	mov	r1, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f004 ff3d 	bl	8007622 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	4608      	mov	r0, r1
 80027c6:	4611      	mov	r1, r2
 80027c8:	461a      	mov	r2, r3
 80027ca:	4603      	mov	r3, r0
 80027cc:	70fb      	strb	r3, [r7, #3]
 80027ce:	460b      	mov	r3, r1
 80027d0:	70bb      	strb	r3, [r7, #2]
 80027d2:	4613      	mov	r3, r2
 80027d4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80027d6:	78fb      	ldrb	r3, [r7, #3]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	212c      	movs	r1, #44	; 0x2c
 80027dc:	fb01 f303 	mul.w	r3, r1, r3
 80027e0:	4413      	add	r3, r2
 80027e2:	333b      	adds	r3, #59	; 0x3b
 80027e4:	78ba      	ldrb	r2, [r7, #2]
 80027e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80027e8:	78fb      	ldrb	r3, [r7, #3]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	212c      	movs	r1, #44	; 0x2c
 80027ee:	fb01 f303 	mul.w	r3, r1, r3
 80027f2:	4413      	add	r3, r2
 80027f4:	333f      	adds	r3, #63	; 0x3f
 80027f6:	787a      	ldrb	r2, [r7, #1]
 80027f8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80027fa:	7c3b      	ldrb	r3, [r7, #16]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d112      	bne.n	8002826 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002800:	78fb      	ldrb	r3, [r7, #3]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	212c      	movs	r1, #44	; 0x2c
 8002806:	fb01 f303 	mul.w	r3, r1, r3
 800280a:	4413      	add	r3, r2
 800280c:	3342      	adds	r3, #66	; 0x42
 800280e:	2203      	movs	r2, #3
 8002810:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002812:	78fb      	ldrb	r3, [r7, #3]
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	212c      	movs	r1, #44	; 0x2c
 8002818:	fb01 f303 	mul.w	r3, r1, r3
 800281c:	4413      	add	r3, r2
 800281e:	333d      	adds	r3, #61	; 0x3d
 8002820:	7f3a      	ldrb	r2, [r7, #28]
 8002822:	701a      	strb	r2, [r3, #0]
 8002824:	e008      	b.n	8002838 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002826:	78fb      	ldrb	r3, [r7, #3]
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	212c      	movs	r1, #44	; 0x2c
 800282c:	fb01 f303 	mul.w	r3, r1, r3
 8002830:	4413      	add	r3, r2
 8002832:	3342      	adds	r3, #66	; 0x42
 8002834:	2202      	movs	r2, #2
 8002836:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002838:	787b      	ldrb	r3, [r7, #1]
 800283a:	2b03      	cmp	r3, #3
 800283c:	f200 80c6 	bhi.w	80029cc <HAL_HCD_HC_SubmitRequest+0x210>
 8002840:	a201      	add	r2, pc, #4	; (adr r2, 8002848 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002846:	bf00      	nop
 8002848:	08002859 	.word	0x08002859
 800284c:	080029b9 	.word	0x080029b9
 8002850:	080028bd 	.word	0x080028bd
 8002854:	0800293b 	.word	0x0800293b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002858:	7c3b      	ldrb	r3, [r7, #16]
 800285a:	2b01      	cmp	r3, #1
 800285c:	f040 80b8 	bne.w	80029d0 <HAL_HCD_HC_SubmitRequest+0x214>
 8002860:	78bb      	ldrb	r3, [r7, #2]
 8002862:	2b00      	cmp	r3, #0
 8002864:	f040 80b4 	bne.w	80029d0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002868:	8b3b      	ldrh	r3, [r7, #24]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d108      	bne.n	8002880 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800286e:	78fb      	ldrb	r3, [r7, #3]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	212c      	movs	r1, #44	; 0x2c
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	4413      	add	r3, r2
 800287a:	3355      	adds	r3, #85	; 0x55
 800287c:	2201      	movs	r2, #1
 800287e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002880:	78fb      	ldrb	r3, [r7, #3]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	212c      	movs	r1, #44	; 0x2c
 8002886:	fb01 f303 	mul.w	r3, r1, r3
 800288a:	4413      	add	r3, r2
 800288c:	3355      	adds	r3, #85	; 0x55
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d109      	bne.n	80028a8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002894:	78fb      	ldrb	r3, [r7, #3]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	212c      	movs	r1, #44	; 0x2c
 800289a:	fb01 f303 	mul.w	r3, r1, r3
 800289e:	4413      	add	r3, r2
 80028a0:	3342      	adds	r3, #66	; 0x42
 80028a2:	2200      	movs	r2, #0
 80028a4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80028a6:	e093      	b.n	80029d0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028a8:	78fb      	ldrb	r3, [r7, #3]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	212c      	movs	r1, #44	; 0x2c
 80028ae:	fb01 f303 	mul.w	r3, r1, r3
 80028b2:	4413      	add	r3, r2
 80028b4:	3342      	adds	r3, #66	; 0x42
 80028b6:	2202      	movs	r2, #2
 80028b8:	701a      	strb	r2, [r3, #0]
      break;
 80028ba:	e089      	b.n	80029d0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80028bc:	78bb      	ldrb	r3, [r7, #2]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d11d      	bne.n	80028fe <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80028c2:	78fb      	ldrb	r3, [r7, #3]
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	212c      	movs	r1, #44	; 0x2c
 80028c8:	fb01 f303 	mul.w	r3, r1, r3
 80028cc:	4413      	add	r3, r2
 80028ce:	3355      	adds	r3, #85	; 0x55
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d109      	bne.n	80028ea <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028d6:	78fb      	ldrb	r3, [r7, #3]
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	212c      	movs	r1, #44	; 0x2c
 80028dc:	fb01 f303 	mul.w	r3, r1, r3
 80028e0:	4413      	add	r3, r2
 80028e2:	3342      	adds	r3, #66	; 0x42
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80028e8:	e073      	b.n	80029d2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028ea:	78fb      	ldrb	r3, [r7, #3]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	212c      	movs	r1, #44	; 0x2c
 80028f0:	fb01 f303 	mul.w	r3, r1, r3
 80028f4:	4413      	add	r3, r2
 80028f6:	3342      	adds	r3, #66	; 0x42
 80028f8:	2202      	movs	r2, #2
 80028fa:	701a      	strb	r2, [r3, #0]
      break;
 80028fc:	e069      	b.n	80029d2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80028fe:	78fb      	ldrb	r3, [r7, #3]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	212c      	movs	r1, #44	; 0x2c
 8002904:	fb01 f303 	mul.w	r3, r1, r3
 8002908:	4413      	add	r3, r2
 800290a:	3354      	adds	r3, #84	; 0x54
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d109      	bne.n	8002926 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002912:	78fb      	ldrb	r3, [r7, #3]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	212c      	movs	r1, #44	; 0x2c
 8002918:	fb01 f303 	mul.w	r3, r1, r3
 800291c:	4413      	add	r3, r2
 800291e:	3342      	adds	r3, #66	; 0x42
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]
      break;
 8002924:	e055      	b.n	80029d2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002926:	78fb      	ldrb	r3, [r7, #3]
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	212c      	movs	r1, #44	; 0x2c
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	4413      	add	r3, r2
 8002932:	3342      	adds	r3, #66	; 0x42
 8002934:	2202      	movs	r2, #2
 8002936:	701a      	strb	r2, [r3, #0]
      break;
 8002938:	e04b      	b.n	80029d2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800293a:	78bb      	ldrb	r3, [r7, #2]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d11d      	bne.n	800297c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002940:	78fb      	ldrb	r3, [r7, #3]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	212c      	movs	r1, #44	; 0x2c
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	4413      	add	r3, r2
 800294c:	3355      	adds	r3, #85	; 0x55
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d109      	bne.n	8002968 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002954:	78fb      	ldrb	r3, [r7, #3]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	212c      	movs	r1, #44	; 0x2c
 800295a:	fb01 f303 	mul.w	r3, r1, r3
 800295e:	4413      	add	r3, r2
 8002960:	3342      	adds	r3, #66	; 0x42
 8002962:	2200      	movs	r2, #0
 8002964:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002966:	e034      	b.n	80029d2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002968:	78fb      	ldrb	r3, [r7, #3]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	212c      	movs	r1, #44	; 0x2c
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	4413      	add	r3, r2
 8002974:	3342      	adds	r3, #66	; 0x42
 8002976:	2202      	movs	r2, #2
 8002978:	701a      	strb	r2, [r3, #0]
      break;
 800297a:	e02a      	b.n	80029d2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800297c:	78fb      	ldrb	r3, [r7, #3]
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	212c      	movs	r1, #44	; 0x2c
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	4413      	add	r3, r2
 8002988:	3354      	adds	r3, #84	; 0x54
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d109      	bne.n	80029a4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002990:	78fb      	ldrb	r3, [r7, #3]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	212c      	movs	r1, #44	; 0x2c
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	4413      	add	r3, r2
 800299c:	3342      	adds	r3, #66	; 0x42
 800299e:	2200      	movs	r2, #0
 80029a0:	701a      	strb	r2, [r3, #0]
      break;
 80029a2:	e016      	b.n	80029d2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029a4:	78fb      	ldrb	r3, [r7, #3]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	212c      	movs	r1, #44	; 0x2c
 80029aa:	fb01 f303 	mul.w	r3, r1, r3
 80029ae:	4413      	add	r3, r2
 80029b0:	3342      	adds	r3, #66	; 0x42
 80029b2:	2202      	movs	r2, #2
 80029b4:	701a      	strb	r2, [r3, #0]
      break;
 80029b6:	e00c      	b.n	80029d2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029b8:	78fb      	ldrb	r3, [r7, #3]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	212c      	movs	r1, #44	; 0x2c
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	3342      	adds	r3, #66	; 0x42
 80029c6:	2200      	movs	r2, #0
 80029c8:	701a      	strb	r2, [r3, #0]
      break;
 80029ca:	e002      	b.n	80029d2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80029cc:	bf00      	nop
 80029ce:	e000      	b.n	80029d2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80029d0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80029d2:	78fb      	ldrb	r3, [r7, #3]
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	212c      	movs	r1, #44	; 0x2c
 80029d8:	fb01 f303 	mul.w	r3, r1, r3
 80029dc:	4413      	add	r3, r2
 80029de:	3344      	adds	r3, #68	; 0x44
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80029e4:	78fb      	ldrb	r3, [r7, #3]
 80029e6:	8b3a      	ldrh	r2, [r7, #24]
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	202c      	movs	r0, #44	; 0x2c
 80029ec:	fb00 f303 	mul.w	r3, r0, r3
 80029f0:	440b      	add	r3, r1
 80029f2:	334c      	adds	r3, #76	; 0x4c
 80029f4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80029f6:	78fb      	ldrb	r3, [r7, #3]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	212c      	movs	r1, #44	; 0x2c
 80029fc:	fb01 f303 	mul.w	r3, r1, r3
 8002a00:	4413      	add	r3, r2
 8002a02:	3360      	adds	r3, #96	; 0x60
 8002a04:	2200      	movs	r2, #0
 8002a06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002a08:	78fb      	ldrb	r3, [r7, #3]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	3350      	adds	r3, #80	; 0x50
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002a1a:	78fb      	ldrb	r3, [r7, #3]
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	212c      	movs	r1, #44	; 0x2c
 8002a20:	fb01 f303 	mul.w	r3, r1, r3
 8002a24:	4413      	add	r3, r2
 8002a26:	3339      	adds	r3, #57	; 0x39
 8002a28:	78fa      	ldrb	r2, [r7, #3]
 8002a2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	212c      	movs	r1, #44	; 0x2c
 8002a32:	fb01 f303 	mul.w	r3, r1, r3
 8002a36:	4413      	add	r3, r2
 8002a38:	3361      	adds	r3, #97	; 0x61
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	78fb      	ldrb	r3, [r7, #3]
 8002a44:	222c      	movs	r2, #44	; 0x2c
 8002a46:	fb02 f303 	mul.w	r3, r2, r3
 8002a4a:	3338      	adds	r3, #56	; 0x38
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	18d1      	adds	r1, r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	461a      	mov	r2, r3
 8002a58:	f004 fc90 	bl	800737c <USB_HC_StartXfer>
 8002a5c:	4603      	mov	r3, r0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop

08002a68 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f004 f991 	bl	8006da6 <USB_GetMode>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	f040 80f6 	bne.w	8002c78 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f004 f975 	bl	8006d80 <USB_ReadInterrupts>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80ec 	beq.w	8002c76 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f004 f96c 	bl	8006d80 <USB_ReadInterrupts>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ab2:	d104      	bne.n	8002abe <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002abc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f004 f95c 	bl	8006d80 <USB_ReadInterrupts>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ad2:	d104      	bne.n	8002ade <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002adc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f004 f94c 	bl	8006d80 <USB_ReadInterrupts>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002aee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002af2:	d104      	bne.n	8002afe <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002afc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f004 f93c 	bl	8006d80 <USB_ReadInterrupts>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d103      	bne.n	8002b1a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2202      	movs	r2, #2
 8002b18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f004 f92e 	bl	8006d80 <USB_ReadInterrupts>
 8002b24:	4603      	mov	r3, r0
 8002b26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b2e:	d11c      	bne.n	8002b6a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002b38:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10f      	bne.n	8002b6a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002b4a:	2110      	movs	r1, #16
 8002b4c:	6938      	ldr	r0, [r7, #16]
 8002b4e:	f004 f81d 	bl	8006b8c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002b52:	6938      	ldr	r0, [r7, #16]
 8002b54:	f004 f84e 	bl	8006bf4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f004 fa24 	bl	8006fac <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f00a fcb1 	bl	800d4cc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f004 f906 	bl	8006d80 <USB_ReadInterrupts>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b7e:	d102      	bne.n	8002b86 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f001 f89e 	bl	8003cc2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f004 f8f8 	bl	8006d80 <USB_ReadInterrupts>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d106      	bne.n	8002ba8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f00a fc7a 	bl	800d494 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2208      	movs	r2, #8
 8002ba6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f004 f8e7 	bl	8006d80 <USB_ReadInterrupts>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b10      	cmp	r3, #16
 8002bba:	d101      	bne.n	8002bc0 <HAL_HCD_IRQHandler+0x158>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e000      	b.n	8002bc2 <HAL_HCD_IRQHandler+0x15a>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d012      	beq.n	8002bec <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	699a      	ldr	r2, [r3, #24]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0210 	bic.w	r2, r2, #16
 8002bd4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 ffa1 	bl	8003b1e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699a      	ldr	r2, [r3, #24]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0210 	orr.w	r2, r2, #16
 8002bea:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f004 f8c5 	bl	8006d80 <USB_ReadInterrupts>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c00:	d13a      	bne.n	8002c78 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f004 fcfa 	bl	8007600 <USB_HC_ReadInterrupt>
 8002c0c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]
 8002c12:	e025      	b.n	8002c60 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d018      	beq.n	8002c5a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	015a      	lsls	r2, r3, #5
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4413      	add	r3, r2
 8002c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c3e:	d106      	bne.n	8002c4e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	4619      	mov	r1, r3
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f8ab 	bl	8002da2 <HCD_HC_IN_IRQHandler>
 8002c4c:	e005      	b.n	8002c5a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	4619      	mov	r1, r3
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 fbf9 	bl	800344c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	617b      	str	r3, [r7, #20]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d3d4      	bcc.n	8002c14 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c72:	615a      	str	r2, [r3, #20]
 8002c74:	e000      	b.n	8002c78 <HAL_HCD_IRQHandler+0x210>
      return;
 8002c76:	bf00      	nop
    }
  }
}
 8002c78:	3718      	adds	r7, #24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d101      	bne.n	8002c94 <HAL_HCD_Start+0x16>
 8002c90:	2302      	movs	r3, #2
 8002c92:	e013      	b.n	8002cbc <HAL_HCD_Start+0x3e>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f004 f9e6 	bl	8007074 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f003 fefe 	bl	8006aae <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d101      	bne.n	8002cda <HAL_HCD_Stop+0x16>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e00d      	b.n	8002cf6 <HAL_HCD_Stop+0x32>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f004 fdd4 	bl	8007894 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f004 f988 	bl	8007020 <USB_ResetPort>
 8002d10:	4603      	mov	r3, r0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	460b      	mov	r3, r1
 8002d24:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002d26:	78fb      	ldrb	r3, [r7, #3]
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	212c      	movs	r1, #44	; 0x2c
 8002d2c:	fb01 f303 	mul.w	r3, r1, r3
 8002d30:	4413      	add	r3, r2
 8002d32:	3360      	adds	r3, #96	; 0x60
 8002d34:	781b      	ldrb	r3, [r3, #0]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002d4e:	78fb      	ldrb	r3, [r7, #3]
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	212c      	movs	r1, #44	; 0x2c
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	3350      	adds	r3, #80	; 0x50
 8002d5c:	681b      	ldr	r3, [r3, #0]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b082      	sub	sp, #8
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f004 f9cc 	bl	8007114 <USB_GetCurrentFrame>
 8002d7c:	4603      	mov	r3, r0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b082      	sub	sp, #8
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f004 f9a7 	bl	80070e6 <USB_GetHostSpeed>
 8002d98:	4603      	mov	r3, r0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b086      	sub	sp, #24
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	460b      	mov	r3, r1
 8002dac:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002db8:	78fb      	ldrb	r3, [r7, #3]
 8002dba:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d11a      	bne.n	8002e08 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	015a      	lsls	r2, r3, #5
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	4413      	add	r3, r2
 8002dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dde:	461a      	mov	r2, r3
 8002de0:	2304      	movs	r3, #4
 8002de2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	212c      	movs	r1, #44	; 0x2c
 8002dea:	fb01 f303 	mul.w	r3, r1, r3
 8002dee:	4413      	add	r3, r2
 8002df0:	3361      	adds	r3, #97	; 0x61
 8002df2:	2206      	movs	r2, #6
 8002df4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f004 fc0e 	bl	8007622 <USB_HC_Halt>
 8002e06:	e0af      	b.n	8002f68 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e1e:	d11b      	bne.n	8002e58 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e32:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	212c      	movs	r1, #44	; 0x2c
 8002e3a:	fb01 f303 	mul.w	r3, r1, r3
 8002e3e:	4413      	add	r3, r2
 8002e40:	3361      	adds	r3, #97	; 0x61
 8002e42:	2207      	movs	r2, #7
 8002e44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	4611      	mov	r1, r2
 8002e50:	4618      	mov	r0, r3
 8002e52:	f004 fbe6 	bl	8007622 <USB_HC_Halt>
 8002e56:	e087      	b.n	8002f68 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	015a      	lsls	r2, r3, #5
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	4413      	add	r3, r2
 8002e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	2b20      	cmp	r3, #32
 8002e6c:	d109      	bne.n	8002e82 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	2320      	movs	r3, #32
 8002e7e:	6093      	str	r3, [r2, #8]
 8002e80:	e072      	b.n	8002f68 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	015a      	lsls	r2, r3, #5
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	4413      	add	r3, r2
 8002e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d11a      	bne.n	8002ece <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	015a      	lsls	r2, r3, #5
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	2308      	movs	r3, #8
 8002ea8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	212c      	movs	r1, #44	; 0x2c
 8002eb0:	fb01 f303 	mul.w	r3, r1, r3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3361      	adds	r3, #97	; 0x61
 8002eb8:	2205      	movs	r2, #5
 8002eba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f004 fbab 	bl	8007622 <USB_HC_Halt>
 8002ecc:	e04c      	b.n	8002f68 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	015a      	lsls	r2, r3, #5
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee4:	d11b      	bne.n	8002f1e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ef8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	212c      	movs	r1, #44	; 0x2c
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	4413      	add	r3, r2
 8002f06:	3361      	adds	r3, #97	; 0x61
 8002f08:	2208      	movs	r2, #8
 8002f0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	4611      	mov	r1, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f004 fb83 	bl	8007622 <USB_HC_Halt>
 8002f1c:	e024      	b.n	8002f68 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	015a      	lsls	r2, r3, #5
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	4413      	add	r3, r2
 8002f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f30:	2b80      	cmp	r3, #128	; 0x80
 8002f32:	d119      	bne.n	8002f68 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f40:	461a      	mov	r2, r3
 8002f42:	2380      	movs	r3, #128	; 0x80
 8002f44:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	212c      	movs	r1, #44	; 0x2c
 8002f4c:	fb01 f303 	mul.w	r3, r1, r3
 8002f50:	4413      	add	r3, r2
 8002f52:	3361      	adds	r3, #97	; 0x61
 8002f54:	2206      	movs	r2, #6
 8002f56:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	4611      	mov	r1, r2
 8002f62:	4618      	mov	r0, r3
 8002f64:	f004 fb5d 	bl	8007622 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f7e:	d112      	bne.n	8002fa6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	4611      	mov	r1, r2
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f004 fb49 	bl	8007622 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	015a      	lsls	r2, r3, #5
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4413      	add	r3, r2
 8002f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fa2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002fa4:	e24e      	b.n	8003444 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	015a      	lsls	r2, r3, #5
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4413      	add	r3, r2
 8002fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	f040 80df 	bne.w	800317c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d019      	beq.n	8002ffa <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	212c      	movs	r1, #44	; 0x2c
 8002fcc:	fb01 f303 	mul.w	r3, r1, r3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	3348      	adds	r3, #72	; 0x48
 8002fd4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	0159      	lsls	r1, r3, #5
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	440b      	add	r3, r1
 8002fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002fe8:	1ad2      	subs	r2, r2, r3
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	202c      	movs	r0, #44	; 0x2c
 8002ff0:	fb00 f303 	mul.w	r3, r0, r3
 8002ff4:	440b      	add	r3, r1
 8002ff6:	3350      	adds	r3, #80	; 0x50
 8002ff8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	212c      	movs	r1, #44	; 0x2c
 8003000:	fb01 f303 	mul.w	r3, r1, r3
 8003004:	4413      	add	r3, r2
 8003006:	3361      	adds	r3, #97	; 0x61
 8003008:	2201      	movs	r2, #1
 800300a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	212c      	movs	r1, #44	; 0x2c
 8003012:	fb01 f303 	mul.w	r3, r1, r3
 8003016:	4413      	add	r3, r2
 8003018:	335c      	adds	r3, #92	; 0x5c
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4413      	add	r3, r2
 8003026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302a:	461a      	mov	r2, r3
 800302c:	2301      	movs	r3, #1
 800302e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	212c      	movs	r1, #44	; 0x2c
 8003036:	fb01 f303 	mul.w	r3, r1, r3
 800303a:	4413      	add	r3, r2
 800303c:	333f      	adds	r3, #63	; 0x3f
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d009      	beq.n	8003058 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	212c      	movs	r1, #44	; 0x2c
 800304a:	fb01 f303 	mul.w	r3, r1, r3
 800304e:	4413      	add	r3, r2
 8003050:	333f      	adds	r3, #63	; 0x3f
 8003052:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003054:	2b02      	cmp	r3, #2
 8003056:	d111      	bne.n	800307c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	4611      	mov	r1, r2
 8003062:	4618      	mov	r0, r3
 8003064:	f004 fadd 	bl	8007622 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	4413      	add	r3, r2
 8003070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003074:	461a      	mov	r2, r3
 8003076:	2310      	movs	r3, #16
 8003078:	6093      	str	r3, [r2, #8]
 800307a:	e03a      	b.n	80030f2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	212c      	movs	r1, #44	; 0x2c
 8003082:	fb01 f303 	mul.w	r3, r1, r3
 8003086:	4413      	add	r3, r2
 8003088:	333f      	adds	r3, #63	; 0x3f
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b03      	cmp	r3, #3
 800308e:	d009      	beq.n	80030a4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	212c      	movs	r1, #44	; 0x2c
 8003096:	fb01 f303 	mul.w	r3, r1, r3
 800309a:	4413      	add	r3, r2
 800309c:	333f      	adds	r3, #63	; 0x3f
 800309e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d126      	bne.n	80030f2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	015a      	lsls	r2, r3, #5
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	4413      	add	r3, r2
 80030ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	0151      	lsls	r1, r2, #5
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	440a      	add	r2, r1
 80030ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80030c2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	212c      	movs	r1, #44	; 0x2c
 80030ca:	fb01 f303 	mul.w	r3, r1, r3
 80030ce:	4413      	add	r3, r2
 80030d0:	3360      	adds	r3, #96	; 0x60
 80030d2:	2201      	movs	r2, #1
 80030d4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	b2d9      	uxtb	r1, r3
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	202c      	movs	r0, #44	; 0x2c
 80030e0:	fb00 f303 	mul.w	r3, r0, r3
 80030e4:	4413      	add	r3, r2
 80030e6:	3360      	adds	r3, #96	; 0x60
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	461a      	mov	r2, r3
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f00a f9fb 	bl	800d4e8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d12b      	bne.n	8003152 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	212c      	movs	r1, #44	; 0x2c
 8003100:	fb01 f303 	mul.w	r3, r1, r3
 8003104:	4413      	add	r3, r2
 8003106:	3348      	adds	r3, #72	; 0x48
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	202c      	movs	r0, #44	; 0x2c
 8003110:	fb00 f202 	mul.w	r2, r0, r2
 8003114:	440a      	add	r2, r1
 8003116:	3240      	adds	r2, #64	; 0x40
 8003118:	8812      	ldrh	r2, [r2, #0]
 800311a:	fbb3 f3f2 	udiv	r3, r3, r2
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 818e 	beq.w	8003444 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	212c      	movs	r1, #44	; 0x2c
 800312e:	fb01 f303 	mul.w	r3, r1, r3
 8003132:	4413      	add	r3, r2
 8003134:	3354      	adds	r3, #84	; 0x54
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	f083 0301 	eor.w	r3, r3, #1
 800313c:	b2d8      	uxtb	r0, r3
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	212c      	movs	r1, #44	; 0x2c
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	4413      	add	r3, r2
 800314a:	3354      	adds	r3, #84	; 0x54
 800314c:	4602      	mov	r2, r0
 800314e:	701a      	strb	r2, [r3, #0]
}
 8003150:	e178      	b.n	8003444 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	212c      	movs	r1, #44	; 0x2c
 8003158:	fb01 f303 	mul.w	r3, r1, r3
 800315c:	4413      	add	r3, r2
 800315e:	3354      	adds	r3, #84	; 0x54
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	f083 0301 	eor.w	r3, r3, #1
 8003166:	b2d8      	uxtb	r0, r3
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	212c      	movs	r1, #44	; 0x2c
 800316e:	fb01 f303 	mul.w	r3, r1, r3
 8003172:	4413      	add	r3, r2
 8003174:	3354      	adds	r3, #84	; 0x54
 8003176:	4602      	mov	r2, r0
 8003178:	701a      	strb	r2, [r3, #0]
}
 800317a:	e163      	b.n	8003444 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	4413      	add	r3, r2
 8003184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b02      	cmp	r3, #2
 8003190:	f040 80f6 	bne.w	8003380 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	212c      	movs	r1, #44	; 0x2c
 800319a:	fb01 f303 	mul.w	r3, r1, r3
 800319e:	4413      	add	r3, r2
 80031a0:	3361      	adds	r3, #97	; 0x61
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d109      	bne.n	80031bc <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	212c      	movs	r1, #44	; 0x2c
 80031ae:	fb01 f303 	mul.w	r3, r1, r3
 80031b2:	4413      	add	r3, r2
 80031b4:	3360      	adds	r3, #96	; 0x60
 80031b6:	2201      	movs	r2, #1
 80031b8:	701a      	strb	r2, [r3, #0]
 80031ba:	e0c9      	b.n	8003350 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	212c      	movs	r1, #44	; 0x2c
 80031c2:	fb01 f303 	mul.w	r3, r1, r3
 80031c6:	4413      	add	r3, r2
 80031c8:	3361      	adds	r3, #97	; 0x61
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b05      	cmp	r3, #5
 80031ce:	d109      	bne.n	80031e4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	212c      	movs	r1, #44	; 0x2c
 80031d6:	fb01 f303 	mul.w	r3, r1, r3
 80031da:	4413      	add	r3, r2
 80031dc:	3360      	adds	r3, #96	; 0x60
 80031de:	2205      	movs	r2, #5
 80031e0:	701a      	strb	r2, [r3, #0]
 80031e2:	e0b5      	b.n	8003350 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	212c      	movs	r1, #44	; 0x2c
 80031ea:	fb01 f303 	mul.w	r3, r1, r3
 80031ee:	4413      	add	r3, r2
 80031f0:	3361      	adds	r3, #97	; 0x61
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b06      	cmp	r3, #6
 80031f6:	d009      	beq.n	800320c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	212c      	movs	r1, #44	; 0x2c
 80031fe:	fb01 f303 	mul.w	r3, r1, r3
 8003202:	4413      	add	r3, r2
 8003204:	3361      	adds	r3, #97	; 0x61
 8003206:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003208:	2b08      	cmp	r3, #8
 800320a:	d150      	bne.n	80032ae <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	212c      	movs	r1, #44	; 0x2c
 8003212:	fb01 f303 	mul.w	r3, r1, r3
 8003216:	4413      	add	r3, r2
 8003218:	335c      	adds	r3, #92	; 0x5c
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	202c      	movs	r0, #44	; 0x2c
 8003224:	fb00 f303 	mul.w	r3, r0, r3
 8003228:	440b      	add	r3, r1
 800322a:	335c      	adds	r3, #92	; 0x5c
 800322c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	212c      	movs	r1, #44	; 0x2c
 8003234:	fb01 f303 	mul.w	r3, r1, r3
 8003238:	4413      	add	r3, r2
 800323a:	335c      	adds	r3, #92	; 0x5c
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d912      	bls.n	8003268 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	212c      	movs	r1, #44	; 0x2c
 8003248:	fb01 f303 	mul.w	r3, r1, r3
 800324c:	4413      	add	r3, r2
 800324e:	335c      	adds	r3, #92	; 0x5c
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	212c      	movs	r1, #44	; 0x2c
 800325a:	fb01 f303 	mul.w	r3, r1, r3
 800325e:	4413      	add	r3, r2
 8003260:	3360      	adds	r3, #96	; 0x60
 8003262:	2204      	movs	r2, #4
 8003264:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003266:	e073      	b.n	8003350 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	212c      	movs	r1, #44	; 0x2c
 800326e:	fb01 f303 	mul.w	r3, r1, r3
 8003272:	4413      	add	r3, r2
 8003274:	3360      	adds	r3, #96	; 0x60
 8003276:	2202      	movs	r2, #2
 8003278:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	015a      	lsls	r2, r3, #5
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	4413      	add	r3, r2
 8003282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003290:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003298:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	015a      	lsls	r2, r3, #5
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	4413      	add	r3, r2
 80032a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a6:	461a      	mov	r2, r3
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80032ac:	e050      	b.n	8003350 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	212c      	movs	r1, #44	; 0x2c
 80032b4:	fb01 f303 	mul.w	r3, r1, r3
 80032b8:	4413      	add	r3, r2
 80032ba:	3361      	adds	r3, #97	; 0x61
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b03      	cmp	r3, #3
 80032c0:	d122      	bne.n	8003308 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	212c      	movs	r1, #44	; 0x2c
 80032c8:	fb01 f303 	mul.w	r3, r1, r3
 80032cc:	4413      	add	r3, r2
 80032ce:	3360      	adds	r3, #96	; 0x60
 80032d0:	2202      	movs	r2, #2
 80032d2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032ea:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032f2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	015a      	lsls	r2, r3, #5
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	4413      	add	r3, r2
 80032fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003300:	461a      	mov	r2, r3
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	e023      	b.n	8003350 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	212c      	movs	r1, #44	; 0x2c
 800330e:	fb01 f303 	mul.w	r3, r1, r3
 8003312:	4413      	add	r3, r2
 8003314:	3361      	adds	r3, #97	; 0x61
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b07      	cmp	r3, #7
 800331a:	d119      	bne.n	8003350 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	212c      	movs	r1, #44	; 0x2c
 8003322:	fb01 f303 	mul.w	r3, r1, r3
 8003326:	4413      	add	r3, r2
 8003328:	335c      	adds	r3, #92	; 0x5c
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	202c      	movs	r0, #44	; 0x2c
 8003334:	fb00 f303 	mul.w	r3, r0, r3
 8003338:	440b      	add	r3, r1
 800333a:	335c      	adds	r3, #92	; 0x5c
 800333c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	212c      	movs	r1, #44	; 0x2c
 8003344:	fb01 f303 	mul.w	r3, r1, r3
 8003348:	4413      	add	r3, r2
 800334a:	3360      	adds	r3, #96	; 0x60
 800334c:	2204      	movs	r2, #4
 800334e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	4413      	add	r3, r2
 8003358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335c:	461a      	mov	r2, r3
 800335e:	2302      	movs	r3, #2
 8003360:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	b2d9      	uxtb	r1, r3
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	202c      	movs	r0, #44	; 0x2c
 800336c:	fb00 f303 	mul.w	r3, r0, r3
 8003370:	4413      	add	r3, r2
 8003372:	3360      	adds	r3, #96	; 0x60
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f00a f8b5 	bl	800d4e8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800337e:	e061      	b.n	8003444 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	4413      	add	r3, r2
 8003388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	2b10      	cmp	r3, #16
 8003394:	d156      	bne.n	8003444 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	212c      	movs	r1, #44	; 0x2c
 800339c:	fb01 f303 	mul.w	r3, r1, r3
 80033a0:	4413      	add	r3, r2
 80033a2:	333f      	adds	r3, #63	; 0x3f
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	d111      	bne.n	80033ce <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	212c      	movs	r1, #44	; 0x2c
 80033b0:	fb01 f303 	mul.w	r3, r1, r3
 80033b4:	4413      	add	r3, r2
 80033b6:	335c      	adds	r3, #92	; 0x5c
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	4611      	mov	r1, r2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f004 f92b 	bl	8007622 <USB_HC_Halt>
 80033cc:	e031      	b.n	8003432 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	212c      	movs	r1, #44	; 0x2c
 80033d4:	fb01 f303 	mul.w	r3, r1, r3
 80033d8:	4413      	add	r3, r2
 80033da:	333f      	adds	r3, #63	; 0x3f
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d009      	beq.n	80033f6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	212c      	movs	r1, #44	; 0x2c
 80033e8:	fb01 f303 	mul.w	r3, r1, r3
 80033ec:	4413      	add	r3, r2
 80033ee:	333f      	adds	r3, #63	; 0x3f
 80033f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d11d      	bne.n	8003432 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	212c      	movs	r1, #44	; 0x2c
 80033fc:	fb01 f303 	mul.w	r3, r1, r3
 8003400:	4413      	add	r3, r2
 8003402:	335c      	adds	r3, #92	; 0x5c
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d110      	bne.n	8003432 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	212c      	movs	r1, #44	; 0x2c
 8003416:	fb01 f303 	mul.w	r3, r1, r3
 800341a:	4413      	add	r3, r2
 800341c:	3361      	adds	r3, #97	; 0x61
 800341e:	2203      	movs	r2, #3
 8003420:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	4611      	mov	r1, r2
 800342c:	4618      	mov	r0, r3
 800342e:	f004 f8f8 	bl	8007622 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4413      	add	r3, r2
 800343a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343e:	461a      	mov	r2, r3
 8003440:	2310      	movs	r3, #16
 8003442:	6093      	str	r3, [r2, #8]
}
 8003444:	bf00      	nop
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	460b      	mov	r3, r1
 8003456:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003462:	78fb      	ldrb	r3, [r7, #3]
 8003464:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	015a      	lsls	r2, r3, #5
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	4413      	add	r3, r2
 800346e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b04      	cmp	r3, #4
 800347a:	d11a      	bne.n	80034b2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	015a      	lsls	r2, r3, #5
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	4413      	add	r3, r2
 8003484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003488:	461a      	mov	r2, r3
 800348a:	2304      	movs	r3, #4
 800348c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	212c      	movs	r1, #44	; 0x2c
 8003494:	fb01 f303 	mul.w	r3, r1, r3
 8003498:	4413      	add	r3, r2
 800349a:	3361      	adds	r3, #97	; 0x61
 800349c:	2206      	movs	r2, #6
 800349e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	4611      	mov	r1, r2
 80034aa:	4618      	mov	r0, r3
 80034ac:	f004 f8b9 	bl	8007622 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80034b0:	e331      	b.n	8003b16 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	015a      	lsls	r2, r3, #5
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	4413      	add	r3, r2
 80034ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 0320 	and.w	r3, r3, #32
 80034c4:	2b20      	cmp	r3, #32
 80034c6:	d12e      	bne.n	8003526 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	015a      	lsls	r2, r3, #5
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d4:	461a      	mov	r2, r3
 80034d6:	2320      	movs	r3, #32
 80034d8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	212c      	movs	r1, #44	; 0x2c
 80034e0:	fb01 f303 	mul.w	r3, r1, r3
 80034e4:	4413      	add	r3, r2
 80034e6:	333d      	adds	r3, #61	; 0x3d
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	f040 8313 	bne.w	8003b16 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	212c      	movs	r1, #44	; 0x2c
 80034f6:	fb01 f303 	mul.w	r3, r1, r3
 80034fa:	4413      	add	r3, r2
 80034fc:	333d      	adds	r3, #61	; 0x3d
 80034fe:	2200      	movs	r2, #0
 8003500:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	212c      	movs	r1, #44	; 0x2c
 8003508:	fb01 f303 	mul.w	r3, r1, r3
 800350c:	4413      	add	r3, r2
 800350e:	3360      	adds	r3, #96	; 0x60
 8003510:	2202      	movs	r2, #2
 8003512:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	4611      	mov	r1, r2
 800351e:	4618      	mov	r0, r3
 8003520:	f004 f87f 	bl	8007622 <USB_HC_Halt>
}
 8003524:	e2f7      	b.n	8003b16 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	015a      	lsls	r2, r3, #5
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	4413      	add	r3, r2
 800352e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800353c:	d112      	bne.n	8003564 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	4413      	add	r3, r2
 8003546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354a:	461a      	mov	r2, r3
 800354c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003550:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	4611      	mov	r1, r2
 800355c:	4618      	mov	r0, r3
 800355e:	f004 f860 	bl	8007622 <USB_HC_Halt>
}
 8003562:	e2d8      	b.n	8003b16 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	015a      	lsls	r2, r3, #5
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	4413      	add	r3, r2
 800356c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b01      	cmp	r3, #1
 8003578:	d140      	bne.n	80035fc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	212c      	movs	r1, #44	; 0x2c
 8003580:	fb01 f303 	mul.w	r3, r1, r3
 8003584:	4413      	add	r3, r2
 8003586:	335c      	adds	r3, #92	; 0x5c
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	4413      	add	r3, r2
 8003594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359e:	2b40      	cmp	r3, #64	; 0x40
 80035a0:	d111      	bne.n	80035c6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	212c      	movs	r1, #44	; 0x2c
 80035a8:	fb01 f303 	mul.w	r3, r1, r3
 80035ac:	4413      	add	r3, r2
 80035ae:	333d      	adds	r3, #61	; 0x3d
 80035b0:	2201      	movs	r2, #1
 80035b2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c0:	461a      	mov	r2, r3
 80035c2:	2340      	movs	r3, #64	; 0x40
 80035c4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	015a      	lsls	r2, r3, #5
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d2:	461a      	mov	r2, r3
 80035d4:	2301      	movs	r3, #1
 80035d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	212c      	movs	r1, #44	; 0x2c
 80035de:	fb01 f303 	mul.w	r3, r1, r3
 80035e2:	4413      	add	r3, r2
 80035e4:	3361      	adds	r3, #97	; 0x61
 80035e6:	2201      	movs	r2, #1
 80035e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	4611      	mov	r1, r2
 80035f4:	4618      	mov	r0, r3
 80035f6:	f004 f814 	bl	8007622 <USB_HC_Halt>
}
 80035fa:	e28c      	b.n	8003b16 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	4413      	add	r3, r2
 8003604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360e:	2b40      	cmp	r3, #64	; 0x40
 8003610:	d12c      	bne.n	800366c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	212c      	movs	r1, #44	; 0x2c
 8003618:	fb01 f303 	mul.w	r3, r1, r3
 800361c:	4413      	add	r3, r2
 800361e:	3361      	adds	r3, #97	; 0x61
 8003620:	2204      	movs	r2, #4
 8003622:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	212c      	movs	r1, #44	; 0x2c
 800362a:	fb01 f303 	mul.w	r3, r1, r3
 800362e:	4413      	add	r3, r2
 8003630:	333d      	adds	r3, #61	; 0x3d
 8003632:	2201      	movs	r2, #1
 8003634:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	212c      	movs	r1, #44	; 0x2c
 800363c:	fb01 f303 	mul.w	r3, r1, r3
 8003640:	4413      	add	r3, r2
 8003642:	335c      	adds	r3, #92	; 0x5c
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	4611      	mov	r1, r2
 8003652:	4618      	mov	r0, r3
 8003654:	f003 ffe5 	bl	8007622 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	4413      	add	r3, r2
 8003660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003664:	461a      	mov	r2, r3
 8003666:	2340      	movs	r3, #64	; 0x40
 8003668:	6093      	str	r3, [r2, #8]
}
 800366a:	e254      	b.n	8003b16 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	015a      	lsls	r2, r3, #5
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	4413      	add	r3, r2
 8003674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b08      	cmp	r3, #8
 8003680:	d11a      	bne.n	80036b8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	015a      	lsls	r2, r3, #5
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	4413      	add	r3, r2
 800368a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800368e:	461a      	mov	r2, r3
 8003690:	2308      	movs	r3, #8
 8003692:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	212c      	movs	r1, #44	; 0x2c
 800369a:	fb01 f303 	mul.w	r3, r1, r3
 800369e:	4413      	add	r3, r2
 80036a0:	3361      	adds	r3, #97	; 0x61
 80036a2:	2205      	movs	r2, #5
 80036a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	4611      	mov	r1, r2
 80036b0:	4618      	mov	r0, r3
 80036b2:	f003 ffb6 	bl	8007622 <USB_HC_Halt>
}
 80036b6:	e22e      	b.n	8003b16 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	015a      	lsls	r2, r3, #5
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	4413      	add	r3, r2
 80036c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 0310 	and.w	r3, r3, #16
 80036ca:	2b10      	cmp	r3, #16
 80036cc:	d140      	bne.n	8003750 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	212c      	movs	r1, #44	; 0x2c
 80036d4:	fb01 f303 	mul.w	r3, r1, r3
 80036d8:	4413      	add	r3, r2
 80036da:	335c      	adds	r3, #92	; 0x5c
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	212c      	movs	r1, #44	; 0x2c
 80036e6:	fb01 f303 	mul.w	r3, r1, r3
 80036ea:	4413      	add	r3, r2
 80036ec:	3361      	adds	r3, #97	; 0x61
 80036ee:	2203      	movs	r2, #3
 80036f0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	212c      	movs	r1, #44	; 0x2c
 80036f8:	fb01 f303 	mul.w	r3, r1, r3
 80036fc:	4413      	add	r3, r2
 80036fe:	333d      	adds	r3, #61	; 0x3d
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d112      	bne.n	800372c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	212c      	movs	r1, #44	; 0x2c
 800370c:	fb01 f303 	mul.w	r3, r1, r3
 8003710:	4413      	add	r3, r2
 8003712:	333c      	adds	r3, #60	; 0x3c
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d108      	bne.n	800372c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	212c      	movs	r1, #44	; 0x2c
 8003720:	fb01 f303 	mul.w	r3, r1, r3
 8003724:	4413      	add	r3, r2
 8003726:	333d      	adds	r3, #61	; 0x3d
 8003728:	2201      	movs	r2, #1
 800372a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	4611      	mov	r1, r2
 8003736:	4618      	mov	r0, r3
 8003738:	f003 ff73 	bl	8007622 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	4413      	add	r3, r2
 8003744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003748:	461a      	mov	r2, r3
 800374a:	2310      	movs	r3, #16
 800374c:	6093      	str	r3, [r2, #8]
}
 800374e:	e1e2      	b.n	8003b16 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	4413      	add	r3, r2
 8003758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003762:	2b80      	cmp	r3, #128	; 0x80
 8003764:	d164      	bne.n	8003830 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d111      	bne.n	8003792 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	212c      	movs	r1, #44	; 0x2c
 8003774:	fb01 f303 	mul.w	r3, r1, r3
 8003778:	4413      	add	r3, r2
 800377a:	3361      	adds	r3, #97	; 0x61
 800377c:	2206      	movs	r2, #6
 800377e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	4611      	mov	r1, r2
 800378a:	4618      	mov	r0, r3
 800378c:	f003 ff49 	bl	8007622 <USB_HC_Halt>
 8003790:	e044      	b.n	800381c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	212c      	movs	r1, #44	; 0x2c
 8003798:	fb01 f303 	mul.w	r3, r1, r3
 800379c:	4413      	add	r3, r2
 800379e:	335c      	adds	r3, #92	; 0x5c
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	202c      	movs	r0, #44	; 0x2c
 80037aa:	fb00 f303 	mul.w	r3, r0, r3
 80037ae:	440b      	add	r3, r1
 80037b0:	335c      	adds	r3, #92	; 0x5c
 80037b2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	212c      	movs	r1, #44	; 0x2c
 80037ba:	fb01 f303 	mul.w	r3, r1, r3
 80037be:	4413      	add	r3, r2
 80037c0:	335c      	adds	r3, #92	; 0x5c
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d920      	bls.n	800380a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	212c      	movs	r1, #44	; 0x2c
 80037ce:	fb01 f303 	mul.w	r3, r1, r3
 80037d2:	4413      	add	r3, r2
 80037d4:	335c      	adds	r3, #92	; 0x5c
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	212c      	movs	r1, #44	; 0x2c
 80037e0:	fb01 f303 	mul.w	r3, r1, r3
 80037e4:	4413      	add	r3, r2
 80037e6:	3360      	adds	r3, #96	; 0x60
 80037e8:	2204      	movs	r2, #4
 80037ea:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	b2d9      	uxtb	r1, r3
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	202c      	movs	r0, #44	; 0x2c
 80037f6:	fb00 f303 	mul.w	r3, r0, r3
 80037fa:	4413      	add	r3, r2
 80037fc:	3360      	adds	r3, #96	; 0x60
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	461a      	mov	r2, r3
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f009 fe70 	bl	800d4e8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003808:	e008      	b.n	800381c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	212c      	movs	r1, #44	; 0x2c
 8003810:	fb01 f303 	mul.w	r3, r1, r3
 8003814:	4413      	add	r3, r2
 8003816:	3360      	adds	r3, #96	; 0x60
 8003818:	2202      	movs	r2, #2
 800381a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	4413      	add	r3, r2
 8003824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003828:	461a      	mov	r2, r3
 800382a:	2380      	movs	r3, #128	; 0x80
 800382c:	6093      	str	r3, [r2, #8]
}
 800382e:	e172      	b.n	8003b16 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	4413      	add	r3, r2
 8003838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003846:	d11b      	bne.n	8003880 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	212c      	movs	r1, #44	; 0x2c
 800384e:	fb01 f303 	mul.w	r3, r1, r3
 8003852:	4413      	add	r3, r2
 8003854:	3361      	adds	r3, #97	; 0x61
 8003856:	2208      	movs	r2, #8
 8003858:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	4611      	mov	r1, r2
 8003864:	4618      	mov	r0, r3
 8003866:	f003 fedc 	bl	8007622 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	4413      	add	r3, r2
 8003872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003876:	461a      	mov	r2, r3
 8003878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800387c:	6093      	str	r3, [r2, #8]
}
 800387e:	e14a      	b.n	8003b16 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	4413      	add	r3, r2
 8003888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b02      	cmp	r3, #2
 8003894:	f040 813f 	bne.w	8003b16 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	212c      	movs	r1, #44	; 0x2c
 800389e:	fb01 f303 	mul.w	r3, r1, r3
 80038a2:	4413      	add	r3, r2
 80038a4:	3361      	adds	r3, #97	; 0x61
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d17d      	bne.n	80039a8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	212c      	movs	r1, #44	; 0x2c
 80038b2:	fb01 f303 	mul.w	r3, r1, r3
 80038b6:	4413      	add	r3, r2
 80038b8:	3360      	adds	r3, #96	; 0x60
 80038ba:	2201      	movs	r2, #1
 80038bc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	212c      	movs	r1, #44	; 0x2c
 80038c4:	fb01 f303 	mul.w	r3, r1, r3
 80038c8:	4413      	add	r3, r2
 80038ca:	333f      	adds	r3, #63	; 0x3f
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d00a      	beq.n	80038e8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	212c      	movs	r1, #44	; 0x2c
 80038d8:	fb01 f303 	mul.w	r3, r1, r3
 80038dc:	4413      	add	r3, r2
 80038de:	333f      	adds	r3, #63	; 0x3f
 80038e0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80038e2:	2b03      	cmp	r3, #3
 80038e4:	f040 8100 	bne.w	8003ae8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d113      	bne.n	8003918 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	212c      	movs	r1, #44	; 0x2c
 80038f6:	fb01 f303 	mul.w	r3, r1, r3
 80038fa:	4413      	add	r3, r2
 80038fc:	3355      	adds	r3, #85	; 0x55
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	f083 0301 	eor.w	r3, r3, #1
 8003904:	b2d8      	uxtb	r0, r3
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	212c      	movs	r1, #44	; 0x2c
 800390c:	fb01 f303 	mul.w	r3, r1, r3
 8003910:	4413      	add	r3, r2
 8003912:	3355      	adds	r3, #85	; 0x55
 8003914:	4602      	mov	r2, r0
 8003916:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	2b01      	cmp	r3, #1
 800391e:	f040 80e3 	bne.w	8003ae8 <HCD_HC_OUT_IRQHandler+0x69c>
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	212c      	movs	r1, #44	; 0x2c
 8003928:	fb01 f303 	mul.w	r3, r1, r3
 800392c:	4413      	add	r3, r2
 800392e:	334c      	adds	r3, #76	; 0x4c
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 80d8 	beq.w	8003ae8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	212c      	movs	r1, #44	; 0x2c
 800393e:	fb01 f303 	mul.w	r3, r1, r3
 8003942:	4413      	add	r3, r2
 8003944:	334c      	adds	r3, #76	; 0x4c
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	202c      	movs	r0, #44	; 0x2c
 800394e:	fb00 f202 	mul.w	r2, r0, r2
 8003952:	440a      	add	r2, r1
 8003954:	3240      	adds	r2, #64	; 0x40
 8003956:	8812      	ldrh	r2, [r2, #0]
 8003958:	4413      	add	r3, r2
 800395a:	3b01      	subs	r3, #1
 800395c:	6879      	ldr	r1, [r7, #4]
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	202c      	movs	r0, #44	; 0x2c
 8003962:	fb00 f202 	mul.w	r2, r0, r2
 8003966:	440a      	add	r2, r1
 8003968:	3240      	adds	r2, #64	; 0x40
 800396a:	8812      	ldrh	r2, [r2, #0]
 800396c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003970:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 80b5 	beq.w	8003ae8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	212c      	movs	r1, #44	; 0x2c
 8003984:	fb01 f303 	mul.w	r3, r1, r3
 8003988:	4413      	add	r3, r2
 800398a:	3355      	adds	r3, #85	; 0x55
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	f083 0301 	eor.w	r3, r3, #1
 8003992:	b2d8      	uxtb	r0, r3
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	212c      	movs	r1, #44	; 0x2c
 800399a:	fb01 f303 	mul.w	r3, r1, r3
 800399e:	4413      	add	r3, r2
 80039a0:	3355      	adds	r3, #85	; 0x55
 80039a2:	4602      	mov	r2, r0
 80039a4:	701a      	strb	r2, [r3, #0]
 80039a6:	e09f      	b.n	8003ae8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	212c      	movs	r1, #44	; 0x2c
 80039ae:	fb01 f303 	mul.w	r3, r1, r3
 80039b2:	4413      	add	r3, r2
 80039b4:	3361      	adds	r3, #97	; 0x61
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b03      	cmp	r3, #3
 80039ba:	d109      	bne.n	80039d0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	212c      	movs	r1, #44	; 0x2c
 80039c2:	fb01 f303 	mul.w	r3, r1, r3
 80039c6:	4413      	add	r3, r2
 80039c8:	3360      	adds	r3, #96	; 0x60
 80039ca:	2202      	movs	r2, #2
 80039cc:	701a      	strb	r2, [r3, #0]
 80039ce:	e08b      	b.n	8003ae8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	212c      	movs	r1, #44	; 0x2c
 80039d6:	fb01 f303 	mul.w	r3, r1, r3
 80039da:	4413      	add	r3, r2
 80039dc:	3361      	adds	r3, #97	; 0x61
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b04      	cmp	r3, #4
 80039e2:	d109      	bne.n	80039f8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	212c      	movs	r1, #44	; 0x2c
 80039ea:	fb01 f303 	mul.w	r3, r1, r3
 80039ee:	4413      	add	r3, r2
 80039f0:	3360      	adds	r3, #96	; 0x60
 80039f2:	2202      	movs	r2, #2
 80039f4:	701a      	strb	r2, [r3, #0]
 80039f6:	e077      	b.n	8003ae8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	212c      	movs	r1, #44	; 0x2c
 80039fe:	fb01 f303 	mul.w	r3, r1, r3
 8003a02:	4413      	add	r3, r2
 8003a04:	3361      	adds	r3, #97	; 0x61
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	2b05      	cmp	r3, #5
 8003a0a:	d109      	bne.n	8003a20 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	212c      	movs	r1, #44	; 0x2c
 8003a12:	fb01 f303 	mul.w	r3, r1, r3
 8003a16:	4413      	add	r3, r2
 8003a18:	3360      	adds	r3, #96	; 0x60
 8003a1a:	2205      	movs	r2, #5
 8003a1c:	701a      	strb	r2, [r3, #0]
 8003a1e:	e063      	b.n	8003ae8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	212c      	movs	r1, #44	; 0x2c
 8003a26:	fb01 f303 	mul.w	r3, r1, r3
 8003a2a:	4413      	add	r3, r2
 8003a2c:	3361      	adds	r3, #97	; 0x61
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b06      	cmp	r3, #6
 8003a32:	d009      	beq.n	8003a48 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	212c      	movs	r1, #44	; 0x2c
 8003a3a:	fb01 f303 	mul.w	r3, r1, r3
 8003a3e:	4413      	add	r3, r2
 8003a40:	3361      	adds	r3, #97	; 0x61
 8003a42:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d14f      	bne.n	8003ae8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	212c      	movs	r1, #44	; 0x2c
 8003a4e:	fb01 f303 	mul.w	r3, r1, r3
 8003a52:	4413      	add	r3, r2
 8003a54:	335c      	adds	r3, #92	; 0x5c
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	202c      	movs	r0, #44	; 0x2c
 8003a60:	fb00 f303 	mul.w	r3, r0, r3
 8003a64:	440b      	add	r3, r1
 8003a66:	335c      	adds	r3, #92	; 0x5c
 8003a68:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	212c      	movs	r1, #44	; 0x2c
 8003a70:	fb01 f303 	mul.w	r3, r1, r3
 8003a74:	4413      	add	r3, r2
 8003a76:	335c      	adds	r3, #92	; 0x5c
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d912      	bls.n	8003aa4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	212c      	movs	r1, #44	; 0x2c
 8003a84:	fb01 f303 	mul.w	r3, r1, r3
 8003a88:	4413      	add	r3, r2
 8003a8a:	335c      	adds	r3, #92	; 0x5c
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	212c      	movs	r1, #44	; 0x2c
 8003a96:	fb01 f303 	mul.w	r3, r1, r3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	3360      	adds	r3, #96	; 0x60
 8003a9e:	2204      	movs	r2, #4
 8003aa0:	701a      	strb	r2, [r3, #0]
 8003aa2:	e021      	b.n	8003ae8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	212c      	movs	r1, #44	; 0x2c
 8003aaa:	fb01 f303 	mul.w	r3, r1, r3
 8003aae:	4413      	add	r3, r2
 8003ab0:	3360      	adds	r3, #96	; 0x60
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	015a      	lsls	r2, r3, #5
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	4413      	add	r3, r2
 8003abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003acc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ad4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	015a      	lsls	r2, r3, #5
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	015a      	lsls	r2, r3, #5
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af4:	461a      	mov	r2, r3
 8003af6:	2302      	movs	r3, #2
 8003af8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	b2d9      	uxtb	r1, r3
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	202c      	movs	r0, #44	; 0x2c
 8003b04:	fb00 f303 	mul.w	r3, r0, r3
 8003b08:	4413      	add	r3, r2
 8003b0a:	3360      	adds	r3, #96	; 0x60
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f009 fce9 	bl	800d4e8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003b16:	bf00      	nop
 8003b18:	3720      	adds	r7, #32
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b08a      	sub	sp, #40	; 0x28
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	0c5b      	lsrs	r3, r3, #17
 8003b44:	f003 030f 	and.w	r3, r3, #15
 8003b48:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	091b      	lsrs	r3, r3, #4
 8003b4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b52:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d004      	beq.n	8003b64 <HCD_RXQLVL_IRQHandler+0x46>
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2b05      	cmp	r3, #5
 8003b5e:	f000 80a9 	beq.w	8003cb4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003b62:	e0aa      	b.n	8003cba <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 80a6 	beq.w	8003cb8 <HCD_RXQLVL_IRQHandler+0x19a>
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	212c      	movs	r1, #44	; 0x2c
 8003b72:	fb01 f303 	mul.w	r3, r1, r3
 8003b76:	4413      	add	r3, r2
 8003b78:	3344      	adds	r3, #68	; 0x44
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 809b 	beq.w	8003cb8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	212c      	movs	r1, #44	; 0x2c
 8003b88:	fb01 f303 	mul.w	r3, r1, r3
 8003b8c:	4413      	add	r3, r2
 8003b8e:	3350      	adds	r3, #80	; 0x50
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	441a      	add	r2, r3
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	202c      	movs	r0, #44	; 0x2c
 8003b9c:	fb00 f303 	mul.w	r3, r0, r3
 8003ba0:	440b      	add	r3, r1
 8003ba2:	334c      	adds	r3, #76	; 0x4c
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d87a      	bhi.n	8003ca0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6818      	ldr	r0, [r3, #0]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	212c      	movs	r1, #44	; 0x2c
 8003bb4:	fb01 f303 	mul.w	r3, r1, r3
 8003bb8:	4413      	add	r3, r2
 8003bba:	3344      	adds	r3, #68	; 0x44
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	b292      	uxth	r2, r2
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	f003 f884 	bl	8006cd0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	212c      	movs	r1, #44	; 0x2c
 8003bce:	fb01 f303 	mul.w	r3, r1, r3
 8003bd2:	4413      	add	r3, r2
 8003bd4:	3344      	adds	r3, #68	; 0x44
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	441a      	add	r2, r3
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	202c      	movs	r0, #44	; 0x2c
 8003be2:	fb00 f303 	mul.w	r3, r0, r3
 8003be6:	440b      	add	r3, r1
 8003be8:	3344      	adds	r3, #68	; 0x44
 8003bea:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	212c      	movs	r1, #44	; 0x2c
 8003bf2:	fb01 f303 	mul.w	r3, r1, r3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3350      	adds	r3, #80	; 0x50
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	441a      	add	r2, r3
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	202c      	movs	r0, #44	; 0x2c
 8003c06:	fb00 f303 	mul.w	r3, r0, r3
 8003c0a:	440b      	add	r3, r1
 8003c0c:	3350      	adds	r3, #80	; 0x50
 8003c0e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	015a      	lsls	r2, r3, #5
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	4413      	add	r3, r2
 8003c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	0cdb      	lsrs	r3, r3, #19
 8003c20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c24:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	212c      	movs	r1, #44	; 0x2c
 8003c2c:	fb01 f303 	mul.w	r3, r1, r3
 8003c30:	4413      	add	r3, r2
 8003c32:	3340      	adds	r3, #64	; 0x40
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d13c      	bne.n	8003cb8 <HCD_RXQLVL_IRQHandler+0x19a>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d039      	beq.n	8003cb8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c5a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c62:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c70:	461a      	mov	r2, r3
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	212c      	movs	r1, #44	; 0x2c
 8003c7c:	fb01 f303 	mul.w	r3, r1, r3
 8003c80:	4413      	add	r3, r2
 8003c82:	3354      	adds	r3, #84	; 0x54
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	f083 0301 	eor.w	r3, r3, #1
 8003c8a:	b2d8      	uxtb	r0, r3
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	212c      	movs	r1, #44	; 0x2c
 8003c92:	fb01 f303 	mul.w	r3, r1, r3
 8003c96:	4413      	add	r3, r2
 8003c98:	3354      	adds	r3, #84	; 0x54
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	701a      	strb	r2, [r3, #0]
      break;
 8003c9e:	e00b      	b.n	8003cb8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	212c      	movs	r1, #44	; 0x2c
 8003ca6:	fb01 f303 	mul.w	r3, r1, r3
 8003caa:	4413      	add	r3, r2
 8003cac:	3360      	adds	r3, #96	; 0x60
 8003cae:	2204      	movs	r2, #4
 8003cb0:	701a      	strb	r2, [r3, #0]
      break;
 8003cb2:	e001      	b.n	8003cb8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003cb4:	bf00      	nop
 8003cb6:	e000      	b.n	8003cba <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003cb8:	bf00      	nop
  }
}
 8003cba:	bf00      	nop
 8003cbc:	3728      	adds	r7, #40	; 0x28
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b086      	sub	sp, #24
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003cee:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d10b      	bne.n	8003d12 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d102      	bne.n	8003d0a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f009 fbd3 	bl	800d4b0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f043 0302 	orr.w	r3, r3, #2
 8003d10:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	d132      	bne.n	8003d82 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f043 0308 	orr.w	r3, r3, #8
 8003d22:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f003 0304 	and.w	r3, r3, #4
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d126      	bne.n	8003d7c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d113      	bne.n	8003d5e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003d3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d40:	d106      	bne.n	8003d50 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2102      	movs	r1, #2
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f003 f92f 	bl	8006fac <USB_InitFSLSPClkSel>
 8003d4e:	e011      	b.n	8003d74 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2101      	movs	r1, #1
 8003d56:	4618      	mov	r0, r3
 8003d58:	f003 f928 	bl	8006fac <USB_InitFSLSPClkSel>
 8003d5c:	e00a      	b.n	8003d74 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d106      	bne.n	8003d74 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003d72:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f009 fbc5 	bl	800d504 <HAL_HCD_PortEnabled_Callback>
 8003d7a:	e002      	b.n	8003d82 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f009 fbcf 	bl	800d520 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	2b20      	cmp	r3, #32
 8003d8a:	d103      	bne.n	8003d94 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	f043 0320 	orr.w	r3, r3, #32
 8003d92:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	6013      	str	r3, [r2, #0]
}
 8003da0:	bf00      	nop
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e12b      	b.n	8004012 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d106      	bne.n	8003dd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7fd fad4 	bl	800137c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2224      	movs	r2, #36	; 0x24
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0201 	bic.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e0c:	f002 fc6e 	bl	80066ec <HAL_RCC_GetPCLK1Freq>
 8003e10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	4a81      	ldr	r2, [pc, #516]	; (800401c <HAL_I2C_Init+0x274>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d807      	bhi.n	8003e2c <HAL_I2C_Init+0x84>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4a80      	ldr	r2, [pc, #512]	; (8004020 <HAL_I2C_Init+0x278>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	bf94      	ite	ls
 8003e24:	2301      	movls	r3, #1
 8003e26:	2300      	movhi	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	e006      	b.n	8003e3a <HAL_I2C_Init+0x92>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4a7d      	ldr	r2, [pc, #500]	; (8004024 <HAL_I2C_Init+0x27c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	bf94      	ite	ls
 8003e34:	2301      	movls	r3, #1
 8003e36:	2300      	movhi	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e0e7      	b.n	8004012 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4a78      	ldr	r2, [pc, #480]	; (8004028 <HAL_I2C_Init+0x280>)
 8003e46:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4a:	0c9b      	lsrs	r3, r3, #18
 8003e4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	4a6a      	ldr	r2, [pc, #424]	; (800401c <HAL_I2C_Init+0x274>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d802      	bhi.n	8003e7c <HAL_I2C_Init+0xd4>
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	e009      	b.n	8003e90 <HAL_I2C_Init+0xe8>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e82:	fb02 f303 	mul.w	r3, r2, r3
 8003e86:	4a69      	ldr	r2, [pc, #420]	; (800402c <HAL_I2C_Init+0x284>)
 8003e88:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8c:	099b      	lsrs	r3, r3, #6
 8003e8e:	3301      	adds	r3, #1
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	6812      	ldr	r2, [r2, #0]
 8003e94:	430b      	orrs	r3, r1
 8003e96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ea2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	495c      	ldr	r1, [pc, #368]	; (800401c <HAL_I2C_Init+0x274>)
 8003eac:	428b      	cmp	r3, r1
 8003eae:	d819      	bhi.n	8003ee4 <HAL_I2C_Init+0x13c>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	1e59      	subs	r1, r3, #1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ebe:	1c59      	adds	r1, r3, #1
 8003ec0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ec4:	400b      	ands	r3, r1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <HAL_I2C_Init+0x138>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	1e59      	subs	r1, r3, #1
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ed8:	3301      	adds	r3, #1
 8003eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ede:	e051      	b.n	8003f84 <HAL_I2C_Init+0x1dc>
 8003ee0:	2304      	movs	r3, #4
 8003ee2:	e04f      	b.n	8003f84 <HAL_I2C_Init+0x1dc>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d111      	bne.n	8003f10 <HAL_I2C_Init+0x168>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	1e58      	subs	r0, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6859      	ldr	r1, [r3, #4]
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	440b      	add	r3, r1
 8003efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003efe:	3301      	adds	r3, #1
 8003f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	bf0c      	ite	eq
 8003f08:	2301      	moveq	r3, #1
 8003f0a:	2300      	movne	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	e012      	b.n	8003f36 <HAL_I2C_Init+0x18e>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	1e58      	subs	r0, r3, #1
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6859      	ldr	r1, [r3, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	0099      	lsls	r1, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f26:	3301      	adds	r3, #1
 8003f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bf0c      	ite	eq
 8003f30:	2301      	moveq	r3, #1
 8003f32:	2300      	movne	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <HAL_I2C_Init+0x196>
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e022      	b.n	8003f84 <HAL_I2C_Init+0x1dc>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10e      	bne.n	8003f64 <HAL_I2C_Init+0x1bc>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	1e58      	subs	r0, r3, #1
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6859      	ldr	r1, [r3, #4]
 8003f4e:	460b      	mov	r3, r1
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	440b      	add	r3, r1
 8003f54:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f58:	3301      	adds	r3, #1
 8003f5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f62:	e00f      	b.n	8003f84 <HAL_I2C_Init+0x1dc>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	1e58      	subs	r0, r3, #1
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6859      	ldr	r1, [r3, #4]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	0099      	lsls	r1, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	6809      	ldr	r1, [r1, #0]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69da      	ldr	r2, [r3, #28]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003fb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6911      	ldr	r1, [r2, #16]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	68d2      	ldr	r2, [r2, #12]
 8003fbe:	4311      	orrs	r1, r2
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6812      	ldr	r2, [r2, #0]
 8003fc4:	430b      	orrs	r3, r1
 8003fc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	695a      	ldr	r2, [r3, #20]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	000186a0 	.word	0x000186a0
 8004020:	001e847f 	.word	0x001e847f
 8004024:	003d08ff 	.word	0x003d08ff
 8004028:	431bde83 	.word	0x431bde83
 800402c:	10624dd3 	.word	0x10624dd3

08004030 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b088      	sub	sp, #32
 8004034:	af02      	add	r7, sp, #8
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	607a      	str	r2, [r7, #4]
 800403a:	461a      	mov	r2, r3
 800403c:	460b      	mov	r3, r1
 800403e:	817b      	strh	r3, [r7, #10]
 8004040:	4613      	mov	r3, r2
 8004042:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004044:	f7fd fbb6 	bl	80017b4 <HAL_GetTick>
 8004048:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b20      	cmp	r3, #32
 8004054:	f040 80e0 	bne.w	8004218 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	2319      	movs	r3, #25
 800405e:	2201      	movs	r2, #1
 8004060:	4970      	ldr	r1, [pc, #448]	; (8004224 <HAL_I2C_Master_Transmit+0x1f4>)
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 fc58 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800406e:	2302      	movs	r3, #2
 8004070:	e0d3      	b.n	800421a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004078:	2b01      	cmp	r3, #1
 800407a:	d101      	bne.n	8004080 <HAL_I2C_Master_Transmit+0x50>
 800407c:	2302      	movs	r3, #2
 800407e:	e0cc      	b.n	800421a <HAL_I2C_Master_Transmit+0x1ea>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b01      	cmp	r3, #1
 8004094:	d007      	beq.n	80040a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f042 0201 	orr.w	r2, r2, #1
 80040a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2221      	movs	r2, #33	; 0x21
 80040ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2210      	movs	r2, #16
 80040c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	893a      	ldrh	r2, [r7, #8]
 80040d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	4a50      	ldr	r2, [pc, #320]	; (8004228 <HAL_I2C_Master_Transmit+0x1f8>)
 80040e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040e8:	8979      	ldrh	r1, [r7, #10]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	6a3a      	ldr	r2, [r7, #32]
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 fac2 	bl	8004678 <I2C_MasterRequestWrite>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e08d      	b.n	800421a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040fe:	2300      	movs	r3, #0
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	613b      	str	r3, [r7, #16]
 8004112:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004114:	e066      	b.n	80041e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	6a39      	ldr	r1, [r7, #32]
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 fcd2 	bl	8004ac4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00d      	beq.n	8004142 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	2b04      	cmp	r3, #4
 800412c:	d107      	bne.n	800413e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800413c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e06b      	b.n	800421a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	781a      	ldrb	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415c:	b29b      	uxth	r3, r3
 800415e:	3b01      	subs	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416a:	3b01      	subs	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b04      	cmp	r3, #4
 800417e:	d11b      	bne.n	80041b8 <HAL_I2C_Master_Transmit+0x188>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004184:	2b00      	cmp	r3, #0
 8004186:	d017      	beq.n	80041b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	781a      	ldrb	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	6a39      	ldr	r1, [r7, #32]
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 fcc2 	bl	8004b46 <I2C_WaitOnBTFFlagUntilTimeout>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00d      	beq.n	80041e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041cc:	2b04      	cmp	r3, #4
 80041ce:	d107      	bne.n	80041e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e01a      	b.n	800421a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d194      	bne.n	8004116 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004214:	2300      	movs	r3, #0
 8004216:	e000      	b.n	800421a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004218:	2302      	movs	r3, #2
  }
}
 800421a:	4618      	mov	r0, r3
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	00100002 	.word	0x00100002
 8004228:	ffff0000 	.word	0xffff0000

0800422c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b08c      	sub	sp, #48	; 0x30
 8004230:	af02      	add	r7, sp, #8
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	607a      	str	r2, [r7, #4]
 8004236:	461a      	mov	r2, r3
 8004238:	460b      	mov	r3, r1
 800423a:	817b      	strh	r3, [r7, #10]
 800423c:	4613      	mov	r3, r2
 800423e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004240:	f7fd fab8 	bl	80017b4 <HAL_GetTick>
 8004244:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b20      	cmp	r3, #32
 8004250:	f040 820b 	bne.w	800466a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	2319      	movs	r3, #25
 800425a:	2201      	movs	r2, #1
 800425c:	497c      	ldr	r1, [pc, #496]	; (8004450 <HAL_I2C_Master_Receive+0x224>)
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 fb5a 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800426a:	2302      	movs	r3, #2
 800426c:	e1fe      	b.n	800466c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004274:	2b01      	cmp	r3, #1
 8004276:	d101      	bne.n	800427c <HAL_I2C_Master_Receive+0x50>
 8004278:	2302      	movs	r3, #2
 800427a:	e1f7      	b.n	800466c <HAL_I2C_Master_Receive+0x440>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b01      	cmp	r3, #1
 8004290:	d007      	beq.n	80042a2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f042 0201 	orr.w	r2, r2, #1
 80042a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2222      	movs	r2, #34	; 0x22
 80042b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2210      	movs	r2, #16
 80042be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	893a      	ldrh	r2, [r7, #8]
 80042d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d8:	b29a      	uxth	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	4a5c      	ldr	r2, [pc, #368]	; (8004454 <HAL_I2C_Master_Receive+0x228>)
 80042e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80042e4:	8979      	ldrh	r1, [r7, #10]
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 fa46 	bl	800477c <I2C_MasterRequestRead>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e1b8      	b.n	800466c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d113      	bne.n	800432a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004302:	2300      	movs	r3, #0
 8004304:	623b      	str	r3, [r7, #32]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	623b      	str	r3, [r7, #32]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	623b      	str	r3, [r7, #32]
 8004316:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	e18c      	b.n	8004644 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800432e:	2b01      	cmp	r3, #1
 8004330:	d11b      	bne.n	800436a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004340:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004342:	2300      	movs	r3, #0
 8004344:	61fb      	str	r3, [r7, #28]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	61fb      	str	r3, [r7, #28]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	61fb      	str	r3, [r7, #28]
 8004356:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	e16c      	b.n	8004644 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436e:	2b02      	cmp	r3, #2
 8004370:	d11b      	bne.n	80043aa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004380:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004390:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004392:	2300      	movs	r3, #0
 8004394:	61bb      	str	r3, [r7, #24]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	61bb      	str	r3, [r7, #24]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	61bb      	str	r3, [r7, #24]
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	e14c      	b.n	8004644 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ba:	2300      	movs	r3, #0
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80043d0:	e138      	b.n	8004644 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d6:	2b03      	cmp	r3, #3
 80043d8:	f200 80f1 	bhi.w	80045be <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d123      	bne.n	800442c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 fbed 	bl	8004bc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e139      	b.n	800466c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	691a      	ldr	r2, [r3, #16]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	b2d2      	uxtb	r2, r2
 8004404:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004414:	3b01      	subs	r3, #1
 8004416:	b29a      	uxth	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004420:	b29b      	uxth	r3, r3
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	855a      	strh	r2, [r3, #42]	; 0x2a
 800442a:	e10b      	b.n	8004644 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004430:	2b02      	cmp	r3, #2
 8004432:	d14e      	bne.n	80044d2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443a:	2200      	movs	r2, #0
 800443c:	4906      	ldr	r1, [pc, #24]	; (8004458 <HAL_I2C_Master_Receive+0x22c>)
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 fa6a 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d008      	beq.n	800445c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e10e      	b.n	800466c <HAL_I2C_Master_Receive+0x440>
 800444e:	bf00      	nop
 8004450:	00100002 	.word	0x00100002
 8004454:	ffff0000 	.word	0xffff0000
 8004458:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800446a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	691a      	ldr	r2, [r3, #16]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	1c5a      	adds	r2, r3, #1
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004488:	3b01      	subs	r3, #1
 800448a:	b29a      	uxth	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004494:	b29b      	uxth	r3, r3
 8004496:	3b01      	subs	r3, #1
 8004498:	b29a      	uxth	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	691a      	ldr	r2, [r3, #16]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	b2d2      	uxtb	r2, r2
 80044aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	1c5a      	adds	r2, r3, #1
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ba:	3b01      	subs	r3, #1
 80044bc:	b29a      	uxth	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	3b01      	subs	r3, #1
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044d0:	e0b8      	b.n	8004644 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d8:	2200      	movs	r2, #0
 80044da:	4966      	ldr	r1, [pc, #408]	; (8004674 <HAL_I2C_Master_Receive+0x448>)
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 fa1b 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e0bf      	b.n	800466c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691a      	ldr	r2, [r3, #16]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450e:	1c5a      	adds	r2, r3, #1
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004518:	3b01      	subs	r3, #1
 800451a:	b29a      	uxth	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004524:	b29b      	uxth	r3, r3
 8004526:	3b01      	subs	r3, #1
 8004528:	b29a      	uxth	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004534:	2200      	movs	r2, #0
 8004536:	494f      	ldr	r1, [pc, #316]	; (8004674 <HAL_I2C_Master_Receive+0x448>)
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 f9ed 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e091      	b.n	800466c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004556:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	691a      	ldr	r2, [r3, #16]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	1c5a      	adds	r2, r3, #1
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004574:	3b01      	subs	r3, #1
 8004576:	b29a      	uxth	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004580:	b29b      	uxth	r3, r3
 8004582:	3b01      	subs	r3, #1
 8004584:	b29a      	uxth	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	b2d2      	uxtb	r2, r2
 8004596:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	1c5a      	adds	r2, r3, #1
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045bc:	e042      	b.n	8004644 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 fb00 	bl	8004bc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e04c      	b.n	800466c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	691a      	ldr	r2, [r3, #16]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	b2d2      	uxtb	r2, r2
 80045de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	1c5a      	adds	r2, r3, #1
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ee:	3b01      	subs	r3, #1
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29a      	uxth	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	f003 0304 	and.w	r3, r3, #4
 800460e:	2b04      	cmp	r3, #4
 8004610:	d118      	bne.n	8004644 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	b2d2      	uxtb	r2, r2
 800461e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800462e:	3b01      	subs	r3, #1
 8004630:	b29a      	uxth	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463a:	b29b      	uxth	r3, r3
 800463c:	3b01      	subs	r3, #1
 800463e:	b29a      	uxth	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004648:	2b00      	cmp	r3, #0
 800464a:	f47f aec2 	bne.w	80043d2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2220      	movs	r2, #32
 8004652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	e000      	b.n	800466c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800466a:	2302      	movs	r3, #2
  }
}
 800466c:	4618      	mov	r0, r3
 800466e:	3728      	adds	r7, #40	; 0x28
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	00010004 	.word	0x00010004

08004678 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b088      	sub	sp, #32
 800467c:	af02      	add	r7, sp, #8
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	607a      	str	r2, [r7, #4]
 8004682:	603b      	str	r3, [r7, #0]
 8004684:	460b      	mov	r3, r1
 8004686:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	2b08      	cmp	r3, #8
 8004692:	d006      	beq.n	80046a2 <I2C_MasterRequestWrite+0x2a>
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d003      	beq.n	80046a2 <I2C_MasterRequestWrite+0x2a>
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046a0:	d108      	bne.n	80046b4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	e00b      	b.n	80046cc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b8:	2b12      	cmp	r3, #18
 80046ba:	d107      	bne.n	80046cc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 f91d 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00d      	beq.n	8004700 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046f2:	d103      	bne.n	80046fc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e035      	b.n	800476c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004708:	d108      	bne.n	800471c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800470a:	897b      	ldrh	r3, [r7, #10]
 800470c:	b2db      	uxtb	r3, r3
 800470e:	461a      	mov	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004718:	611a      	str	r2, [r3, #16]
 800471a:	e01b      	b.n	8004754 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800471c:	897b      	ldrh	r3, [r7, #10]
 800471e:	11db      	asrs	r3, r3, #7
 8004720:	b2db      	uxtb	r3, r3
 8004722:	f003 0306 	and.w	r3, r3, #6
 8004726:	b2db      	uxtb	r3, r3
 8004728:	f063 030f 	orn	r3, r3, #15
 800472c:	b2da      	uxtb	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	490e      	ldr	r1, [pc, #56]	; (8004774 <I2C_MasterRequestWrite+0xfc>)
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 f943 	bl	80049c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e010      	b.n	800476c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800474a:	897b      	ldrh	r3, [r7, #10]
 800474c:	b2da      	uxtb	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	4907      	ldr	r1, [pc, #28]	; (8004778 <I2C_MasterRequestWrite+0x100>)
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 f933 	bl	80049c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e000      	b.n	800476c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3718      	adds	r7, #24
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	00010008 	.word	0x00010008
 8004778:	00010002 	.word	0x00010002

0800477c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af02      	add	r7, sp, #8
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	607a      	str	r2, [r7, #4]
 8004786:	603b      	str	r3, [r7, #0]
 8004788:	460b      	mov	r3, r1
 800478a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004790:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047a0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d006      	beq.n	80047b6 <I2C_MasterRequestRead+0x3a>
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d003      	beq.n	80047b6 <I2C_MasterRequestRead+0x3a>
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047b4:	d108      	bne.n	80047c8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	e00b      	b.n	80047e0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047cc:	2b11      	cmp	r3, #17
 80047ce:	d107      	bne.n	80047e0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 f893 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00d      	beq.n	8004814 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004806:	d103      	bne.n	8004810 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800480e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e079      	b.n	8004908 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800481c:	d108      	bne.n	8004830 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800481e:	897b      	ldrh	r3, [r7, #10]
 8004820:	b2db      	uxtb	r3, r3
 8004822:	f043 0301 	orr.w	r3, r3, #1
 8004826:	b2da      	uxtb	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	611a      	str	r2, [r3, #16]
 800482e:	e05f      	b.n	80048f0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004830:	897b      	ldrh	r3, [r7, #10]
 8004832:	11db      	asrs	r3, r3, #7
 8004834:	b2db      	uxtb	r3, r3
 8004836:	f003 0306 	and.w	r3, r3, #6
 800483a:	b2db      	uxtb	r3, r3
 800483c:	f063 030f 	orn	r3, r3, #15
 8004840:	b2da      	uxtb	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	4930      	ldr	r1, [pc, #192]	; (8004910 <I2C_MasterRequestRead+0x194>)
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 f8b9 	bl	80049c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e054      	b.n	8004908 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800485e:	897b      	ldrh	r3, [r7, #10]
 8004860:	b2da      	uxtb	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	4929      	ldr	r1, [pc, #164]	; (8004914 <I2C_MasterRequestRead+0x198>)
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 f8a9 	bl	80049c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e044      	b.n	8004908 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800487e:	2300      	movs	r3, #0
 8004880:	613b      	str	r3, [r7, #16]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	613b      	str	r3, [r7, #16]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	613b      	str	r3, [r7, #16]
 8004892:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048a2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f000 f831 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00d      	beq.n	80048d8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ca:	d103      	bne.n	80048d4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048d2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e017      	b.n	8004908 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80048d8:	897b      	ldrh	r3, [r7, #10]
 80048da:	11db      	asrs	r3, r3, #7
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	f003 0306 	and.w	r3, r3, #6
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	f063 030e 	orn	r3, r3, #14
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	4907      	ldr	r1, [pc, #28]	; (8004914 <I2C_MasterRequestRead+0x198>)
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 f865 	bl	80049c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3718      	adds	r7, #24
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	00010008 	.word	0x00010008
 8004914:	00010002 	.word	0x00010002

08004918 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	603b      	str	r3, [r7, #0]
 8004924:	4613      	mov	r3, r2
 8004926:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004928:	e025      	b.n	8004976 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004930:	d021      	beq.n	8004976 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004932:	f7fc ff3f 	bl	80017b4 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d302      	bcc.n	8004948 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d116      	bne.n	8004976 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2220      	movs	r2, #32
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	f043 0220 	orr.w	r2, r3, #32
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e023      	b.n	80049be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	0c1b      	lsrs	r3, r3, #16
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b01      	cmp	r3, #1
 800497e:	d10d      	bne.n	800499c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	43da      	mvns	r2, r3
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	4013      	ands	r3, r2
 800498c:	b29b      	uxth	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	bf0c      	ite	eq
 8004992:	2301      	moveq	r3, #1
 8004994:	2300      	movne	r3, #0
 8004996:	b2db      	uxtb	r3, r3
 8004998:	461a      	mov	r2, r3
 800499a:	e00c      	b.n	80049b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	43da      	mvns	r2, r3
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	4013      	ands	r3, r2
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	bf0c      	ite	eq
 80049ae:	2301      	moveq	r3, #1
 80049b0:	2300      	movne	r3, #0
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	461a      	mov	r2, r3
 80049b6:	79fb      	ldrb	r3, [r7, #7]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d0b6      	beq.n	800492a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b084      	sub	sp, #16
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	60f8      	str	r0, [r7, #12]
 80049ce:	60b9      	str	r1, [r7, #8]
 80049d0:	607a      	str	r2, [r7, #4]
 80049d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049d4:	e051      	b.n	8004a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049e4:	d123      	bne.n	8004a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	f043 0204 	orr.w	r2, r3, #4
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e046      	b.n	8004abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a34:	d021      	beq.n	8004a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a36:	f7fc febd 	bl	80017b4 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d302      	bcc.n	8004a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d116      	bne.n	8004a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2220      	movs	r2, #32
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	f043 0220 	orr.w	r2, r3, #32
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e020      	b.n	8004abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	0c1b      	lsrs	r3, r3, #16
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d10c      	bne.n	8004a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	43da      	mvns	r2, r3
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	bf14      	ite	ne
 8004a96:	2301      	movne	r3, #1
 8004a98:	2300      	moveq	r3, #0
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	e00b      	b.n	8004ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	43da      	mvns	r2, r3
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	bf14      	ite	ne
 8004ab0:	2301      	movne	r3, #1
 8004ab2:	2300      	moveq	r3, #0
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d18d      	bne.n	80049d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ad0:	e02d      	b.n	8004b2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 f8ce 	bl	8004c74 <I2C_IsAcknowledgeFailed>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e02d      	b.n	8004b3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ae8:	d021      	beq.n	8004b2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aea:	f7fc fe63 	bl	80017b4 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d302      	bcc.n	8004b00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d116      	bne.n	8004b2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	f043 0220 	orr.w	r2, r3, #32
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e007      	b.n	8004b3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b38:	2b80      	cmp	r3, #128	; 0x80
 8004b3a:	d1ca      	bne.n	8004ad2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b52:	e02d      	b.n	8004bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f000 f88d 	bl	8004c74 <I2C_IsAcknowledgeFailed>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e02d      	b.n	8004bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b6a:	d021      	beq.n	8004bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6c:	f7fc fe22 	bl	80017b4 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d302      	bcc.n	8004b82 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d116      	bne.n	8004bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	f043 0220 	orr.w	r2, r3, #32
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e007      	b.n	8004bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	f003 0304 	and.w	r3, r3, #4
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	d1ca      	bne.n	8004b54 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bd4:	e042      	b.n	8004c5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	f003 0310 	and.w	r3, r3, #16
 8004be0:	2b10      	cmp	r3, #16
 8004be2:	d119      	bne.n	8004c18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0210 	mvn.w	r2, #16
 8004bec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e029      	b.n	8004c6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c18:	f7fc fdcc 	bl	80017b4 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d302      	bcc.n	8004c2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d116      	bne.n	8004c5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c48:	f043 0220 	orr.w	r2, r3, #32
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e007      	b.n	8004c6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c66:	2b40      	cmp	r3, #64	; 0x40
 8004c68:	d1b5      	bne.n	8004bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c8a:	d11b      	bne.n	8004cc4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	f043 0204 	orr.w	r2, r3, #4
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e000      	b.n	8004cc6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
	...

08004cd4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b088      	sub	sp, #32
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e128      	b.n	8004f38 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d109      	bne.n	8004d06 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a90      	ldr	r2, [pc, #576]	; (8004f40 <HAL_I2S_Init+0x26c>)
 8004cfe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7fc fb83 	bl	800140c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2202      	movs	r2, #2
 8004d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	69db      	ldr	r3, [r3, #28]
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6812      	ldr	r2, [r2, #0]
 8004d18:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004d1c:	f023 030f 	bic.w	r3, r3, #15
 8004d20:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2202      	movs	r2, #2
 8004d28:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d060      	beq.n	8004df4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d102      	bne.n	8004d40 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004d3a:	2310      	movs	r3, #16
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	e001      	b.n	8004d44 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004d40:	2320      	movs	r3, #32
 8004d42:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	2b20      	cmp	r3, #32
 8004d4a:	d802      	bhi.n	8004d52 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004d52:	2001      	movs	r0, #1
 8004d54:	f001 fdec 	bl	8006930 <HAL_RCCEx_GetPeriphCLKFreq>
 8004d58:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d62:	d125      	bne.n	8004db0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d010      	beq.n	8004d8e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d76:	4613      	mov	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	461a      	mov	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d88:	3305      	adds	r3, #5
 8004d8a:	613b      	str	r3, [r7, #16]
 8004d8c:	e01f      	b.n	8004dce <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	00db      	lsls	r3, r3, #3
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d98:	4613      	mov	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	461a      	mov	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004daa:	3305      	adds	r3, #5
 8004dac:	613b      	str	r3, [r7, #16]
 8004dae:	e00e      	b.n	8004dce <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004db8:	4613      	mov	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dca:	3305      	adds	r3, #5
 8004dcc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	4a5c      	ldr	r2, [pc, #368]	; (8004f44 <HAL_I2S_Init+0x270>)
 8004dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd6:	08db      	lsrs	r3, r3, #3
 8004dd8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	085b      	lsrs	r3, r3, #1
 8004dea:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	021b      	lsls	r3, r3, #8
 8004df0:	61bb      	str	r3, [r7, #24]
 8004df2:	e003      	b.n	8004dfc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004df4:	2302      	movs	r3, #2
 8004df6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d902      	bls.n	8004e08 <HAL_I2S_Init+0x134>
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	2bff      	cmp	r3, #255	; 0xff
 8004e06:	d907      	bls.n	8004e18 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0c:	f043 0210 	orr.w	r2, r3, #16
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e08f      	b.n	8004f38 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691a      	ldr	r2, [r3, #16]
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	ea42 0103 	orr.w	r1, r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69fa      	ldr	r2, [r7, #28]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004e36:	f023 030f 	bic.w	r3, r3, #15
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	6851      	ldr	r1, [r2, #4]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6892      	ldr	r2, [r2, #8]
 8004e42:	4311      	orrs	r1, r2
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	68d2      	ldr	r2, [r2, #12]
 8004e48:	4311      	orrs	r1, r2
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6992      	ldr	r2, [r2, #24]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e5a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d161      	bne.n	8004f28 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a38      	ldr	r2, [pc, #224]	; (8004f48 <HAL_I2S_Init+0x274>)
 8004e68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a37      	ldr	r2, [pc, #220]	; (8004f4c <HAL_I2S_Init+0x278>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d101      	bne.n	8004e78 <HAL_I2S_Init+0x1a4>
 8004e74:	4b36      	ldr	r3, [pc, #216]	; (8004f50 <HAL_I2S_Init+0x27c>)
 8004e76:	e001      	b.n	8004e7c <HAL_I2S_Init+0x1a8>
 8004e78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	6812      	ldr	r2, [r2, #0]
 8004e82:	4932      	ldr	r1, [pc, #200]	; (8004f4c <HAL_I2S_Init+0x278>)
 8004e84:	428a      	cmp	r2, r1
 8004e86:	d101      	bne.n	8004e8c <HAL_I2S_Init+0x1b8>
 8004e88:	4a31      	ldr	r2, [pc, #196]	; (8004f50 <HAL_I2S_Init+0x27c>)
 8004e8a:	e001      	b.n	8004e90 <HAL_I2S_Init+0x1bc>
 8004e8c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004e90:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004e94:	f023 030f 	bic.w	r3, r3, #15
 8004e98:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a2b      	ldr	r2, [pc, #172]	; (8004f4c <HAL_I2S_Init+0x278>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d101      	bne.n	8004ea8 <HAL_I2S_Init+0x1d4>
 8004ea4:	4b2a      	ldr	r3, [pc, #168]	; (8004f50 <HAL_I2S_Init+0x27c>)
 8004ea6:	e001      	b.n	8004eac <HAL_I2S_Init+0x1d8>
 8004ea8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004eac:	2202      	movs	r2, #2
 8004eae:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a25      	ldr	r2, [pc, #148]	; (8004f4c <HAL_I2S_Init+0x278>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d101      	bne.n	8004ebe <HAL_I2S_Init+0x1ea>
 8004eba:	4b25      	ldr	r3, [pc, #148]	; (8004f50 <HAL_I2S_Init+0x27c>)
 8004ebc:	e001      	b.n	8004ec2 <HAL_I2S_Init+0x1ee>
 8004ebe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ec2:	69db      	ldr	r3, [r3, #28]
 8004ec4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ece:	d003      	beq.n	8004ed8 <HAL_I2S_Init+0x204>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d103      	bne.n	8004ee0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004ed8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004edc:	613b      	str	r3, [r7, #16]
 8004ede:	e001      	b.n	8004ee4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004f02:	4313      	orrs	r3, r2
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	897b      	ldrh	r3, [r7, #10]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f10:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a0d      	ldr	r2, [pc, #52]	; (8004f4c <HAL_I2S_Init+0x278>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d101      	bne.n	8004f20 <HAL_I2S_Init+0x24c>
 8004f1c:	4b0c      	ldr	r3, [pc, #48]	; (8004f50 <HAL_I2S_Init+0x27c>)
 8004f1e:	e001      	b.n	8004f24 <HAL_I2S_Init+0x250>
 8004f20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f24:	897a      	ldrh	r2, [r7, #10]
 8004f26:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3720      	adds	r7, #32
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	080057d1 	.word	0x080057d1
 8004f44:	cccccccd 	.word	0xcccccccd
 8004f48:	08005959 	.word	0x08005959
 8004f4c:	40003800 	.word	0x40003800
 8004f50:	40003400 	.word	0x40003400

08004f54 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <HAL_I2S_Transmit_DMA+0x1a>
 8004f68:	88fb      	ldrh	r3, [r7, #6]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e08e      	b.n	8005090 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d101      	bne.n	8004f82 <HAL_I2S_Transmit_DMA+0x2e>
 8004f7e:	2302      	movs	r3, #2
 8004f80:	e086      	b.n	8005090 <HAL_I2S_Transmit_DMA+0x13c>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d005      	beq.n	8004fa2 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	e076      	b.n	8005090 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2203      	movs	r2, #3
 8004fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	69db      	ldr	r3, [r3, #28]
 8004fbc:	f003 0307 	and.w	r3, r3, #7
 8004fc0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2b03      	cmp	r3, #3
 8004fc6:	d002      	beq.n	8004fce <HAL_I2S_Transmit_DMA+0x7a>
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	2b05      	cmp	r3, #5
 8004fcc:	d10a      	bne.n	8004fe4 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8004fce:	88fb      	ldrh	r3, [r7, #6]
 8004fd0:	005b      	lsls	r3, r3, #1
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8004fd8:	88fb      	ldrh	r3, [r7, #6]
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fe2:	e005      	b.n	8004ff0 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	88fa      	ldrh	r2, [r7, #6]
 8004fe8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	88fa      	ldrh	r2, [r7, #6]
 8004fee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff4:	4a28      	ldr	r2, [pc, #160]	; (8005098 <HAL_I2S_Transmit_DMA+0x144>)
 8004ff6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffc:	4a27      	ldr	r2, [pc, #156]	; (800509c <HAL_I2S_Transmit_DMA+0x148>)
 8004ffe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005004:	4a26      	ldr	r2, [pc, #152]	; (80050a0 <HAL_I2S_Transmit_DMA+0x14c>)
 8005006:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005010:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005018:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005020:	f7fc fdb8 	bl	8001b94 <HAL_DMA_Start_IT>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00f      	beq.n	800504a <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502e:	f043 0208 	orr.w	r2, r3, #8
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e022      	b.n	8005090 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	69db      	ldr	r3, [r3, #28]
 8005050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005054:	2b00      	cmp	r3, #0
 8005056:	d107      	bne.n	8005068 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	69da      	ldr	r2, [r3, #28]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005066:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d107      	bne.n	8005086 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f042 0202 	orr.w	r2, r2, #2
 8005084:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	080056af 	.word	0x080056af
 800509c:	0800566d 	.word	0x0800566d
 80050a0:	080056cb 	.word	0x080056cb

080050a4 <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d101      	bne.n	80050bc <HAL_I2S_DMAPause+0x18>
 80050b8:	2302      	movs	r3, #2
 80050ba:	e04a      	b.n	8005152 <HAL_I2S_DMAPause+0xae>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b03      	cmp	r3, #3
 80050ce:	d108      	bne.n	80050e2 <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0202 	bic.w	r2, r2, #2
 80050de:	605a      	str	r2, [r3, #4]
 80050e0:	e032      	b.n	8005148 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d108      	bne.n	8005100 <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f022 0201 	bic.w	r2, r2, #1
 80050fc:	605a      	str	r2, [r3, #4]
 80050fe:	e023      	b.n	8005148 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b05      	cmp	r3, #5
 800510a:	d11d      	bne.n	8005148 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 0203 	bic.w	r2, r2, #3
 800511a:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a0f      	ldr	r2, [pc, #60]	; (8005160 <HAL_I2S_DMAPause+0xbc>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d101      	bne.n	800512a <HAL_I2S_DMAPause+0x86>
 8005126:	4b0f      	ldr	r3, [pc, #60]	; (8005164 <HAL_I2S_DMAPause+0xc0>)
 8005128:	e001      	b.n	800512e <HAL_I2S_DMAPause+0x8a>
 800512a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	490a      	ldr	r1, [pc, #40]	; (8005160 <HAL_I2S_DMAPause+0xbc>)
 8005136:	428b      	cmp	r3, r1
 8005138:	d101      	bne.n	800513e <HAL_I2S_DMAPause+0x9a>
 800513a:	4b0a      	ldr	r3, [pc, #40]	; (8005164 <HAL_I2S_DMAPause+0xc0>)
 800513c:	e001      	b.n	8005142 <HAL_I2S_DMAPause+0x9e>
 800513e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005142:	f022 0203 	bic.w	r2, r2, #3
 8005146:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	40003800 	.word	0x40003800
 8005164:	40003400 	.word	0x40003400

08005168 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b01      	cmp	r3, #1
 800517a:	d101      	bne.n	8005180 <HAL_I2S_DMAResume+0x18>
 800517c:	2302      	movs	r3, #2
 800517e:	e07d      	b.n	800527c <HAL_I2S_DMAResume+0x114>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b03      	cmp	r3, #3
 8005192:	d108      	bne.n	80051a6 <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0202 	orr.w	r2, r2, #2
 80051a2:	605a      	str	r2, [r3, #4]
 80051a4:	e056      	b.n	8005254 <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	d108      	bne.n	80051c4 <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f042 0201 	orr.w	r2, r2, #1
 80051c0:	605a      	str	r2, [r3, #4]
 80051c2:	e047      	b.n	8005254 <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b05      	cmp	r3, #5
 80051ce:	d141      	bne.n	8005254 <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f042 0203 	orr.w	r2, r2, #3
 80051de:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a28      	ldr	r2, [pc, #160]	; (8005288 <HAL_I2S_DMAResume+0x120>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d101      	bne.n	80051ee <HAL_I2S_DMAResume+0x86>
 80051ea:	4b28      	ldr	r3, [pc, #160]	; (800528c <HAL_I2S_DMAResume+0x124>)
 80051ec:	e001      	b.n	80051f2 <HAL_I2S_DMAResume+0x8a>
 80051ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4923      	ldr	r1, [pc, #140]	; (8005288 <HAL_I2S_DMAResume+0x120>)
 80051fa:	428b      	cmp	r3, r1
 80051fc:	d101      	bne.n	8005202 <HAL_I2S_DMAResume+0x9a>
 80051fe:	4b23      	ldr	r3, [pc, #140]	; (800528c <HAL_I2S_DMAResume+0x124>)
 8005200:	e001      	b.n	8005206 <HAL_I2S_DMAResume+0x9e>
 8005202:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005206:	f042 0203 	orr.w	r2, r2, #3
 800520a:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a1d      	ldr	r2, [pc, #116]	; (8005288 <HAL_I2S_DMAResume+0x120>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d101      	bne.n	800521a <HAL_I2S_DMAResume+0xb2>
 8005216:	4b1d      	ldr	r3, [pc, #116]	; (800528c <HAL_I2S_DMAResume+0x124>)
 8005218:	e001      	b.n	800521e <HAL_I2S_DMAResume+0xb6>
 800521a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800521e:	69db      	ldr	r3, [r3, #28]
 8005220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005224:	2b00      	cmp	r3, #0
 8005226:	d115      	bne.n	8005254 <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a16      	ldr	r2, [pc, #88]	; (8005288 <HAL_I2S_DMAResume+0x120>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d101      	bne.n	8005236 <HAL_I2S_DMAResume+0xce>
 8005232:	4b16      	ldr	r3, [pc, #88]	; (800528c <HAL_I2S_DMAResume+0x124>)
 8005234:	e001      	b.n	800523a <HAL_I2S_DMAResume+0xd2>
 8005236:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800523a:	69da      	ldr	r2, [r3, #28]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4911      	ldr	r1, [pc, #68]	; (8005288 <HAL_I2S_DMAResume+0x120>)
 8005242:	428b      	cmp	r3, r1
 8005244:	d101      	bne.n	800524a <HAL_I2S_DMAResume+0xe2>
 8005246:	4b11      	ldr	r3, [pc, #68]	; (800528c <HAL_I2S_DMAResume+0x124>)
 8005248:	e001      	b.n	800524e <HAL_I2S_DMAResume+0xe6>
 800524a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800524e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005252:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800525e:	2b00      	cmp	r3, #0
 8005260:	d107      	bne.n	8005272 <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	69da      	ldr	r2, [r3, #28]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005270:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	40003800 	.word	0x40003800
 800528c:	40003400 	.word	0x40003400

08005290 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b088      	sub	sp, #32
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005298:	2300      	movs	r3, #0
 800529a:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052a4:	d004      	beq.n	80052b0 <HAL_I2S_DMAStop+0x20>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f040 80d1 	bne.w	8005452 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00f      	beq.n	80052d8 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052bc:	4618      	mov	r0, r3
 80052be:	f7fc fcc1 	bl	8001c44 <HAL_DMA_Abort>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d007      	beq.n	80052d8 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052cc:	f043 0208 	orr.w	r2, r3, #8
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80052d8:	2364      	movs	r3, #100	; 0x64
 80052da:	2201      	movs	r2, #1
 80052dc:	2102      	movs	r1, #2
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fb00 	bl	80058e4 <I2S_WaitFlagStateUntilTimeout>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00b      	beq.n	8005302 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ee:	f043 0201 	orr.w	r2, r3, #1
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005302:	2364      	movs	r3, #100	; 0x64
 8005304:	2200      	movs	r2, #0
 8005306:	2180      	movs	r1, #128	; 0x80
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 faeb 	bl	80058e4 <I2S_WaitFlagStateUntilTimeout>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00b      	beq.n	800532c <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005318:	f043 0201 	orr.w	r2, r3, #1
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	69da      	ldr	r2, [r3, #28]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800533a:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800533c:	2300      	movs	r3, #0
 800533e:	617b      	str	r3, [r7, #20]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0202 	bic.w	r2, r2, #2
 8005358:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b05      	cmp	r3, #5
 8005364:	f040 8165 	bne.w	8005632 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00f      	beq.n	8005390 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005374:	4618      	mov	r0, r3
 8005376:	f7fc fc65 	bl	8001c44 <HAL_DMA_Abort>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d007      	beq.n	8005390 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005384:	f043 0208 	orr.w	r2, r3, #8
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a8a      	ldr	r2, [pc, #552]	; (80055c0 <HAL_I2S_DMAStop+0x330>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d101      	bne.n	800539e <HAL_I2S_DMAStop+0x10e>
 800539a:	4b8a      	ldr	r3, [pc, #552]	; (80055c4 <HAL_I2S_DMAStop+0x334>)
 800539c:	e001      	b.n	80053a2 <HAL_I2S_DMAStop+0x112>
 800539e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053a2:	69da      	ldr	r2, [r3, #28]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4985      	ldr	r1, [pc, #532]	; (80055c0 <HAL_I2S_DMAStop+0x330>)
 80053aa:	428b      	cmp	r3, r1
 80053ac:	d101      	bne.n	80053b2 <HAL_I2S_DMAStop+0x122>
 80053ae:	4b85      	ldr	r3, [pc, #532]	; (80055c4 <HAL_I2S_DMAStop+0x334>)
 80053b0:	e001      	b.n	80053b6 <HAL_I2S_DMAStop+0x126>
 80053b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ba:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 80053bc:	2300      	movs	r3, #0
 80053be:	613b      	str	r3, [r7, #16]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a7e      	ldr	r2, [pc, #504]	; (80055c0 <HAL_I2S_DMAStop+0x330>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d101      	bne.n	80053ce <HAL_I2S_DMAStop+0x13e>
 80053ca:	4b7e      	ldr	r3, [pc, #504]	; (80055c4 <HAL_I2S_DMAStop+0x334>)
 80053cc:	e001      	b.n	80053d2 <HAL_I2S_DMAStop+0x142>
 80053ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	613b      	str	r3, [r7, #16]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a79      	ldr	r2, [pc, #484]	; (80055c0 <HAL_I2S_DMAStop+0x330>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d101      	bne.n	80053e4 <HAL_I2S_DMAStop+0x154>
 80053e0:	4b78      	ldr	r3, [pc, #480]	; (80055c4 <HAL_I2S_DMAStop+0x334>)
 80053e2:	e001      	b.n	80053e8 <HAL_I2S_DMAStop+0x158>
 80053e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	613b      	str	r3, [r7, #16]
 80053ec:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a73      	ldr	r2, [pc, #460]	; (80055c0 <HAL_I2S_DMAStop+0x330>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d101      	bne.n	80053fc <HAL_I2S_DMAStop+0x16c>
 80053f8:	4b72      	ldr	r3, [pc, #456]	; (80055c4 <HAL_I2S_DMAStop+0x334>)
 80053fa:	e001      	b.n	8005400 <HAL_I2S_DMAStop+0x170>
 80053fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	496e      	ldr	r1, [pc, #440]	; (80055c0 <HAL_I2S_DMAStop+0x330>)
 8005408:	428b      	cmp	r3, r1
 800540a:	d101      	bne.n	8005410 <HAL_I2S_DMAStop+0x180>
 800540c:	4b6d      	ldr	r3, [pc, #436]	; (80055c4 <HAL_I2S_DMAStop+0x334>)
 800540e:	e001      	b.n	8005414 <HAL_I2S_DMAStop+0x184>
 8005410:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005414:	f022 0201 	bic.w	r2, r2, #1
 8005418:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10c      	bne.n	800543c <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005426:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800543a:	e0fa      	b.n	8005632 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a5f      	ldr	r2, [pc, #380]	; (80055c0 <HAL_I2S_DMAStop+0x330>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d101      	bne.n	800544a <HAL_I2S_DMAStop+0x1ba>
 8005446:	4b5f      	ldr	r3, [pc, #380]	; (80055c4 <HAL_I2S_DMAStop+0x334>)
 8005448:	e001      	b.n	800544e <HAL_I2S_DMAStop+0x1be>
 800544a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800544e:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005450:	e0ef      	b.n	8005632 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800545a:	d005      	beq.n	8005468 <HAL_I2S_DMAStop+0x1d8>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005464:	f040 80e5 	bne.w	8005632 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00f      	beq.n	8005490 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005474:	4618      	mov	r0, r3
 8005476:	f7fc fbe5 	bl	8001c44 <HAL_DMA_Abort>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d007      	beq.n	8005490 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005484:	f043 0208 	orr.w	r2, r3, #8
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b05      	cmp	r3, #5
 800549a:	f040 809a 	bne.w	80055d2 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00f      	beq.n	80054c6 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7fc fbca 	bl	8001c44 <HAL_DMA_Abort>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d007      	beq.n	80054c6 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ba:	f043 0208 	orr.w	r2, r3, #8
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 80054c6:	f7fc f975 	bl	80017b4 <HAL_GetTick>
 80054ca:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80054cc:	e012      	b.n	80054f4 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80054ce:	f7fc f971 	bl	80017b4 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b64      	cmp	r3, #100	; 0x64
 80054da:	d90b      	bls.n	80054f4 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e0:	f043 0201 	orr.w	r2, r3, #1
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a31      	ldr	r2, [pc, #196]	; (80055c0 <HAL_I2S_DMAStop+0x330>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d101      	bne.n	8005502 <HAL_I2S_DMAStop+0x272>
 80054fe:	4b31      	ldr	r3, [pc, #196]	; (80055c4 <HAL_I2S_DMAStop+0x334>)
 8005500:	e001      	b.n	8005506 <HAL_I2S_DMAStop+0x276>
 8005502:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b02      	cmp	r3, #2
 800550e:	d1de      	bne.n	80054ce <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005510:	e012      	b.n	8005538 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8005512:	f7fc f94f 	bl	80017b4 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b64      	cmp	r3, #100	; 0x64
 800551e:	d90b      	bls.n	8005538 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005524:	f043 0201 	orr.w	r2, r3, #1
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a20      	ldr	r2, [pc, #128]	; (80055c0 <HAL_I2S_DMAStop+0x330>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d101      	bne.n	8005546 <HAL_I2S_DMAStop+0x2b6>
 8005542:	4b20      	ldr	r3, [pc, #128]	; (80055c4 <HAL_I2S_DMAStop+0x334>)
 8005544:	e001      	b.n	800554a <HAL_I2S_DMAStop+0x2ba>
 8005546:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005550:	2b80      	cmp	r3, #128	; 0x80
 8005552:	d0de      	beq.n	8005512 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a19      	ldr	r2, [pc, #100]	; (80055c0 <HAL_I2S_DMAStop+0x330>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d101      	bne.n	8005562 <HAL_I2S_DMAStop+0x2d2>
 800555e:	4b19      	ldr	r3, [pc, #100]	; (80055c4 <HAL_I2S_DMAStop+0x334>)
 8005560:	e001      	b.n	8005566 <HAL_I2S_DMAStop+0x2d6>
 8005562:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005566:	69da      	ldr	r2, [r3, #28]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4914      	ldr	r1, [pc, #80]	; (80055c0 <HAL_I2S_DMAStop+0x330>)
 800556e:	428b      	cmp	r3, r1
 8005570:	d101      	bne.n	8005576 <HAL_I2S_DMAStop+0x2e6>
 8005572:	4b14      	ldr	r3, [pc, #80]	; (80055c4 <HAL_I2S_DMAStop+0x334>)
 8005574:	e001      	b.n	800557a <HAL_I2S_DMAStop+0x2ea>
 8005576:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800557a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800557e:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8005580:	2300      	movs	r3, #0
 8005582:	60fb      	str	r3, [r7, #12]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a0d      	ldr	r2, [pc, #52]	; (80055c0 <HAL_I2S_DMAStop+0x330>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d101      	bne.n	8005592 <HAL_I2S_DMAStop+0x302>
 800558e:	4b0d      	ldr	r3, [pc, #52]	; (80055c4 <HAL_I2S_DMAStop+0x334>)
 8005590:	e001      	b.n	8005596 <HAL_I2S_DMAStop+0x306>
 8005592:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	60fb      	str	r3, [r7, #12]
 800559a:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a07      	ldr	r2, [pc, #28]	; (80055c0 <HAL_I2S_DMAStop+0x330>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d101      	bne.n	80055aa <HAL_I2S_DMAStop+0x31a>
 80055a6:	4b07      	ldr	r3, [pc, #28]	; (80055c4 <HAL_I2S_DMAStop+0x334>)
 80055a8:	e001      	b.n	80055ae <HAL_I2S_DMAStop+0x31e>
 80055aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4902      	ldr	r1, [pc, #8]	; (80055c0 <HAL_I2S_DMAStop+0x330>)
 80055b6:	428b      	cmp	r3, r1
 80055b8:	d106      	bne.n	80055c8 <HAL_I2S_DMAStop+0x338>
 80055ba:	4b02      	ldr	r3, [pc, #8]	; (80055c4 <HAL_I2S_DMAStop+0x334>)
 80055bc:	e006      	b.n	80055cc <HAL_I2S_DMAStop+0x33c>
 80055be:	bf00      	nop
 80055c0:	40003800 	.word	0x40003800
 80055c4:	40003400 	.word	0x40003400
 80055c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055cc:	f022 0202 	bic.w	r2, r2, #2
 80055d0:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	69da      	ldr	r2, [r3, #28]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055e0:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80055e2:	2300      	movs	r3, #0
 80055e4:	60bb      	str	r3, [r7, #8]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	60bb      	str	r3, [r7, #8]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	60bb      	str	r3, [r7, #8]
 80055f6:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0201 	bic.w	r2, r2, #1
 8005606:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005610:	d10c      	bne.n	800562c <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005616:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	77fb      	strb	r3, [r7, #31]
 800562a:	e002      	b.n	8005632 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 800563a:	7ffb      	ldrb	r3, [r7, #31]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3720      	adds	r7, #32
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005678:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10e      	bne.n	80056a0 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0202 	bic.w	r2, r2, #2
 8005690:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f7fb fa55 	bl	8000b50 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80056a6:	bf00      	nop
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b084      	sub	sp, #16
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f7fb fa59 	bl	8000b74 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80056c2:	bf00      	nop
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b084      	sub	sp, #16
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f022 0203 	bic.w	r2, r2, #3
 80056e6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005700:	f043 0208 	orr.w	r2, r3, #8
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f7ff ffa5 	bl	8005658 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800570e:	bf00      	nop
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b082      	sub	sp, #8
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	881a      	ldrh	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	1c9a      	adds	r2, r3, #2
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005738:	b29b      	uxth	r3, r3
 800573a:	3b01      	subs	r3, #1
 800573c:	b29a      	uxth	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005746:	b29b      	uxth	r3, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10e      	bne.n	800576a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800575a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f7fb f9f3 	bl	8000b50 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800576a:	bf00      	nop
 800576c:	3708      	adds	r7, #8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b082      	sub	sp, #8
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68da      	ldr	r2, [r3, #12]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005784:	b292      	uxth	r2, r2
 8005786:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578c:	1c9a      	adds	r2, r3, #2
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005796:	b29b      	uxth	r3, r3
 8005798:	3b01      	subs	r3, #1
 800579a:	b29a      	uxth	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10e      	bne.n	80057c8 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80057b8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7ff ff3e 	bl	8005644 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80057c8:	bf00      	nop
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b04      	cmp	r3, #4
 80057ea:	d13a      	bne.n	8005862 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d109      	bne.n	800580a <I2S_IRQHandler+0x3a>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005800:	2b40      	cmp	r3, #64	; 0x40
 8005802:	d102      	bne.n	800580a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7ff ffb4 	bl	8005772 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005810:	2b40      	cmp	r3, #64	; 0x40
 8005812:	d126      	bne.n	8005862 <I2S_IRQHandler+0x92>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f003 0320 	and.w	r3, r3, #32
 800581e:	2b20      	cmp	r3, #32
 8005820:	d11f      	bne.n	8005862 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005830:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005832:	2300      	movs	r3, #0
 8005834:	613b      	str	r3, [r7, #16]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	613b      	str	r3, [r7, #16]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	613b      	str	r3, [r7, #16]
 8005846:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005854:	f043 0202 	orr.w	r2, r3, #2
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7ff fefb 	bl	8005658 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b03      	cmp	r3, #3
 800586c:	d136      	bne.n	80058dc <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b02      	cmp	r3, #2
 8005876:	d109      	bne.n	800588c <I2S_IRQHandler+0xbc>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005882:	2b80      	cmp	r3, #128	; 0x80
 8005884:	d102      	bne.n	800588c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7ff ff45 	bl	8005716 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f003 0308 	and.w	r3, r3, #8
 8005892:	2b08      	cmp	r3, #8
 8005894:	d122      	bne.n	80058dc <I2S_IRQHandler+0x10c>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f003 0320 	and.w	r3, r3, #32
 80058a0:	2b20      	cmp	r3, #32
 80058a2:	d11b      	bne.n	80058dc <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80058b2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80058b4:	2300      	movs	r3, #0
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ce:	f043 0204 	orr.w	r2, r3, #4
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7ff febe 	bl	8005658 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80058dc:	bf00      	nop
 80058de:	3718      	adds	r7, #24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	603b      	str	r3, [r7, #0]
 80058f0:	4613      	mov	r3, r2
 80058f2:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80058f4:	f7fb ff5e 	bl	80017b4 <HAL_GetTick>
 80058f8:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80058fa:	e018      	b.n	800592e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005902:	d014      	beq.n	800592e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8005904:	f7fb ff56 	bl	80017b4 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	429a      	cmp	r2, r3
 8005912:	d902      	bls.n	800591a <I2S_WaitFlagStateUntilTimeout+0x36>
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d109      	bne.n	800592e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e00f      	b.n	800594e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689a      	ldr	r2, [r3, #8]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	4013      	ands	r3, r2
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	429a      	cmp	r2, r3
 800593c:	bf0c      	ite	eq
 800593e:	2301      	moveq	r3, #1
 8005940:	2300      	movne	r3, #0
 8005942:	b2db      	uxtb	r3, r3
 8005944:	461a      	mov	r2, r3
 8005946:	79fb      	ldrb	r3, [r7, #7]
 8005948:	429a      	cmp	r2, r3
 800594a:	d1d7      	bne.n	80058fc <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3718      	adds	r7, #24
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
	...

08005958 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b088      	sub	sp, #32
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a92      	ldr	r2, [pc, #584]	; (8005bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d101      	bne.n	8005976 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005972:	4b92      	ldr	r3, [pc, #584]	; (8005bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005974:	e001      	b.n	800597a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005976:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a8b      	ldr	r2, [pc, #556]	; (8005bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d101      	bne.n	8005994 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005990:	4b8a      	ldr	r3, [pc, #552]	; (8005bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005992:	e001      	b.n	8005998 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005994:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059a4:	d004      	beq.n	80059b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f040 8099 	bne.w	8005ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d107      	bne.n	80059ca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f925 	bl	8005c14 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d107      	bne.n	80059e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d002      	beq.n	80059e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f9c8 	bl	8005d74 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ea:	2b40      	cmp	r3, #64	; 0x40
 80059ec:	d13a      	bne.n	8005a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f003 0320 	and.w	r3, r3, #32
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d035      	beq.n	8005a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a6e      	ldr	r2, [pc, #440]	; (8005bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d101      	bne.n	8005a06 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005a02:	4b6e      	ldr	r3, [pc, #440]	; (8005bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a04:	e001      	b.n	8005a0a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005a06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4969      	ldr	r1, [pc, #420]	; (8005bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a12:	428b      	cmp	r3, r1
 8005a14:	d101      	bne.n	8005a1a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005a16:	4b69      	ldr	r3, [pc, #420]	; (8005bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a18:	e001      	b.n	8005a1e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005a1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005a22:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a32:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005a34:	2300      	movs	r3, #0
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	60fb      	str	r3, [r7, #12]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	60fb      	str	r3, [r7, #12]
 8005a48:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a56:	f043 0202 	orr.w	r2, r3, #2
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7ff fdfa 	bl	8005658 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	f003 0308 	and.w	r3, r3, #8
 8005a6a:	2b08      	cmp	r3, #8
 8005a6c:	f040 80c3 	bne.w	8005bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	f003 0320 	and.w	r3, r3, #32
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 80bd 	beq.w	8005bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a8a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a49      	ldr	r2, [pc, #292]	; (8005bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d101      	bne.n	8005a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005a96:	4b49      	ldr	r3, [pc, #292]	; (8005bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a98:	e001      	b.n	8005a9e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005a9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4944      	ldr	r1, [pc, #272]	; (8005bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005aa6:	428b      	cmp	r3, r1
 8005aa8:	d101      	bne.n	8005aae <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005aaa:	4b44      	ldr	r3, [pc, #272]	; (8005bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005aac:	e001      	b.n	8005ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005aae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ab2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005ab6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005ab8:	2300      	movs	r3, #0
 8005aba:	60bb      	str	r3, [r7, #8]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	60bb      	str	r3, [r7, #8]
 8005ac4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad2:	f043 0204 	orr.w	r2, r3, #4
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7ff fdbc 	bl	8005658 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ae0:	e089      	b.n	8005bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d107      	bne.n	8005afc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d002      	beq.n	8005afc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f8be 	bl	8005c78 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d107      	bne.n	8005b16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f8fd 	bl	8005d10 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1c:	2b40      	cmp	r3, #64	; 0x40
 8005b1e:	d12f      	bne.n	8005b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	f003 0320 	and.w	r3, r3, #32
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d02a      	beq.n	8005b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005b38:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a1e      	ldr	r2, [pc, #120]	; (8005bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d101      	bne.n	8005b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005b44:	4b1d      	ldr	r3, [pc, #116]	; (8005bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b46:	e001      	b.n	8005b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005b48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4919      	ldr	r1, [pc, #100]	; (8005bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b54:	428b      	cmp	r3, r1
 8005b56:	d101      	bne.n	8005b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005b58:	4b18      	ldr	r3, [pc, #96]	; (8005bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b5a:	e001      	b.n	8005b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005b5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b64:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b72:	f043 0202 	orr.w	r2, r3, #2
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7ff fd6c 	bl	8005658 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	f003 0308 	and.w	r3, r3, #8
 8005b86:	2b08      	cmp	r3, #8
 8005b88:	d136      	bne.n	8005bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	f003 0320 	and.w	r3, r3, #32
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d031      	beq.n	8005bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a07      	ldr	r2, [pc, #28]	; (8005bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d101      	bne.n	8005ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005b9e:	4b07      	ldr	r3, [pc, #28]	; (8005bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ba0:	e001      	b.n	8005ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005ba2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4902      	ldr	r1, [pc, #8]	; (8005bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005bae:	428b      	cmp	r3, r1
 8005bb0:	d106      	bne.n	8005bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005bb2:	4b02      	ldr	r3, [pc, #8]	; (8005bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005bb4:	e006      	b.n	8005bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005bb6:	bf00      	nop
 8005bb8:	40003800 	.word	0x40003800
 8005bbc:	40003400 	.word	0x40003400
 8005bc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bc4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005bc8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005bd8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be6:	f043 0204 	orr.w	r2, r3, #4
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7ff fd32 	bl	8005658 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005bf4:	e000      	b.n	8005bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005bf6:	bf00      	nop
}
 8005bf8:	bf00      	nop
 8005bfa:	3720      	adds	r7, #32
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c20:	1c99      	adds	r1, r3, #2
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	6251      	str	r1, [r2, #36]	; 0x24
 8005c26:	881a      	ldrh	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	3b01      	subs	r3, #1
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d113      	bne.n	8005c6e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c54:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d106      	bne.n	8005c6e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f7ff ffc9 	bl	8005c00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c6e:	bf00      	nop
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
	...

08005c78 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c84:	1c99      	adds	r1, r3, #2
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	6251      	str	r1, [r2, #36]	; 0x24
 8005c8a:	8819      	ldrh	r1, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a1d      	ldr	r2, [pc, #116]	; (8005d08 <I2SEx_TxISR_I2SExt+0x90>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d101      	bne.n	8005c9a <I2SEx_TxISR_I2SExt+0x22>
 8005c96:	4b1d      	ldr	r3, [pc, #116]	; (8005d0c <I2SEx_TxISR_I2SExt+0x94>)
 8005c98:	e001      	b.n	8005c9e <I2SEx_TxISR_I2SExt+0x26>
 8005c9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c9e:	460a      	mov	r2, r1
 8005ca0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d121      	bne.n	8005cfe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a12      	ldr	r2, [pc, #72]	; (8005d08 <I2SEx_TxISR_I2SExt+0x90>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d101      	bne.n	8005cc8 <I2SEx_TxISR_I2SExt+0x50>
 8005cc4:	4b11      	ldr	r3, [pc, #68]	; (8005d0c <I2SEx_TxISR_I2SExt+0x94>)
 8005cc6:	e001      	b.n	8005ccc <I2SEx_TxISR_I2SExt+0x54>
 8005cc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	490d      	ldr	r1, [pc, #52]	; (8005d08 <I2SEx_TxISR_I2SExt+0x90>)
 8005cd4:	428b      	cmp	r3, r1
 8005cd6:	d101      	bne.n	8005cdc <I2SEx_TxISR_I2SExt+0x64>
 8005cd8:	4b0c      	ldr	r3, [pc, #48]	; (8005d0c <I2SEx_TxISR_I2SExt+0x94>)
 8005cda:	e001      	b.n	8005ce0 <I2SEx_TxISR_I2SExt+0x68>
 8005cdc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ce0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ce4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d106      	bne.n	8005cfe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7ff ff81 	bl	8005c00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005cfe:	bf00      	nop
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	40003800 	.word	0x40003800
 8005d0c:	40003400 	.word	0x40003400

08005d10 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68d8      	ldr	r0, [r3, #12]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d22:	1c99      	adds	r1, r3, #2
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005d28:	b282      	uxth	r2, r0
 8005d2a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	3b01      	subs	r3, #1
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d113      	bne.n	8005d6c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d52:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d106      	bne.n	8005d6c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7ff ff4a 	bl	8005c00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d6c:	bf00      	nop
 8005d6e:	3708      	adds	r7, #8
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a20      	ldr	r2, [pc, #128]	; (8005e04 <I2SEx_RxISR_I2SExt+0x90>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d101      	bne.n	8005d8a <I2SEx_RxISR_I2SExt+0x16>
 8005d86:	4b20      	ldr	r3, [pc, #128]	; (8005e08 <I2SEx_RxISR_I2SExt+0x94>)
 8005d88:	e001      	b.n	8005d8e <I2SEx_RxISR_I2SExt+0x1a>
 8005d8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d8e:	68d8      	ldr	r0, [r3, #12]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d94:	1c99      	adds	r1, r3, #2
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005d9a:	b282      	uxth	r2, r0
 8005d9c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	3b01      	subs	r3, #1
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d121      	bne.n	8005dfa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a12      	ldr	r2, [pc, #72]	; (8005e04 <I2SEx_RxISR_I2SExt+0x90>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d101      	bne.n	8005dc4 <I2SEx_RxISR_I2SExt+0x50>
 8005dc0:	4b11      	ldr	r3, [pc, #68]	; (8005e08 <I2SEx_RxISR_I2SExt+0x94>)
 8005dc2:	e001      	b.n	8005dc8 <I2SEx_RxISR_I2SExt+0x54>
 8005dc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	490d      	ldr	r1, [pc, #52]	; (8005e04 <I2SEx_RxISR_I2SExt+0x90>)
 8005dd0:	428b      	cmp	r3, r1
 8005dd2:	d101      	bne.n	8005dd8 <I2SEx_RxISR_I2SExt+0x64>
 8005dd4:	4b0c      	ldr	r3, [pc, #48]	; (8005e08 <I2SEx_RxISR_I2SExt+0x94>)
 8005dd6:	e001      	b.n	8005ddc <I2SEx_RxISR_I2SExt+0x68>
 8005dd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ddc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005de0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d106      	bne.n	8005dfa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f7ff ff03 	bl	8005c00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005dfa:	bf00      	nop
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	40003800 	.word	0x40003800
 8005e08:	40003400 	.word	0x40003400

08005e0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e267      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d075      	beq.n	8005f16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e2a:	4b88      	ldr	r3, [pc, #544]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f003 030c 	and.w	r3, r3, #12
 8005e32:	2b04      	cmp	r3, #4
 8005e34:	d00c      	beq.n	8005e50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e36:	4b85      	ldr	r3, [pc, #532]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e3e:	2b08      	cmp	r3, #8
 8005e40:	d112      	bne.n	8005e68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e42:	4b82      	ldr	r3, [pc, #520]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e4e:	d10b      	bne.n	8005e68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e50:	4b7e      	ldr	r3, [pc, #504]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d05b      	beq.n	8005f14 <HAL_RCC_OscConfig+0x108>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d157      	bne.n	8005f14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e242      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e70:	d106      	bne.n	8005e80 <HAL_RCC_OscConfig+0x74>
 8005e72:	4b76      	ldr	r3, [pc, #472]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a75      	ldr	r2, [pc, #468]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	e01d      	b.n	8005ebc <HAL_RCC_OscConfig+0xb0>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e88:	d10c      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x98>
 8005e8a:	4b70      	ldr	r3, [pc, #448]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a6f      	ldr	r2, [pc, #444]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	4b6d      	ldr	r3, [pc, #436]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a6c      	ldr	r2, [pc, #432]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	e00b      	b.n	8005ebc <HAL_RCC_OscConfig+0xb0>
 8005ea4:	4b69      	ldr	r3, [pc, #420]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a68      	ldr	r2, [pc, #416]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eae:	6013      	str	r3, [r2, #0]
 8005eb0:	4b66      	ldr	r3, [pc, #408]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a65      	ldr	r2, [pc, #404]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d013      	beq.n	8005eec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec4:	f7fb fc76 	bl	80017b4 <HAL_GetTick>
 8005ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eca:	e008      	b.n	8005ede <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ecc:	f7fb fc72 	bl	80017b4 <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	2b64      	cmp	r3, #100	; 0x64
 8005ed8:	d901      	bls.n	8005ede <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e207      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ede:	4b5b      	ldr	r3, [pc, #364]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d0f0      	beq.n	8005ecc <HAL_RCC_OscConfig+0xc0>
 8005eea:	e014      	b.n	8005f16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eec:	f7fb fc62 	bl	80017b4 <HAL_GetTick>
 8005ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ef2:	e008      	b.n	8005f06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ef4:	f7fb fc5e 	bl	80017b4 <HAL_GetTick>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	2b64      	cmp	r3, #100	; 0x64
 8005f00:	d901      	bls.n	8005f06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e1f3      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f06:	4b51      	ldr	r3, [pc, #324]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1f0      	bne.n	8005ef4 <HAL_RCC_OscConfig+0xe8>
 8005f12:	e000      	b.n	8005f16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d063      	beq.n	8005fea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f22:	4b4a      	ldr	r3, [pc, #296]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f003 030c 	and.w	r3, r3, #12
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00b      	beq.n	8005f46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f2e:	4b47      	ldr	r3, [pc, #284]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f36:	2b08      	cmp	r3, #8
 8005f38:	d11c      	bne.n	8005f74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f3a:	4b44      	ldr	r3, [pc, #272]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d116      	bne.n	8005f74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f46:	4b41      	ldr	r3, [pc, #260]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d005      	beq.n	8005f5e <HAL_RCC_OscConfig+0x152>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d001      	beq.n	8005f5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e1c7      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f5e:	4b3b      	ldr	r3, [pc, #236]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	00db      	lsls	r3, r3, #3
 8005f6c:	4937      	ldr	r1, [pc, #220]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f72:	e03a      	b.n	8005fea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d020      	beq.n	8005fbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f7c:	4b34      	ldr	r3, [pc, #208]	; (8006050 <HAL_RCC_OscConfig+0x244>)
 8005f7e:	2201      	movs	r2, #1
 8005f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f82:	f7fb fc17 	bl	80017b4 <HAL_GetTick>
 8005f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f88:	e008      	b.n	8005f9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f8a:	f7fb fc13 	bl	80017b4 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d901      	bls.n	8005f9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e1a8      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f9c:	4b2b      	ldr	r3, [pc, #172]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d0f0      	beq.n	8005f8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fa8:	4b28      	ldr	r3, [pc, #160]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	00db      	lsls	r3, r3, #3
 8005fb6:	4925      	ldr	r1, [pc, #148]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	600b      	str	r3, [r1, #0]
 8005fbc:	e015      	b.n	8005fea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fbe:	4b24      	ldr	r3, [pc, #144]	; (8006050 <HAL_RCC_OscConfig+0x244>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc4:	f7fb fbf6 	bl	80017b4 <HAL_GetTick>
 8005fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fca:	e008      	b.n	8005fde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fcc:	f7fb fbf2 	bl	80017b4 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d901      	bls.n	8005fde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e187      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fde:	4b1b      	ldr	r3, [pc, #108]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1f0      	bne.n	8005fcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0308 	and.w	r3, r3, #8
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d036      	beq.n	8006064 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d016      	beq.n	800602c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ffe:	4b15      	ldr	r3, [pc, #84]	; (8006054 <HAL_RCC_OscConfig+0x248>)
 8006000:	2201      	movs	r2, #1
 8006002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006004:	f7fb fbd6 	bl	80017b4 <HAL_GetTick>
 8006008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800600a:	e008      	b.n	800601e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800600c:	f7fb fbd2 	bl	80017b4 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b02      	cmp	r3, #2
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e167      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800601e:	4b0b      	ldr	r3, [pc, #44]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8006020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0f0      	beq.n	800600c <HAL_RCC_OscConfig+0x200>
 800602a:	e01b      	b.n	8006064 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800602c:	4b09      	ldr	r3, [pc, #36]	; (8006054 <HAL_RCC_OscConfig+0x248>)
 800602e:	2200      	movs	r2, #0
 8006030:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006032:	f7fb fbbf 	bl	80017b4 <HAL_GetTick>
 8006036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006038:	e00e      	b.n	8006058 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800603a:	f7fb fbbb 	bl	80017b4 <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	2b02      	cmp	r3, #2
 8006046:	d907      	bls.n	8006058 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e150      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
 800604c:	40023800 	.word	0x40023800
 8006050:	42470000 	.word	0x42470000
 8006054:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006058:	4b88      	ldr	r3, [pc, #544]	; (800627c <HAL_RCC_OscConfig+0x470>)
 800605a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1ea      	bne.n	800603a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 8097 	beq.w	80061a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006072:	2300      	movs	r3, #0
 8006074:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006076:	4b81      	ldr	r3, [pc, #516]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10f      	bne.n	80060a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006082:	2300      	movs	r3, #0
 8006084:	60bb      	str	r3, [r7, #8]
 8006086:	4b7d      	ldr	r3, [pc, #500]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608a:	4a7c      	ldr	r2, [pc, #496]	; (800627c <HAL_RCC_OscConfig+0x470>)
 800608c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006090:	6413      	str	r3, [r2, #64]	; 0x40
 8006092:	4b7a      	ldr	r3, [pc, #488]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800609a:	60bb      	str	r3, [r7, #8]
 800609c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800609e:	2301      	movs	r3, #1
 80060a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060a2:	4b77      	ldr	r3, [pc, #476]	; (8006280 <HAL_RCC_OscConfig+0x474>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d118      	bne.n	80060e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060ae:	4b74      	ldr	r3, [pc, #464]	; (8006280 <HAL_RCC_OscConfig+0x474>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a73      	ldr	r2, [pc, #460]	; (8006280 <HAL_RCC_OscConfig+0x474>)
 80060b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060ba:	f7fb fb7b 	bl	80017b4 <HAL_GetTick>
 80060be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060c0:	e008      	b.n	80060d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060c2:	f7fb fb77 	bl	80017b4 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d901      	bls.n	80060d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e10c      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060d4:	4b6a      	ldr	r3, [pc, #424]	; (8006280 <HAL_RCC_OscConfig+0x474>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d0f0      	beq.n	80060c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d106      	bne.n	80060f6 <HAL_RCC_OscConfig+0x2ea>
 80060e8:	4b64      	ldr	r3, [pc, #400]	; (800627c <HAL_RCC_OscConfig+0x470>)
 80060ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ec:	4a63      	ldr	r2, [pc, #396]	; (800627c <HAL_RCC_OscConfig+0x470>)
 80060ee:	f043 0301 	orr.w	r3, r3, #1
 80060f2:	6713      	str	r3, [r2, #112]	; 0x70
 80060f4:	e01c      	b.n	8006130 <HAL_RCC_OscConfig+0x324>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	2b05      	cmp	r3, #5
 80060fc:	d10c      	bne.n	8006118 <HAL_RCC_OscConfig+0x30c>
 80060fe:	4b5f      	ldr	r3, [pc, #380]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006102:	4a5e      	ldr	r2, [pc, #376]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006104:	f043 0304 	orr.w	r3, r3, #4
 8006108:	6713      	str	r3, [r2, #112]	; 0x70
 800610a:	4b5c      	ldr	r3, [pc, #368]	; (800627c <HAL_RCC_OscConfig+0x470>)
 800610c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610e:	4a5b      	ldr	r2, [pc, #364]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006110:	f043 0301 	orr.w	r3, r3, #1
 8006114:	6713      	str	r3, [r2, #112]	; 0x70
 8006116:	e00b      	b.n	8006130 <HAL_RCC_OscConfig+0x324>
 8006118:	4b58      	ldr	r3, [pc, #352]	; (800627c <HAL_RCC_OscConfig+0x470>)
 800611a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611c:	4a57      	ldr	r2, [pc, #348]	; (800627c <HAL_RCC_OscConfig+0x470>)
 800611e:	f023 0301 	bic.w	r3, r3, #1
 8006122:	6713      	str	r3, [r2, #112]	; 0x70
 8006124:	4b55      	ldr	r3, [pc, #340]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006128:	4a54      	ldr	r2, [pc, #336]	; (800627c <HAL_RCC_OscConfig+0x470>)
 800612a:	f023 0304 	bic.w	r3, r3, #4
 800612e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d015      	beq.n	8006164 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006138:	f7fb fb3c 	bl	80017b4 <HAL_GetTick>
 800613c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800613e:	e00a      	b.n	8006156 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006140:	f7fb fb38 	bl	80017b4 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	f241 3288 	movw	r2, #5000	; 0x1388
 800614e:	4293      	cmp	r3, r2
 8006150:	d901      	bls.n	8006156 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e0cb      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006156:	4b49      	ldr	r3, [pc, #292]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d0ee      	beq.n	8006140 <HAL_RCC_OscConfig+0x334>
 8006162:	e014      	b.n	800618e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006164:	f7fb fb26 	bl	80017b4 <HAL_GetTick>
 8006168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800616a:	e00a      	b.n	8006182 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800616c:	f7fb fb22 	bl	80017b4 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	f241 3288 	movw	r2, #5000	; 0x1388
 800617a:	4293      	cmp	r3, r2
 800617c:	d901      	bls.n	8006182 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e0b5      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006182:	4b3e      	ldr	r3, [pc, #248]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1ee      	bne.n	800616c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800618e:	7dfb      	ldrb	r3, [r7, #23]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d105      	bne.n	80061a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006194:	4b39      	ldr	r3, [pc, #228]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006198:	4a38      	ldr	r2, [pc, #224]	; (800627c <HAL_RCC_OscConfig+0x470>)
 800619a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800619e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 80a1 	beq.w	80062ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061aa:	4b34      	ldr	r3, [pc, #208]	; (800627c <HAL_RCC_OscConfig+0x470>)
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f003 030c 	and.w	r3, r3, #12
 80061b2:	2b08      	cmp	r3, #8
 80061b4:	d05c      	beq.n	8006270 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d141      	bne.n	8006242 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061be:	4b31      	ldr	r3, [pc, #196]	; (8006284 <HAL_RCC_OscConfig+0x478>)
 80061c0:	2200      	movs	r2, #0
 80061c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061c4:	f7fb faf6 	bl	80017b4 <HAL_GetTick>
 80061c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ca:	e008      	b.n	80061de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061cc:	f7fb faf2 	bl	80017b4 <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d901      	bls.n	80061de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e087      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061de:	4b27      	ldr	r3, [pc, #156]	; (800627c <HAL_RCC_OscConfig+0x470>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1f0      	bne.n	80061cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	69da      	ldr	r2, [r3, #28]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	431a      	orrs	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	019b      	lsls	r3, r3, #6
 80061fa:	431a      	orrs	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006200:	085b      	lsrs	r3, r3, #1
 8006202:	3b01      	subs	r3, #1
 8006204:	041b      	lsls	r3, r3, #16
 8006206:	431a      	orrs	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620c:	061b      	lsls	r3, r3, #24
 800620e:	491b      	ldr	r1, [pc, #108]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006210:	4313      	orrs	r3, r2
 8006212:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006214:	4b1b      	ldr	r3, [pc, #108]	; (8006284 <HAL_RCC_OscConfig+0x478>)
 8006216:	2201      	movs	r2, #1
 8006218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800621a:	f7fb facb 	bl	80017b4 <HAL_GetTick>
 800621e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006220:	e008      	b.n	8006234 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006222:	f7fb fac7 	bl	80017b4 <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	2b02      	cmp	r3, #2
 800622e:	d901      	bls.n	8006234 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e05c      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006234:	4b11      	ldr	r3, [pc, #68]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d0f0      	beq.n	8006222 <HAL_RCC_OscConfig+0x416>
 8006240:	e054      	b.n	80062ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006242:	4b10      	ldr	r3, [pc, #64]	; (8006284 <HAL_RCC_OscConfig+0x478>)
 8006244:	2200      	movs	r2, #0
 8006246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006248:	f7fb fab4 	bl	80017b4 <HAL_GetTick>
 800624c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800624e:	e008      	b.n	8006262 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006250:	f7fb fab0 	bl	80017b4 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b02      	cmp	r3, #2
 800625c:	d901      	bls.n	8006262 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e045      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006262:	4b06      	ldr	r3, [pc, #24]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1f0      	bne.n	8006250 <HAL_RCC_OscConfig+0x444>
 800626e:	e03d      	b.n	80062ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d107      	bne.n	8006288 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e038      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
 800627c:	40023800 	.word	0x40023800
 8006280:	40007000 	.word	0x40007000
 8006284:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006288:	4b1b      	ldr	r3, [pc, #108]	; (80062f8 <HAL_RCC_OscConfig+0x4ec>)
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d028      	beq.n	80062e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d121      	bne.n	80062e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d11a      	bne.n	80062e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80062b8:	4013      	ands	r3, r2
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d111      	bne.n	80062e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ce:	085b      	lsrs	r3, r3, #1
 80062d0:	3b01      	subs	r3, #1
 80062d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d107      	bne.n	80062e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d001      	beq.n	80062ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e000      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3718      	adds	r7, #24
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	40023800 	.word	0x40023800

080062fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d101      	bne.n	8006310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e0cc      	b.n	80064aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006310:	4b68      	ldr	r3, [pc, #416]	; (80064b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0307 	and.w	r3, r3, #7
 8006318:	683a      	ldr	r2, [r7, #0]
 800631a:	429a      	cmp	r2, r3
 800631c:	d90c      	bls.n	8006338 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800631e:	4b65      	ldr	r3, [pc, #404]	; (80064b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006320:	683a      	ldr	r2, [r7, #0]
 8006322:	b2d2      	uxtb	r2, r2
 8006324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006326:	4b63      	ldr	r3, [pc, #396]	; (80064b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0307 	and.w	r3, r3, #7
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	429a      	cmp	r2, r3
 8006332:	d001      	beq.n	8006338 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e0b8      	b.n	80064aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0302 	and.w	r3, r3, #2
 8006340:	2b00      	cmp	r3, #0
 8006342:	d020      	beq.n	8006386 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0304 	and.w	r3, r3, #4
 800634c:	2b00      	cmp	r3, #0
 800634e:	d005      	beq.n	800635c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006350:	4b59      	ldr	r3, [pc, #356]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	4a58      	ldr	r2, [pc, #352]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006356:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800635a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0308 	and.w	r3, r3, #8
 8006364:	2b00      	cmp	r3, #0
 8006366:	d005      	beq.n	8006374 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006368:	4b53      	ldr	r3, [pc, #332]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	4a52      	ldr	r2, [pc, #328]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 800636e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006372:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006374:	4b50      	ldr	r3, [pc, #320]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	494d      	ldr	r1, [pc, #308]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006382:	4313      	orrs	r3, r2
 8006384:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	2b00      	cmp	r3, #0
 8006390:	d044      	beq.n	800641c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d107      	bne.n	80063aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800639a:	4b47      	ldr	r3, [pc, #284]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d119      	bne.n	80063da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e07f      	b.n	80064aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d003      	beq.n	80063ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063b6:	2b03      	cmp	r3, #3
 80063b8:	d107      	bne.n	80063ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063ba:	4b3f      	ldr	r3, [pc, #252]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d109      	bne.n	80063da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e06f      	b.n	80064aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063ca:	4b3b      	ldr	r3, [pc, #236]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0302 	and.w	r3, r3, #2
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e067      	b.n	80064aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063da:	4b37      	ldr	r3, [pc, #220]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f023 0203 	bic.w	r2, r3, #3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	4934      	ldr	r1, [pc, #208]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063ec:	f7fb f9e2 	bl	80017b4 <HAL_GetTick>
 80063f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063f2:	e00a      	b.n	800640a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063f4:	f7fb f9de 	bl	80017b4 <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006402:	4293      	cmp	r3, r2
 8006404:	d901      	bls.n	800640a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e04f      	b.n	80064aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800640a:	4b2b      	ldr	r3, [pc, #172]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f003 020c 	and.w	r2, r3, #12
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	429a      	cmp	r2, r3
 800641a:	d1eb      	bne.n	80063f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800641c:	4b25      	ldr	r3, [pc, #148]	; (80064b4 <HAL_RCC_ClockConfig+0x1b8>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0307 	and.w	r3, r3, #7
 8006424:	683a      	ldr	r2, [r7, #0]
 8006426:	429a      	cmp	r2, r3
 8006428:	d20c      	bcs.n	8006444 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800642a:	4b22      	ldr	r3, [pc, #136]	; (80064b4 <HAL_RCC_ClockConfig+0x1b8>)
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	b2d2      	uxtb	r2, r2
 8006430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006432:	4b20      	ldr	r3, [pc, #128]	; (80064b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0307 	and.w	r3, r3, #7
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	429a      	cmp	r2, r3
 800643e:	d001      	beq.n	8006444 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e032      	b.n	80064aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0304 	and.w	r3, r3, #4
 800644c:	2b00      	cmp	r3, #0
 800644e:	d008      	beq.n	8006462 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006450:	4b19      	ldr	r3, [pc, #100]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	4916      	ldr	r1, [pc, #88]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 800645e:	4313      	orrs	r3, r2
 8006460:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0308 	and.w	r3, r3, #8
 800646a:	2b00      	cmp	r3, #0
 800646c:	d009      	beq.n	8006482 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800646e:	4b12      	ldr	r3, [pc, #72]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	00db      	lsls	r3, r3, #3
 800647c:	490e      	ldr	r1, [pc, #56]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 800647e:	4313      	orrs	r3, r2
 8006480:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006482:	f000 f821 	bl	80064c8 <HAL_RCC_GetSysClockFreq>
 8006486:	4602      	mov	r2, r0
 8006488:	4b0b      	ldr	r3, [pc, #44]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	091b      	lsrs	r3, r3, #4
 800648e:	f003 030f 	and.w	r3, r3, #15
 8006492:	490a      	ldr	r1, [pc, #40]	; (80064bc <HAL_RCC_ClockConfig+0x1c0>)
 8006494:	5ccb      	ldrb	r3, [r1, r3]
 8006496:	fa22 f303 	lsr.w	r3, r2, r3
 800649a:	4a09      	ldr	r2, [pc, #36]	; (80064c0 <HAL_RCC_ClockConfig+0x1c4>)
 800649c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800649e:	4b09      	ldr	r3, [pc, #36]	; (80064c4 <HAL_RCC_ClockConfig+0x1c8>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fb f942 	bl	800172c <HAL_InitTick>

  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	40023c00 	.word	0x40023c00
 80064b8:	40023800 	.word	0x40023800
 80064bc:	0800dcb0 	.word	0x0800dcb0
 80064c0:	20000000 	.word	0x20000000
 80064c4:	20000004 	.word	0x20000004

080064c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064cc:	b094      	sub	sp, #80	; 0x50
 80064ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80064d0:	2300      	movs	r3, #0
 80064d2:	647b      	str	r3, [r7, #68]	; 0x44
 80064d4:	2300      	movs	r3, #0
 80064d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064d8:	2300      	movs	r3, #0
 80064da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80064dc:	2300      	movs	r3, #0
 80064de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064e0:	4b79      	ldr	r3, [pc, #484]	; (80066c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f003 030c 	and.w	r3, r3, #12
 80064e8:	2b08      	cmp	r3, #8
 80064ea:	d00d      	beq.n	8006508 <HAL_RCC_GetSysClockFreq+0x40>
 80064ec:	2b08      	cmp	r3, #8
 80064ee:	f200 80e1 	bhi.w	80066b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d002      	beq.n	80064fc <HAL_RCC_GetSysClockFreq+0x34>
 80064f6:	2b04      	cmp	r3, #4
 80064f8:	d003      	beq.n	8006502 <HAL_RCC_GetSysClockFreq+0x3a>
 80064fa:	e0db      	b.n	80066b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064fc:	4b73      	ldr	r3, [pc, #460]	; (80066cc <HAL_RCC_GetSysClockFreq+0x204>)
 80064fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006500:	e0db      	b.n	80066ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006502:	4b73      	ldr	r3, [pc, #460]	; (80066d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006504:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006506:	e0d8      	b.n	80066ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006508:	4b6f      	ldr	r3, [pc, #444]	; (80066c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006510:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006512:	4b6d      	ldr	r3, [pc, #436]	; (80066c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d063      	beq.n	80065e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800651e:	4b6a      	ldr	r3, [pc, #424]	; (80066c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	099b      	lsrs	r3, r3, #6
 8006524:	2200      	movs	r2, #0
 8006526:	63bb      	str	r3, [r7, #56]	; 0x38
 8006528:	63fa      	str	r2, [r7, #60]	; 0x3c
 800652a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800652c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006530:	633b      	str	r3, [r7, #48]	; 0x30
 8006532:	2300      	movs	r3, #0
 8006534:	637b      	str	r3, [r7, #52]	; 0x34
 8006536:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800653a:	4622      	mov	r2, r4
 800653c:	462b      	mov	r3, r5
 800653e:	f04f 0000 	mov.w	r0, #0
 8006542:	f04f 0100 	mov.w	r1, #0
 8006546:	0159      	lsls	r1, r3, #5
 8006548:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800654c:	0150      	lsls	r0, r2, #5
 800654e:	4602      	mov	r2, r0
 8006550:	460b      	mov	r3, r1
 8006552:	4621      	mov	r1, r4
 8006554:	1a51      	subs	r1, r2, r1
 8006556:	6139      	str	r1, [r7, #16]
 8006558:	4629      	mov	r1, r5
 800655a:	eb63 0301 	sbc.w	r3, r3, r1
 800655e:	617b      	str	r3, [r7, #20]
 8006560:	f04f 0200 	mov.w	r2, #0
 8006564:	f04f 0300 	mov.w	r3, #0
 8006568:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800656c:	4659      	mov	r1, fp
 800656e:	018b      	lsls	r3, r1, #6
 8006570:	4651      	mov	r1, sl
 8006572:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006576:	4651      	mov	r1, sl
 8006578:	018a      	lsls	r2, r1, #6
 800657a:	4651      	mov	r1, sl
 800657c:	ebb2 0801 	subs.w	r8, r2, r1
 8006580:	4659      	mov	r1, fp
 8006582:	eb63 0901 	sbc.w	r9, r3, r1
 8006586:	f04f 0200 	mov.w	r2, #0
 800658a:	f04f 0300 	mov.w	r3, #0
 800658e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006592:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006596:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800659a:	4690      	mov	r8, r2
 800659c:	4699      	mov	r9, r3
 800659e:	4623      	mov	r3, r4
 80065a0:	eb18 0303 	adds.w	r3, r8, r3
 80065a4:	60bb      	str	r3, [r7, #8]
 80065a6:	462b      	mov	r3, r5
 80065a8:	eb49 0303 	adc.w	r3, r9, r3
 80065ac:	60fb      	str	r3, [r7, #12]
 80065ae:	f04f 0200 	mov.w	r2, #0
 80065b2:	f04f 0300 	mov.w	r3, #0
 80065b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80065ba:	4629      	mov	r1, r5
 80065bc:	024b      	lsls	r3, r1, #9
 80065be:	4621      	mov	r1, r4
 80065c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80065c4:	4621      	mov	r1, r4
 80065c6:	024a      	lsls	r2, r1, #9
 80065c8:	4610      	mov	r0, r2
 80065ca:	4619      	mov	r1, r3
 80065cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065ce:	2200      	movs	r2, #0
 80065d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80065d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80065d8:	f7f9 fdf6 	bl	80001c8 <__aeabi_uldivmod>
 80065dc:	4602      	mov	r2, r0
 80065de:	460b      	mov	r3, r1
 80065e0:	4613      	mov	r3, r2
 80065e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065e4:	e058      	b.n	8006698 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065e6:	4b38      	ldr	r3, [pc, #224]	; (80066c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	099b      	lsrs	r3, r3, #6
 80065ec:	2200      	movs	r2, #0
 80065ee:	4618      	mov	r0, r3
 80065f0:	4611      	mov	r1, r2
 80065f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80065f6:	623b      	str	r3, [r7, #32]
 80065f8:	2300      	movs	r3, #0
 80065fa:	627b      	str	r3, [r7, #36]	; 0x24
 80065fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006600:	4642      	mov	r2, r8
 8006602:	464b      	mov	r3, r9
 8006604:	f04f 0000 	mov.w	r0, #0
 8006608:	f04f 0100 	mov.w	r1, #0
 800660c:	0159      	lsls	r1, r3, #5
 800660e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006612:	0150      	lsls	r0, r2, #5
 8006614:	4602      	mov	r2, r0
 8006616:	460b      	mov	r3, r1
 8006618:	4641      	mov	r1, r8
 800661a:	ebb2 0a01 	subs.w	sl, r2, r1
 800661e:	4649      	mov	r1, r9
 8006620:	eb63 0b01 	sbc.w	fp, r3, r1
 8006624:	f04f 0200 	mov.w	r2, #0
 8006628:	f04f 0300 	mov.w	r3, #0
 800662c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006630:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006634:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006638:	ebb2 040a 	subs.w	r4, r2, sl
 800663c:	eb63 050b 	sbc.w	r5, r3, fp
 8006640:	f04f 0200 	mov.w	r2, #0
 8006644:	f04f 0300 	mov.w	r3, #0
 8006648:	00eb      	lsls	r3, r5, #3
 800664a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800664e:	00e2      	lsls	r2, r4, #3
 8006650:	4614      	mov	r4, r2
 8006652:	461d      	mov	r5, r3
 8006654:	4643      	mov	r3, r8
 8006656:	18e3      	adds	r3, r4, r3
 8006658:	603b      	str	r3, [r7, #0]
 800665a:	464b      	mov	r3, r9
 800665c:	eb45 0303 	adc.w	r3, r5, r3
 8006660:	607b      	str	r3, [r7, #4]
 8006662:	f04f 0200 	mov.w	r2, #0
 8006666:	f04f 0300 	mov.w	r3, #0
 800666a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800666e:	4629      	mov	r1, r5
 8006670:	028b      	lsls	r3, r1, #10
 8006672:	4621      	mov	r1, r4
 8006674:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006678:	4621      	mov	r1, r4
 800667a:	028a      	lsls	r2, r1, #10
 800667c:	4610      	mov	r0, r2
 800667e:	4619      	mov	r1, r3
 8006680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006682:	2200      	movs	r2, #0
 8006684:	61bb      	str	r3, [r7, #24]
 8006686:	61fa      	str	r2, [r7, #28]
 8006688:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800668c:	f7f9 fd9c 	bl	80001c8 <__aeabi_uldivmod>
 8006690:	4602      	mov	r2, r0
 8006692:	460b      	mov	r3, r1
 8006694:	4613      	mov	r3, r2
 8006696:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006698:	4b0b      	ldr	r3, [pc, #44]	; (80066c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	0c1b      	lsrs	r3, r3, #16
 800669e:	f003 0303 	and.w	r3, r3, #3
 80066a2:	3301      	adds	r3, #1
 80066a4:	005b      	lsls	r3, r3, #1
 80066a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80066a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80066b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80066b2:	e002      	b.n	80066ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80066b4:	4b05      	ldr	r3, [pc, #20]	; (80066cc <HAL_RCC_GetSysClockFreq+0x204>)
 80066b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80066b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3750      	adds	r7, #80	; 0x50
 80066c0:	46bd      	mov	sp, r7
 80066c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066c6:	bf00      	nop
 80066c8:	40023800 	.word	0x40023800
 80066cc:	00f42400 	.word	0x00f42400
 80066d0:	007a1200 	.word	0x007a1200

080066d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066d4:	b480      	push	{r7}
 80066d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066d8:	4b03      	ldr	r3, [pc, #12]	; (80066e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80066da:	681b      	ldr	r3, [r3, #0]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	20000000 	.word	0x20000000

080066ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80066f0:	f7ff fff0 	bl	80066d4 <HAL_RCC_GetHCLKFreq>
 80066f4:	4602      	mov	r2, r0
 80066f6:	4b05      	ldr	r3, [pc, #20]	; (800670c <HAL_RCC_GetPCLK1Freq+0x20>)
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	0a9b      	lsrs	r3, r3, #10
 80066fc:	f003 0307 	and.w	r3, r3, #7
 8006700:	4903      	ldr	r1, [pc, #12]	; (8006710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006702:	5ccb      	ldrb	r3, [r1, r3]
 8006704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006708:	4618      	mov	r0, r3
 800670a:	bd80      	pop	{r7, pc}
 800670c:	40023800 	.word	0x40023800
 8006710:	0800dcc0 	.word	0x0800dcc0

08006714 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006720:	2300      	movs	r3, #0
 8006722:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	2b00      	cmp	r3, #0
 800672e:	d105      	bne.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006738:	2b00      	cmp	r3, #0
 800673a:	d035      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800673c:	4b62      	ldr	r3, [pc, #392]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800673e:	2200      	movs	r2, #0
 8006740:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006742:	f7fb f837 	bl	80017b4 <HAL_GetTick>
 8006746:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006748:	e008      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800674a:	f7fb f833 	bl	80017b4 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	2b02      	cmp	r3, #2
 8006756:	d901      	bls.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e0b0      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800675c:	4b5b      	ldr	r3, [pc, #364]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1f0      	bne.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	019a      	lsls	r2, r3, #6
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	071b      	lsls	r3, r3, #28
 8006774:	4955      	ldr	r1, [pc, #340]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006776:	4313      	orrs	r3, r2
 8006778:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800677c:	4b52      	ldr	r3, [pc, #328]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800677e:	2201      	movs	r2, #1
 8006780:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006782:	f7fb f817 	bl	80017b4 <HAL_GetTick>
 8006786:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006788:	e008      	b.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800678a:	f7fb f813 	bl	80017b4 <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	2b02      	cmp	r3, #2
 8006796:	d901      	bls.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e090      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800679c:	4b4b      	ldr	r3, [pc, #300]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d0f0      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0302 	and.w	r3, r3, #2
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 8083 	beq.w	80068bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80067b6:	2300      	movs	r3, #0
 80067b8:	60fb      	str	r3, [r7, #12]
 80067ba:	4b44      	ldr	r3, [pc, #272]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067be:	4a43      	ldr	r2, [pc, #268]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067c4:	6413      	str	r3, [r2, #64]	; 0x40
 80067c6:	4b41      	ldr	r3, [pc, #260]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067ce:	60fb      	str	r3, [r7, #12]
 80067d0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80067d2:	4b3f      	ldr	r3, [pc, #252]	; (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a3e      	ldr	r2, [pc, #248]	; (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80067d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80067de:	f7fa ffe9 	bl	80017b4 <HAL_GetTick>
 80067e2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80067e4:	e008      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80067e6:	f7fa ffe5 	bl	80017b4 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d901      	bls.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e062      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80067f8:	4b35      	ldr	r3, [pc, #212]	; (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006800:	2b00      	cmp	r3, #0
 8006802:	d0f0      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006804:	4b31      	ldr	r3, [pc, #196]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006808:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800680c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d02f      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	429a      	cmp	r2, r3
 8006820:	d028      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006822:	4b2a      	ldr	r3, [pc, #168]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800682a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800682c:	4b29      	ldr	r3, [pc, #164]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800682e:	2201      	movs	r2, #1
 8006830:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006832:	4b28      	ldr	r3, [pc, #160]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006834:	2200      	movs	r2, #0
 8006836:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006838:	4a24      	ldr	r2, [pc, #144]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800683e:	4b23      	ldr	r3, [pc, #140]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b01      	cmp	r3, #1
 8006848:	d114      	bne.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800684a:	f7fa ffb3 	bl	80017b4 <HAL_GetTick>
 800684e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006850:	e00a      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006852:	f7fa ffaf 	bl	80017b4 <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006860:	4293      	cmp	r3, r2
 8006862:	d901      	bls.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e02a      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006868:	4b18      	ldr	r3, [pc, #96]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800686a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686c:	f003 0302 	and.w	r3, r3, #2
 8006870:	2b00      	cmp	r3, #0
 8006872:	d0ee      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800687c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006880:	d10d      	bne.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006882:	4b12      	ldr	r3, [pc, #72]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006896:	490d      	ldr	r1, [pc, #52]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006898:	4313      	orrs	r3, r2
 800689a:	608b      	str	r3, [r1, #8]
 800689c:	e005      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x196>
 800689e:	4b0b      	ldr	r3, [pc, #44]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	4a0a      	ldr	r2, [pc, #40]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068a4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80068a8:	6093      	str	r3, [r2, #8]
 80068aa:	4b08      	ldr	r3, [pc, #32]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068b6:	4905      	ldr	r1, [pc, #20]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	42470068 	.word	0x42470068
 80068cc:	40023800 	.word	0x40023800
 80068d0:	40007000 	.word	0x40007000
 80068d4:	42470e40 	.word	0x42470e40

080068d8 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2203      	movs	r2, #3
 80068e4:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80068e6:	4b11      	ldr	r3, [pc, #68]	; (800692c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80068e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068ec:	099b      	lsrs	r3, r3, #6
 80068ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80068f6:	4b0d      	ldr	r3, [pc, #52]	; (800692c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80068f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068fc:	0f1b      	lsrs	r3, r3, #28
 80068fe:	f003 0207 	and.w	r2, r3, #7
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8006906:	4b09      	ldr	r3, [pc, #36]	; (800692c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800690e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8006910:	4b06      	ldr	r3, [pc, #24]	; (800692c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006914:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	431a      	orrs	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8006920:	bf00      	nop
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	40023800 	.word	0x40023800

08006930 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006930:	b480      	push	{r7}
 8006932:	b087      	sub	sp, #28
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006938:	2300      	movs	r3, #0
 800693a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800693c:	2300      	movs	r3, #0
 800693e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006940:	2300      	movs	r3, #0
 8006942:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006944:	2300      	movs	r3, #0
 8006946:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d13e      	bne.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800694e:	4b23      	ldr	r3, [pc, #140]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006956:	60fb      	str	r3, [r7, #12]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d005      	beq.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d12f      	bne.n	80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006964:	4b1e      	ldr	r3, [pc, #120]	; (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006966:	617b      	str	r3, [r7, #20]
          break;
 8006968:	e02f      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800696a:	4b1c      	ldr	r3, [pc, #112]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006972:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006976:	d108      	bne.n	800698a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006978:	4b18      	ldr	r3, [pc, #96]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006980:	4a18      	ldr	r2, [pc, #96]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006982:	fbb2 f3f3 	udiv	r3, r2, r3
 8006986:	613b      	str	r3, [r7, #16]
 8006988:	e007      	b.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800698a:	4b14      	ldr	r3, [pc, #80]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006992:	4a15      	ldr	r2, [pc, #84]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006994:	fbb2 f3f3 	udiv	r3, r2, r3
 8006998:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800699a:	4b10      	ldr	r3, [pc, #64]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800699c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069a0:	099b      	lsrs	r3, r3, #6
 80069a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	fb02 f303 	mul.w	r3, r2, r3
 80069ac:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80069ae:	4b0b      	ldr	r3, [pc, #44]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80069b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069b4:	0f1b      	lsrs	r3, r3, #28
 80069b6:	f003 0307 	and.w	r3, r3, #7
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c0:	617b      	str	r3, [r7, #20]
          break;
 80069c2:	e002      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80069c4:	2300      	movs	r3, #0
 80069c6:	617b      	str	r3, [r7, #20]
          break;
 80069c8:	bf00      	nop
        }
      }
      break;
 80069ca:	bf00      	nop
    }
  }
  return frequency;
 80069cc:	697b      	ldr	r3, [r7, #20]
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	371c      	adds	r7, #28
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	40023800 	.word	0x40023800
 80069e0:	00bb8000 	.word	0x00bb8000
 80069e4:	007a1200 	.word	0x007a1200
 80069e8:	00f42400 	.word	0x00f42400

080069ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069ec:	b084      	sub	sp, #16
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b084      	sub	sp, #16
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
 80069f6:	f107 001c 	add.w	r0, r7, #28
 80069fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80069fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d122      	bne.n	8006a4a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d105      	bne.n	8006a3e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f9c0 	bl	8006dc4 <USB_CoreReset>
 8006a44:	4603      	mov	r3, r0
 8006a46:	73fb      	strb	r3, [r7, #15]
 8006a48:	e01a      	b.n	8006a80 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f9b4 	bl	8006dc4 <USB_CoreReset>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d106      	bne.n	8006a74 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	639a      	str	r2, [r3, #56]	; 0x38
 8006a72:	e005      	b.n	8006a80 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d10b      	bne.n	8006a9e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f043 0206 	orr.w	r2, r3, #6
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f043 0220 	orr.w	r2, r3, #32
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006aaa:	b004      	add	sp, #16
 8006aac:	4770      	bx	lr

08006aae <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b083      	sub	sp, #12
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f043 0201 	orr.w	r2, r3, #1
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f023 0201 	bic.w	r2, r3, #1
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b084      	sub	sp, #16
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
 8006afa:	460b      	mov	r3, r1
 8006afc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006afe:	2300      	movs	r3, #0
 8006b00:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b0e:	78fb      	ldrb	r3, [r7, #3]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d115      	bne.n	8006b40 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b20:	2001      	movs	r0, #1
 8006b22:	f7fa fe53 	bl	80017cc <HAL_Delay>
      ms++;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 f93a 	bl	8006da6 <USB_GetMode>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d01e      	beq.n	8006b76 <USB_SetCurrentMode+0x84>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2b31      	cmp	r3, #49	; 0x31
 8006b3c:	d9f0      	bls.n	8006b20 <USB_SetCurrentMode+0x2e>
 8006b3e:	e01a      	b.n	8006b76 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b40:	78fb      	ldrb	r3, [r7, #3]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d115      	bne.n	8006b72 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b52:	2001      	movs	r0, #1
 8006b54:	f7fa fe3a 	bl	80017cc <HAL_Delay>
      ms++;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f921 	bl	8006da6 <USB_GetMode>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d005      	beq.n	8006b76 <USB_SetCurrentMode+0x84>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2b31      	cmp	r3, #49	; 0x31
 8006b6e:	d9f0      	bls.n	8006b52 <USB_SetCurrentMode+0x60>
 8006b70:	e001      	b.n	8006b76 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e005      	b.n	8006b82 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2b32      	cmp	r3, #50	; 0x32
 8006b7a:	d101      	bne.n	8006b80 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e000      	b.n	8006b82 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
	...

08006b8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	4a13      	ldr	r2, [pc, #76]	; (8006bf0 <USB_FlushTxFifo+0x64>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d901      	bls.n	8006bac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e01b      	b.n	8006be4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	daf2      	bge.n	8006b9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	019b      	lsls	r3, r3, #6
 8006bbc:	f043 0220 	orr.w	r2, r3, #32
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	4a08      	ldr	r2, [pc, #32]	; (8006bf0 <USB_FlushTxFifo+0x64>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d901      	bls.n	8006bd6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e006      	b.n	8006be4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	f003 0320 	and.w	r3, r3, #32
 8006bde:	2b20      	cmp	r3, #32
 8006be0:	d0f0      	beq.n	8006bc4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3714      	adds	r7, #20
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	00030d40 	.word	0x00030d40

08006bf4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	3301      	adds	r3, #1
 8006c04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4a11      	ldr	r2, [pc, #68]	; (8006c50 <USB_FlushRxFifo+0x5c>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d901      	bls.n	8006c12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e018      	b.n	8006c44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	daf2      	bge.n	8006c00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2210      	movs	r2, #16
 8006c22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	3301      	adds	r3, #1
 8006c28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	4a08      	ldr	r2, [pc, #32]	; (8006c50 <USB_FlushRxFifo+0x5c>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d901      	bls.n	8006c36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e006      	b.n	8006c44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	f003 0310 	and.w	r3, r3, #16
 8006c3e:	2b10      	cmp	r3, #16
 8006c40:	d0f0      	beq.n	8006c24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3714      	adds	r7, #20
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	00030d40 	.word	0x00030d40

08006c54 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b089      	sub	sp, #36	; 0x24
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	4611      	mov	r1, r2
 8006c60:	461a      	mov	r2, r3
 8006c62:	460b      	mov	r3, r1
 8006c64:	71fb      	strb	r3, [r7, #7]
 8006c66:	4613      	mov	r3, r2
 8006c68:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006c72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d123      	bne.n	8006cc2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006c7a:	88bb      	ldrh	r3, [r7, #4]
 8006c7c:	3303      	adds	r3, #3
 8006c7e:	089b      	lsrs	r3, r3, #2
 8006c80:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006c82:	2300      	movs	r3, #0
 8006c84:	61bb      	str	r3, [r7, #24]
 8006c86:	e018      	b.n	8006cba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006c88:	79fb      	ldrb	r3, [r7, #7]
 8006c8a:	031a      	lsls	r2, r3, #12
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c94:	461a      	mov	r2, r3
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	3301      	adds	r3, #1
 8006cac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	61bb      	str	r3, [r7, #24]
 8006cba:	69ba      	ldr	r2, [r7, #24]
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d3e2      	bcc.n	8006c88 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3724      	adds	r7, #36	; 0x24
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b08b      	sub	sp, #44	; 0x2c
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006ce6:	88fb      	ldrh	r3, [r7, #6]
 8006ce8:	089b      	lsrs	r3, r3, #2
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006cee:	88fb      	ldrh	r3, [r7, #6]
 8006cf0:	f003 0303 	and.w	r3, r3, #3
 8006cf4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	623b      	str	r3, [r7, #32]
 8006cfa:	e014      	b.n	8006d26 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	601a      	str	r2, [r3, #0]
    pDest++;
 8006d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d10:	3301      	adds	r3, #1
 8006d12:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	3301      	adds	r3, #1
 8006d18:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	3301      	adds	r3, #1
 8006d24:	623b      	str	r3, [r7, #32]
 8006d26:	6a3a      	ldr	r2, [r7, #32]
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d3e6      	bcc.n	8006cfc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006d2e:	8bfb      	ldrh	r3, [r7, #30]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d01e      	beq.n	8006d72 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006d34:	2300      	movs	r3, #0
 8006d36:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d3e:	461a      	mov	r2, r3
 8006d40:	f107 0310 	add.w	r3, r7, #16
 8006d44:	6812      	ldr	r2, [r2, #0]
 8006d46:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	00db      	lsls	r3, r3, #3
 8006d50:	fa22 f303 	lsr.w	r3, r2, r3
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d58:	701a      	strb	r2, [r3, #0]
      i++;
 8006d5a:	6a3b      	ldr	r3, [r7, #32]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	3301      	adds	r3, #1
 8006d64:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006d66:	8bfb      	ldrh	r3, [r7, #30]
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006d6c:	8bfb      	ldrh	r3, [r7, #30]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1ea      	bne.n	8006d48 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	372c      	adds	r7, #44	; 0x2c
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	4013      	ands	r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006d98:	68fb      	ldr	r3, [r7, #12]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b083      	sub	sp, #12
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	f003 0301 	and.w	r3, r3, #1
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	370c      	adds	r7, #12
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
	...

08006dc4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	4a13      	ldr	r2, [pc, #76]	; (8006e28 <USB_CoreReset+0x64>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d901      	bls.n	8006de2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e01b      	b.n	8006e1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	daf2      	bge.n	8006dd0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006dea:	2300      	movs	r3, #0
 8006dec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	f043 0201 	orr.w	r2, r3, #1
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	4a09      	ldr	r2, [pc, #36]	; (8006e28 <USB_CoreReset+0x64>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d901      	bls.n	8006e0c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e006      	b.n	8006e1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d0f0      	beq.n	8006dfa <USB_CoreReset+0x36>

  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	00030d40 	.word	0x00030d40

08006e2c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e2c:	b084      	sub	sp, #16
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b086      	sub	sp, #24
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
 8006e36:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006e3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	2300      	movs	r3, #0
 8006e50:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e62:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d018      	beq.n	8006eb4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d10a      	bne.n	8006e9e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e96:	f043 0304 	orr.w	r3, r3, #4
 8006e9a:	6013      	str	r3, [r2, #0]
 8006e9c:	e014      	b.n	8006ec8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006eac:	f023 0304 	bic.w	r3, r3, #4
 8006eb0:	6013      	str	r3, [r2, #0]
 8006eb2:	e009      	b.n	8006ec8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ec2:	f023 0304 	bic.w	r3, r3, #4
 8006ec6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ec8:	2110      	movs	r1, #16
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7ff fe5e 	bl	8006b8c <USB_FlushTxFifo>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d001      	beq.n	8006eda <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7ff fe8a 	bl	8006bf4 <USB_FlushRxFifo>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006eea:	2300      	movs	r3, #0
 8006eec:	613b      	str	r3, [r7, #16]
 8006eee:	e015      	b.n	8006f1c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	015a      	lsls	r2, r3, #5
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006efc:	461a      	mov	r2, r3
 8006efe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f02:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f10:	461a      	mov	r2, r3
 8006f12:	2300      	movs	r3, #0
 8006f14:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	613b      	str	r3, [r7, #16]
 8006f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d3e5      	bcc.n	8006ef0 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f30:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00b      	beq.n	8006f56 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f44:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a13      	ldr	r2, [pc, #76]	; (8006f98 <USB_HostInit+0x16c>)
 8006f4a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a13      	ldr	r2, [pc, #76]	; (8006f9c <USB_HostInit+0x170>)
 8006f50:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006f54:	e009      	b.n	8006f6a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2280      	movs	r2, #128	; 0x80
 8006f5a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a10      	ldr	r2, [pc, #64]	; (8006fa0 <USB_HostInit+0x174>)
 8006f60:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a0f      	ldr	r2, [pc, #60]	; (8006fa4 <USB_HostInit+0x178>)
 8006f66:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d105      	bne.n	8006f7c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	f043 0210 	orr.w	r2, r3, #16
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	699a      	ldr	r2, [r3, #24]
 8006f80:	4b09      	ldr	r3, [pc, #36]	; (8006fa8 <USB_HostInit+0x17c>)
 8006f82:	4313      	orrs	r3, r2
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3718      	adds	r7, #24
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f94:	b004      	add	sp, #16
 8006f96:	4770      	bx	lr
 8006f98:	01000200 	.word	0x01000200
 8006f9c:	00e00300 	.word	0x00e00300
 8006fa0:	00600080 	.word	0x00600080
 8006fa4:	004000e0 	.word	0x004000e0
 8006fa8:	a3200008 	.word	0xa3200008

08006fac <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006fca:	f023 0303 	bic.w	r3, r3, #3
 8006fce:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	78fb      	ldrb	r3, [r7, #3]
 8006fda:	f003 0303 	and.w	r3, r3, #3
 8006fde:	68f9      	ldr	r1, [r7, #12]
 8006fe0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006fe8:	78fb      	ldrb	r3, [r7, #3]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d107      	bne.n	8006ffe <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006ffa:	6053      	str	r3, [r2, #4]
 8006ffc:	e009      	b.n	8007012 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006ffe:	78fb      	ldrb	r3, [r7, #3]
 8007000:	2b02      	cmp	r3, #2
 8007002:	d106      	bne.n	8007012 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800700a:	461a      	mov	r2, r3
 800700c:	f241 7370 	movw	r3, #6000	; 0x1770
 8007010:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3714      	adds	r7, #20
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800702c:	2300      	movs	r3, #0
 800702e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007040:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800704a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800704e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007050:	2064      	movs	r0, #100	; 0x64
 8007052:	f7fa fbbb 	bl	80017cc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800705e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007062:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007064:	200a      	movs	r0, #10
 8007066:	f7fa fbb1 	bl	80017cc <HAL_Delay>

  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	460b      	mov	r3, r1
 800707e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007084:	2300      	movs	r3, #0
 8007086:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007098:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d109      	bne.n	80070b8 <USB_DriveVbus+0x44>
 80070a4:	78fb      	ldrb	r3, [r7, #3]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d106      	bne.n	80070b8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80070b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80070b6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070c2:	d109      	bne.n	80070d8 <USB_DriveVbus+0x64>
 80070c4:	78fb      	ldrb	r3, [r7, #3]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d106      	bne.n	80070d8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80070d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070d6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3714      	adds	r7, #20
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b085      	sub	sp, #20
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80070f2:	2300      	movs	r3, #0
 80070f4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	0c5b      	lsrs	r3, r3, #17
 8007104:	f003 0303 	and.w	r3, r3, #3
}
 8007108:	4618      	mov	r0, r3
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	b29b      	uxth	r3, r3
}
 800712a:	4618      	mov	r0, r3
 800712c:	3714      	adds	r7, #20
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
	...

08007138 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b088      	sub	sp, #32
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	4608      	mov	r0, r1
 8007142:	4611      	mov	r1, r2
 8007144:	461a      	mov	r2, r3
 8007146:	4603      	mov	r3, r0
 8007148:	70fb      	strb	r3, [r7, #3]
 800714a:	460b      	mov	r3, r1
 800714c:	70bb      	strb	r3, [r7, #2]
 800714e:	4613      	mov	r3, r2
 8007150:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007152:	2300      	movs	r3, #0
 8007154:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800715a:	78fb      	ldrb	r3, [r7, #3]
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	4413      	add	r3, r2
 8007162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007166:	461a      	mov	r2, r3
 8007168:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800716c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800716e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007172:	2b03      	cmp	r3, #3
 8007174:	d87e      	bhi.n	8007274 <USB_HC_Init+0x13c>
 8007176:	a201      	add	r2, pc, #4	; (adr r2, 800717c <USB_HC_Init+0x44>)
 8007178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717c:	0800718d 	.word	0x0800718d
 8007180:	08007237 	.word	0x08007237
 8007184:	0800718d 	.word	0x0800718d
 8007188:	080071f9 	.word	0x080071f9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800718c:	78fb      	ldrb	r3, [r7, #3]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	4413      	add	r3, r2
 8007194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007198:	461a      	mov	r2, r3
 800719a:	f240 439d 	movw	r3, #1181	; 0x49d
 800719e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80071a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	da10      	bge.n	80071ca <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80071a8:	78fb      	ldrb	r3, [r7, #3]
 80071aa:	015a      	lsls	r2, r3, #5
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	4413      	add	r3, r2
 80071b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	78fa      	ldrb	r2, [r7, #3]
 80071b8:	0151      	lsls	r1, r2, #5
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	440a      	add	r2, r1
 80071be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071c6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80071c8:	e057      	b.n	800727a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d051      	beq.n	800727a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80071d6:	78fb      	ldrb	r3, [r7, #3]
 80071d8:	015a      	lsls	r2, r3, #5
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	4413      	add	r3, r2
 80071de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	78fa      	ldrb	r2, [r7, #3]
 80071e6:	0151      	lsls	r1, r2, #5
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	440a      	add	r2, r1
 80071ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071f0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80071f4:	60d3      	str	r3, [r2, #12]
      break;
 80071f6:	e040      	b.n	800727a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80071f8:	78fb      	ldrb	r3, [r7, #3]
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007204:	461a      	mov	r2, r3
 8007206:	f240 639d 	movw	r3, #1693	; 0x69d
 800720a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800720c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007210:	2b00      	cmp	r3, #0
 8007212:	da34      	bge.n	800727e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007214:	78fb      	ldrb	r3, [r7, #3]
 8007216:	015a      	lsls	r2, r3, #5
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	4413      	add	r3, r2
 800721c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	78fa      	ldrb	r2, [r7, #3]
 8007224:	0151      	lsls	r1, r2, #5
 8007226:	693a      	ldr	r2, [r7, #16]
 8007228:	440a      	add	r2, r1
 800722a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800722e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007232:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007234:	e023      	b.n	800727e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007236:	78fb      	ldrb	r3, [r7, #3]
 8007238:	015a      	lsls	r2, r3, #5
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	4413      	add	r3, r2
 800723e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007242:	461a      	mov	r2, r3
 8007244:	f240 2325 	movw	r3, #549	; 0x225
 8007248:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800724a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800724e:	2b00      	cmp	r3, #0
 8007250:	da17      	bge.n	8007282 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007252:	78fb      	ldrb	r3, [r7, #3]
 8007254:	015a      	lsls	r2, r3, #5
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	4413      	add	r3, r2
 800725a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	78fa      	ldrb	r2, [r7, #3]
 8007262:	0151      	lsls	r1, r2, #5
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	440a      	add	r2, r1
 8007268:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800726c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007270:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007272:	e006      	b.n	8007282 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	77fb      	strb	r3, [r7, #31]
      break;
 8007278:	e004      	b.n	8007284 <USB_HC_Init+0x14c>
      break;
 800727a:	bf00      	nop
 800727c:	e002      	b.n	8007284 <USB_HC_Init+0x14c>
      break;
 800727e:	bf00      	nop
 8007280:	e000      	b.n	8007284 <USB_HC_Init+0x14c>
      break;
 8007282:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007284:	78fb      	ldrb	r3, [r7, #3]
 8007286:	015a      	lsls	r2, r3, #5
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	4413      	add	r3, r2
 800728c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	78fa      	ldrb	r2, [r7, #3]
 8007294:	0151      	lsls	r1, r2, #5
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	440a      	add	r2, r1
 800729a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800729e:	f043 0302 	orr.w	r3, r3, #2
 80072a2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072aa:	699a      	ldr	r2, [r3, #24]
 80072ac:	78fb      	ldrb	r3, [r7, #3]
 80072ae:	f003 030f 	and.w	r3, r3, #15
 80072b2:	2101      	movs	r1, #1
 80072b4:	fa01 f303 	lsl.w	r3, r1, r3
 80072b8:	6939      	ldr	r1, [r7, #16]
 80072ba:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80072be:	4313      	orrs	r3, r2
 80072c0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80072ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	da03      	bge.n	80072de <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80072d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072da:	61bb      	str	r3, [r7, #24]
 80072dc:	e001      	b.n	80072e2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80072de:	2300      	movs	r3, #0
 80072e0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7ff feff 	bl	80070e6 <USB_GetHostSpeed>
 80072e8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80072ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d106      	bne.n	8007300 <USB_HC_Init+0x1c8>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d003      	beq.n	8007300 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80072f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80072fc:	617b      	str	r3, [r7, #20]
 80072fe:	e001      	b.n	8007304 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007300:	2300      	movs	r3, #0
 8007302:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007304:	787b      	ldrb	r3, [r7, #1]
 8007306:	059b      	lsls	r3, r3, #22
 8007308:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800730c:	78bb      	ldrb	r3, [r7, #2]
 800730e:	02db      	lsls	r3, r3, #11
 8007310:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007314:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007316:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800731a:	049b      	lsls	r3, r3, #18
 800731c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007320:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007322:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007324:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007328:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800732e:	78fb      	ldrb	r3, [r7, #3]
 8007330:	0159      	lsls	r1, r3, #5
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	440b      	add	r3, r1
 8007336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800733a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007340:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007342:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007346:	2b03      	cmp	r3, #3
 8007348:	d003      	beq.n	8007352 <USB_HC_Init+0x21a>
 800734a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800734e:	2b01      	cmp	r3, #1
 8007350:	d10f      	bne.n	8007372 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007352:	78fb      	ldrb	r3, [r7, #3]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	4413      	add	r3, r2
 800735a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	78fa      	ldrb	r2, [r7, #3]
 8007362:	0151      	lsls	r1, r2, #5
 8007364:	693a      	ldr	r2, [r7, #16]
 8007366:	440a      	add	r2, r1
 8007368:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800736c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007370:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007372:	7ffb      	ldrb	r3, [r7, #31]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3720      	adds	r7, #32
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b08c      	sub	sp, #48	; 0x30
 8007380:	af02      	add	r7, sp, #8
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	4613      	mov	r3, r2
 8007388:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	785b      	ldrb	r3, [r3, #1]
 8007392:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007394:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007398:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800739e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d02d      	beq.n	8007402 <USB_HC_StartXfer+0x86>
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	791b      	ldrb	r3, [r3, #4]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d129      	bne.n	8007402 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80073ae:	79fb      	ldrb	r3, [r7, #7]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d117      	bne.n	80073e4 <USB_HC_StartXfer+0x68>
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	79db      	ldrb	r3, [r3, #7]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d003      	beq.n	80073c4 <USB_HC_StartXfer+0x48>
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	79db      	ldrb	r3, [r3, #7]
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d10f      	bne.n	80073e4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	015a      	lsls	r2, r3, #5
 80073c8:	6a3b      	ldr	r3, [r7, #32]
 80073ca:	4413      	add	r3, r2
 80073cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	69fa      	ldr	r2, [r7, #28]
 80073d4:	0151      	lsls	r1, r2, #5
 80073d6:	6a3a      	ldr	r2, [r7, #32]
 80073d8:	440a      	add	r2, r1
 80073da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073e2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80073e4:	79fb      	ldrb	r3, [r7, #7]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10b      	bne.n	8007402 <USB_HC_StartXfer+0x86>
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	795b      	ldrb	r3, [r3, #5]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d107      	bne.n	8007402 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	785b      	ldrb	r3, [r3, #1]
 80073f6:	4619      	mov	r1, r3
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f000 fa0f 	bl	800781c <USB_DoPing>
      return HAL_OK;
 80073fe:	2300      	movs	r3, #0
 8007400:	e0f8      	b.n	80075f4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d018      	beq.n	800743c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	695b      	ldr	r3, [r3, #20]
 800740e:	68ba      	ldr	r2, [r7, #8]
 8007410:	8912      	ldrh	r2, [r2, #8]
 8007412:	4413      	add	r3, r2
 8007414:	3b01      	subs	r3, #1
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	8912      	ldrh	r2, [r2, #8]
 800741a:	fbb3 f3f2 	udiv	r3, r3, r2
 800741e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007420:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007422:	8b7b      	ldrh	r3, [r7, #26]
 8007424:	429a      	cmp	r2, r3
 8007426:	d90b      	bls.n	8007440 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007428:	8b7b      	ldrh	r3, [r7, #26]
 800742a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800742c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	8912      	ldrh	r2, [r2, #8]
 8007432:	fb03 f202 	mul.w	r2, r3, r2
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	611a      	str	r2, [r3, #16]
 800743a:	e001      	b.n	8007440 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800743c:	2301      	movs	r3, #1
 800743e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	78db      	ldrb	r3, [r3, #3]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d007      	beq.n	8007458 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007448:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	8912      	ldrh	r2, [r2, #8]
 800744e:	fb03 f202 	mul.w	r2, r3, r2
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	611a      	str	r2, [r3, #16]
 8007456:	e003      	b.n	8007460 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	695a      	ldr	r2, [r3, #20]
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007468:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800746a:	04d9      	lsls	r1, r3, #19
 800746c:	4b63      	ldr	r3, [pc, #396]	; (80075fc <USB_HC_StartXfer+0x280>)
 800746e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007470:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	7a9b      	ldrb	r3, [r3, #10]
 8007476:	075b      	lsls	r3, r3, #29
 8007478:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800747c:	69f9      	ldr	r1, [r7, #28]
 800747e:	0148      	lsls	r0, r1, #5
 8007480:	6a39      	ldr	r1, [r7, #32]
 8007482:	4401      	add	r1, r0
 8007484:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007488:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800748a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800748c:	79fb      	ldrb	r3, [r7, #7]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d009      	beq.n	80074a6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	68d9      	ldr	r1, [r3, #12]
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	015a      	lsls	r2, r3, #5
 800749a:	6a3b      	ldr	r3, [r7, #32]
 800749c:	4413      	add	r3, r2
 800749e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074a2:	460a      	mov	r2, r1
 80074a4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80074a6:	6a3b      	ldr	r3, [r7, #32]
 80074a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f003 0301 	and.w	r3, r3, #1
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	bf0c      	ite	eq
 80074b6:	2301      	moveq	r3, #1
 80074b8:	2300      	movne	r3, #0
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	015a      	lsls	r2, r3, #5
 80074c2:	6a3b      	ldr	r3, [r7, #32]
 80074c4:	4413      	add	r3, r2
 80074c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	69fa      	ldr	r2, [r7, #28]
 80074ce:	0151      	lsls	r1, r2, #5
 80074d0:	6a3a      	ldr	r2, [r7, #32]
 80074d2:	440a      	add	r2, r1
 80074d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074d8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80074dc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	015a      	lsls	r2, r3, #5
 80074e2:	6a3b      	ldr	r3, [r7, #32]
 80074e4:	4413      	add	r3, r2
 80074e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	7e7b      	ldrb	r3, [r7, #25]
 80074ee:	075b      	lsls	r3, r3, #29
 80074f0:	69f9      	ldr	r1, [r7, #28]
 80074f2:	0148      	lsls	r0, r1, #5
 80074f4:	6a39      	ldr	r1, [r7, #32]
 80074f6:	4401      	add	r1, r0
 80074f8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80074fc:	4313      	orrs	r3, r2
 80074fe:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	015a      	lsls	r2, r3, #5
 8007504:	6a3b      	ldr	r3, [r7, #32]
 8007506:	4413      	add	r3, r2
 8007508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007516:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	78db      	ldrb	r3, [r3, #3]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d004      	beq.n	800752a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007526:	613b      	str	r3, [r7, #16]
 8007528:	e003      	b.n	8007532 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007530:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007538:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	015a      	lsls	r2, r3, #5
 800753e:	6a3b      	ldr	r3, [r7, #32]
 8007540:	4413      	add	r3, r2
 8007542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007546:	461a      	mov	r2, r3
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800754c:	79fb      	ldrb	r3, [r7, #7]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007552:	2300      	movs	r3, #0
 8007554:	e04e      	b.n	80075f4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	78db      	ldrb	r3, [r3, #3]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d149      	bne.n	80075f2 <USB_HC_StartXfer+0x276>
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d045      	beq.n	80075f2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	79db      	ldrb	r3, [r3, #7]
 800756a:	2b03      	cmp	r3, #3
 800756c:	d830      	bhi.n	80075d0 <USB_HC_StartXfer+0x254>
 800756e:	a201      	add	r2, pc, #4	; (adr r2, 8007574 <USB_HC_StartXfer+0x1f8>)
 8007570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007574:	08007585 	.word	0x08007585
 8007578:	080075a9 	.word	0x080075a9
 800757c:	08007585 	.word	0x08007585
 8007580:	080075a9 	.word	0x080075a9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	695b      	ldr	r3, [r3, #20]
 8007588:	3303      	adds	r3, #3
 800758a:	089b      	lsrs	r3, r3, #2
 800758c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800758e:	8afa      	ldrh	r2, [r7, #22]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007594:	b29b      	uxth	r3, r3
 8007596:	429a      	cmp	r2, r3
 8007598:	d91c      	bls.n	80075d4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	f043 0220 	orr.w	r2, r3, #32
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	619a      	str	r2, [r3, #24]
        }
        break;
 80075a6:	e015      	b.n	80075d4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	695b      	ldr	r3, [r3, #20]
 80075ac:	3303      	adds	r3, #3
 80075ae:	089b      	lsrs	r3, r3, #2
 80075b0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80075b2:	8afa      	ldrh	r2, [r7, #22]
 80075b4:	6a3b      	ldr	r3, [r7, #32]
 80075b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	b29b      	uxth	r3, r3
 80075be:	429a      	cmp	r2, r3
 80075c0:	d90a      	bls.n	80075d8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	619a      	str	r2, [r3, #24]
        }
        break;
 80075ce:	e003      	b.n	80075d8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80075d0:	bf00      	nop
 80075d2:	e002      	b.n	80075da <USB_HC_StartXfer+0x25e>
        break;
 80075d4:	bf00      	nop
 80075d6:	e000      	b.n	80075da <USB_HC_StartXfer+0x25e>
        break;
 80075d8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	68d9      	ldr	r1, [r3, #12]
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	785a      	ldrb	r2, [r3, #1]
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	2000      	movs	r0, #0
 80075ea:	9000      	str	r0, [sp, #0]
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f7ff fb31 	bl	8006c54 <USB_WritePacket>
  }

  return HAL_OK;
 80075f2:	2300      	movs	r3, #0
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3728      	adds	r7, #40	; 0x28
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	1ff80000 	.word	0x1ff80000

08007600 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007612:	695b      	ldr	r3, [r3, #20]
 8007614:	b29b      	uxth	r3, r3
}
 8007616:	4618      	mov	r0, r3
 8007618:	3714      	adds	r7, #20
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr

08007622 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007622:	b480      	push	{r7}
 8007624:	b089      	sub	sp, #36	; 0x24
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
 800762a:	460b      	mov	r3, r1
 800762c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007632:	78fb      	ldrb	r3, [r7, #3]
 8007634:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007636:	2300      	movs	r3, #0
 8007638:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	015a      	lsls	r2, r3, #5
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	4413      	add	r3, r2
 8007642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	0c9b      	lsrs	r3, r3, #18
 800764a:	f003 0303 	and.w	r3, r3, #3
 800764e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	4413      	add	r3, r2
 8007658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	0fdb      	lsrs	r3, r3, #31
 8007660:	f003 0301 	and.w	r3, r3, #1
 8007664:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f003 0320 	and.w	r3, r3, #32
 800766e:	2b20      	cmp	r3, #32
 8007670:	d104      	bne.n	800767c <USB_HC_Halt+0x5a>
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007678:	2300      	movs	r3, #0
 800767a:	e0c8      	b.n	800780e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d002      	beq.n	8007688 <USB_HC_Halt+0x66>
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	2b02      	cmp	r3, #2
 8007686:	d163      	bne.n	8007750 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	015a      	lsls	r2, r3, #5
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	4413      	add	r3, r2
 8007690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	69ba      	ldr	r2, [r7, #24]
 8007698:	0151      	lsls	r1, r2, #5
 800769a:	69fa      	ldr	r2, [r7, #28]
 800769c:	440a      	add	r2, r1
 800769e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076a6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f003 0320 	and.w	r3, r3, #32
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f040 80ab 	bne.w	800780c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d133      	bne.n	800772a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	015a      	lsls	r2, r3, #5
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	4413      	add	r3, r2
 80076ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	69ba      	ldr	r2, [r7, #24]
 80076d2:	0151      	lsls	r1, r2, #5
 80076d4:	69fa      	ldr	r2, [r7, #28]
 80076d6:	440a      	add	r2, r1
 80076d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076e0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	015a      	lsls	r2, r3, #5
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	4413      	add	r3, r2
 80076ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	69ba      	ldr	r2, [r7, #24]
 80076f2:	0151      	lsls	r1, r2, #5
 80076f4:	69fa      	ldr	r2, [r7, #28]
 80076f6:	440a      	add	r2, r1
 80076f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007700:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	3301      	adds	r3, #1
 8007706:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800770e:	d81d      	bhi.n	800774c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	015a      	lsls	r2, r3, #5
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	4413      	add	r3, r2
 8007718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007722:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007726:	d0ec      	beq.n	8007702 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007728:	e070      	b.n	800780c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	015a      	lsls	r2, r3, #5
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	4413      	add	r3, r2
 8007732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	69ba      	ldr	r2, [r7, #24]
 800773a:	0151      	lsls	r1, r2, #5
 800773c:	69fa      	ldr	r2, [r7, #28]
 800773e:	440a      	add	r2, r1
 8007740:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007744:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007748:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800774a:	e05f      	b.n	800780c <USB_HC_Halt+0x1ea>
            break;
 800774c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800774e:	e05d      	b.n	800780c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	015a      	lsls	r2, r3, #5
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	4413      	add	r3, r2
 8007758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	69ba      	ldr	r2, [r7, #24]
 8007760:	0151      	lsls	r1, r2, #5
 8007762:	69fa      	ldr	r2, [r7, #28]
 8007764:	440a      	add	r2, r1
 8007766:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800776a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800776e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800777c:	2b00      	cmp	r3, #0
 800777e:	d133      	bne.n	80077e8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	015a      	lsls	r2, r3, #5
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	4413      	add	r3, r2
 8007788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	69ba      	ldr	r2, [r7, #24]
 8007790:	0151      	lsls	r1, r2, #5
 8007792:	69fa      	ldr	r2, [r7, #28]
 8007794:	440a      	add	r2, r1
 8007796:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800779a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800779e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	015a      	lsls	r2, r3, #5
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	4413      	add	r3, r2
 80077a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	69ba      	ldr	r2, [r7, #24]
 80077b0:	0151      	lsls	r1, r2, #5
 80077b2:	69fa      	ldr	r2, [r7, #28]
 80077b4:	440a      	add	r2, r1
 80077b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80077be:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	3301      	adds	r3, #1
 80077c4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077cc:	d81d      	bhi.n	800780a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	015a      	lsls	r2, r3, #5
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	4413      	add	r3, r2
 80077d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077e4:	d0ec      	beq.n	80077c0 <USB_HC_Halt+0x19e>
 80077e6:	e011      	b.n	800780c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	69ba      	ldr	r2, [r7, #24]
 80077f8:	0151      	lsls	r1, r2, #5
 80077fa:	69fa      	ldr	r2, [r7, #28]
 80077fc:	440a      	add	r2, r1
 80077fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007802:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007806:	6013      	str	r3, [r2, #0]
 8007808:	e000      	b.n	800780c <USB_HC_Halt+0x1ea>
          break;
 800780a:	bf00      	nop
    }
  }

  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3724      	adds	r7, #36	; 0x24
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
	...

0800781c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800781c:	b480      	push	{r7}
 800781e:	b087      	sub	sp, #28
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	460b      	mov	r3, r1
 8007826:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800782c:	78fb      	ldrb	r3, [r7, #3]
 800782e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007830:	2301      	movs	r3, #1
 8007832:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	04da      	lsls	r2, r3, #19
 8007838:	4b15      	ldr	r3, [pc, #84]	; (8007890 <USB_DoPing+0x74>)
 800783a:	4013      	ands	r3, r2
 800783c:	693a      	ldr	r2, [r7, #16]
 800783e:	0151      	lsls	r1, r2, #5
 8007840:	697a      	ldr	r2, [r7, #20]
 8007842:	440a      	add	r2, r1
 8007844:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007848:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800784c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	015a      	lsls	r2, r3, #5
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	4413      	add	r3, r2
 8007856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007864:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800786c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	015a      	lsls	r2, r3, #5
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	4413      	add	r3, r2
 8007876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800787a:	461a      	mov	r2, r3
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	371c      	adds	r7, #28
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	1ff80000 	.word	0x1ff80000

08007894 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b088      	sub	sp, #32
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80078a4:	2300      	movs	r3, #0
 80078a6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f7ff f911 	bl	8006ad0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80078ae:	2110      	movs	r1, #16
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f7ff f96b 	bl	8006b8c <USB_FlushTxFifo>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f7ff f997 	bl	8006bf4 <USB_FlushRxFifo>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d001      	beq.n	80078d0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80078d0:	2300      	movs	r3, #0
 80078d2:	61bb      	str	r3, [r7, #24]
 80078d4:	e01f      	b.n	8007916 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	015a      	lsls	r2, r3, #5
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	4413      	add	r3, r2
 80078de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078ec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078f4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80078fc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	015a      	lsls	r2, r3, #5
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	4413      	add	r3, r2
 8007906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800790a:	461a      	mov	r2, r3
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	3301      	adds	r3, #1
 8007914:	61bb      	str	r3, [r7, #24]
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	2b0f      	cmp	r3, #15
 800791a:	d9dc      	bls.n	80078d6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800791c:	2300      	movs	r3, #0
 800791e:	61bb      	str	r3, [r7, #24]
 8007920:	e034      	b.n	800798c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	015a      	lsls	r2, r3, #5
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	4413      	add	r3, r2
 800792a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007938:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007940:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007948:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	015a      	lsls	r2, r3, #5
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	4413      	add	r3, r2
 8007952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007956:	461a      	mov	r2, r3
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	3301      	adds	r3, #1
 8007960:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007968:	d80c      	bhi.n	8007984 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	015a      	lsls	r2, r3, #5
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	4413      	add	r3, r2
 8007972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800797c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007980:	d0ec      	beq.n	800795c <USB_StopHost+0xc8>
 8007982:	e000      	b.n	8007986 <USB_StopHost+0xf2>
        break;
 8007984:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	3301      	adds	r3, #1
 800798a:	61bb      	str	r3, [r7, #24]
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	2b0f      	cmp	r3, #15
 8007990:	d9c7      	bls.n	8007922 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007998:	461a      	mov	r2, r3
 800799a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800799e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079a6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f7ff f880 	bl	8006aae <USB_EnableGlobalInt>

  return ret;
 80079ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3720      	adds	r7, #32
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80079bc:	4904      	ldr	r1, [pc, #16]	; (80079d0 <MX_FATFS_Init+0x18>)
 80079be:	4805      	ldr	r0, [pc, #20]	; (80079d4 <MX_FATFS_Init+0x1c>)
 80079c0:	f005 fc98 	bl	800d2f4 <FATFS_LinkDriver>
 80079c4:	4603      	mov	r3, r0
 80079c6:	461a      	mov	r2, r3
 80079c8:	4b03      	ldr	r3, [pc, #12]	; (80079d8 <MX_FATFS_Init+0x20>)
 80079ca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80079cc:	bf00      	nop
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	20001450 	.word	0x20001450
 80079d4:	0800dcd0 	.word	0x0800dcd0
 80079d8:	2000144c 	.word	0x2000144c

080079dc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80079dc:	b480      	push	{r7}
 80079de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80079e0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	4603      	mov	r3, r0
 80079f4:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8007a12:	79fb      	ldrb	r3, [r7, #7]
 8007a14:	4619      	mov	r1, r3
 8007a16:	4808      	ldr	r0, [pc, #32]	; (8007a38 <USBH_status+0x34>)
 8007a18:	f000 fe32 	bl	8008680 <USBH_MSC_UnitIsReady>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d002      	beq.n	8007a28 <USBH_status+0x24>
  {
    res = RES_OK;
 8007a22:	2300      	movs	r3, #0
 8007a24:	73fb      	strb	r3, [r7, #15]
 8007a26:	e001      	b.n	8007a2c <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8007a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	200016b8 	.word	0x200016b8

08007a3c <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b094      	sub	sp, #80	; 0x50
 8007a40:	af02      	add	r7, sp, #8
 8007a42:	60b9      	str	r1, [r7, #8]
 8007a44:	607a      	str	r2, [r7, #4]
 8007a46:	603b      	str	r3, [r7, #0]
 8007a48:	4603      	mov	r3, r0
 8007a4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8007a52:	7bf9      	ldrb	r1, [r7, #15]
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	4813      	ldr	r0, [pc, #76]	; (8007aac <USBH_read+0x70>)
 8007a5e:	f000 fe59 	bl	8008714 <USBH_MSC_Read>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d103      	bne.n	8007a70 <USBH_read+0x34>
  {
    res = RES_OK;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007a6e:	e017      	b.n	8007aa0 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8007a70:	f107 0210 	add.w	r2, r7, #16
 8007a74:	7bfb      	ldrb	r3, [r7, #15]
 8007a76:	4619      	mov	r1, r3
 8007a78:	480c      	ldr	r0, [pc, #48]	; (8007aac <USBH_read+0x70>)
 8007a7a:	f000 fe27 	bl	80086cc <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8007a7e:	7f7b      	ldrb	r3, [r7, #29]
 8007a80:	2b3a      	cmp	r3, #58	; 0x3a
 8007a82:	d005      	beq.n	8007a90 <USBH_read+0x54>
 8007a84:	2b3a      	cmp	r3, #58	; 0x3a
 8007a86:	dc07      	bgt.n	8007a98 <USBH_read+0x5c>
 8007a88:	2b04      	cmp	r3, #4
 8007a8a:	d001      	beq.n	8007a90 <USBH_read+0x54>
 8007a8c:	2b28      	cmp	r3, #40	; 0x28
 8007a8e:	d103      	bne.n	8007a98 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8007a90:	2303      	movs	r3, #3
 8007a92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007a96:	e003      	b.n	8007aa0 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007a9e:	bf00      	nop
    }
  }

  return res;
 8007aa0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3748      	adds	r7, #72	; 0x48
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	200016b8 	.word	0x200016b8

08007ab0 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b094      	sub	sp, #80	; 0x50
 8007ab4:	af02      	add	r7, sp, #8
 8007ab6:	60b9      	str	r1, [r7, #8]
 8007ab8:	607a      	str	r2, [r7, #4]
 8007aba:	603b      	str	r3, [r7, #0]
 8007abc:	4603      	mov	r3, r0
 8007abe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8007ac6:	7bf9      	ldrb	r1, [r7, #15]
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	4817      	ldr	r0, [pc, #92]	; (8007b30 <USBH_write+0x80>)
 8007ad2:	f000 fe88 	bl	80087e6 <USBH_MSC_Write>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d103      	bne.n	8007ae4 <USBH_write+0x34>
  {
    res = RES_OK;
 8007adc:	2300      	movs	r3, #0
 8007ade:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007ae2:	e01f      	b.n	8007b24 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8007ae4:	f107 0210 	add.w	r2, r7, #16
 8007ae8:	7bfb      	ldrb	r3, [r7, #15]
 8007aea:	4619      	mov	r1, r3
 8007aec:	4810      	ldr	r0, [pc, #64]	; (8007b30 <USBH_write+0x80>)
 8007aee:	f000 fded 	bl	80086cc <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8007af2:	7f7b      	ldrb	r3, [r7, #29]
 8007af4:	2b3a      	cmp	r3, #58	; 0x3a
 8007af6:	d00d      	beq.n	8007b14 <USBH_write+0x64>
 8007af8:	2b3a      	cmp	r3, #58	; 0x3a
 8007afa:	dc0f      	bgt.n	8007b1c <USBH_write+0x6c>
 8007afc:	2b28      	cmp	r3, #40	; 0x28
 8007afe:	d009      	beq.n	8007b14 <USBH_write+0x64>
 8007b00:	2b28      	cmp	r3, #40	; 0x28
 8007b02:	dc0b      	bgt.n	8007b1c <USBH_write+0x6c>
 8007b04:	2b04      	cmp	r3, #4
 8007b06:	d005      	beq.n	8007b14 <USBH_write+0x64>
 8007b08:	2b27      	cmp	r3, #39	; 0x27
 8007b0a:	d107      	bne.n	8007b1c <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007b12:	e007      	b.n	8007b24 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8007b14:	2303      	movs	r3, #3
 8007b16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007b1a:	e003      	b.n	8007b24 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007b22:	bf00      	nop
    }
  }

  return res;
 8007b24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3748      	adds	r7, #72	; 0x48
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	200016b8 	.word	0x200016b8

08007b34 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b090      	sub	sp, #64	; 0x40
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	603a      	str	r2, [r7, #0]
 8007b3e:	71fb      	strb	r3, [r7, #7]
 8007b40:	460b      	mov	r3, r1
 8007b42:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8007b4a:	79bb      	ldrb	r3, [r7, #6]
 8007b4c:	2b03      	cmp	r3, #3
 8007b4e:	d852      	bhi.n	8007bf6 <USBH_ioctl+0xc2>
 8007b50:	a201      	add	r2, pc, #4	; (adr r2, 8007b58 <USBH_ioctl+0x24>)
 8007b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b56:	bf00      	nop
 8007b58:	08007b69 	.word	0x08007b69
 8007b5c:	08007b71 	.word	0x08007b71
 8007b60:	08007b9b 	.word	0x08007b9b
 8007b64:	08007bc7 	.word	0x08007bc7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007b6e:	e045      	b.n	8007bfc <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007b70:	f107 0208 	add.w	r2, r7, #8
 8007b74:	79fb      	ldrb	r3, [r7, #7]
 8007b76:	4619      	mov	r1, r3
 8007b78:	4823      	ldr	r0, [pc, #140]	; (8007c08 <USBH_ioctl+0xd4>)
 8007b7a:	f000 fda7 	bl	80086cc <USBH_MSC_GetLUNInfo>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d106      	bne.n	8007b92 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007b90:	e034      	b.n	8007bfc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007b98:	e030      	b.n	8007bfc <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007b9a:	f107 0208 	add.w	r2, r7, #8
 8007b9e:	79fb      	ldrb	r3, [r7, #7]
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	4819      	ldr	r0, [pc, #100]	; (8007c08 <USBH_ioctl+0xd4>)
 8007ba4:	f000 fd92 	bl	80086cc <USBH_MSC_GetLUNInfo>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d107      	bne.n	8007bbe <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8007bae:	8a3b      	ldrh	r3, [r7, #16]
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007bbc:	e01e      	b.n	8007bfc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007bc4:	e01a      	b.n	8007bfc <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007bc6:	f107 0208 	add.w	r2, r7, #8
 8007bca:	79fb      	ldrb	r3, [r7, #7]
 8007bcc:	4619      	mov	r1, r3
 8007bce:	480e      	ldr	r0, [pc, #56]	; (8007c08 <USBH_ioctl+0xd4>)
 8007bd0:	f000 fd7c 	bl	80086cc <USBH_MSC_GetLUNInfo>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d109      	bne.n	8007bee <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8007bda:	8a3b      	ldrh	r3, [r7, #16]
 8007bdc:	0a5b      	lsrs	r3, r3, #9
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	461a      	mov	r2, r3
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007be6:	2300      	movs	r3, #0
 8007be8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007bec:	e006      	b.n	8007bfc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007bf4:	e002      	b.n	8007bfc <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8007bf6:	2304      	movs	r3, #4
 8007bf8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8007bfc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3740      	adds	r7, #64	; 0x40
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	200016b8 	.word	0x200016b8

08007c0c <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007c0c:	b590      	push	{r4, r7, lr}
 8007c0e:	b089      	sub	sp, #36	; 0x24
 8007c10:	af04      	add	r7, sp, #16
 8007c12:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c1a:	7919      	ldrb	r1, [r3, #4]
 8007c1c:	2350      	movs	r3, #80	; 0x50
 8007c1e:	2206      	movs	r2, #6
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f001 fc6b 	bl	80094fc <USBH_FindInterface>
 8007c26:	4603      	mov	r3, r0
 8007c28:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8007c2a:	7bfb      	ldrb	r3, [r7, #15]
 8007c2c:	2bff      	cmp	r3, #255	; 0xff
 8007c2e:	d002      	beq.n	8007c36 <USBH_MSC_InterfaceInit+0x2a>
 8007c30:	7bfb      	ldrb	r3, [r7, #15]
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d901      	bls.n	8007c3a <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007c36:	2302      	movs	r3, #2
 8007c38:	e106      	b.n	8007e48 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8007c3a:	7bfb      	ldrb	r3, [r7, #15]
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f001 fc40 	bl	80094c4 <USBH_SelectInterface>
 8007c44:	4603      	mov	r3, r0
 8007c46:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007c48:	7bbb      	ldrb	r3, [r7, #14]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d001      	beq.n	8007c52 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8007c4e:	2302      	movs	r3, #2
 8007c50:	e0fa      	b.n	8007e48 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007c58:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007c5c:	f005 fe96 	bl	800d98c <malloc>
 8007c60:	4603      	mov	r3, r0
 8007c62:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c6a:	69db      	ldr	r3, [r3, #28]
 8007c6c:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d101      	bne.n	8007c78 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8007c74:	2302      	movs	r3, #2
 8007c76:	e0e7      	b.n	8007e48 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8007c78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	68b8      	ldr	r0, [r7, #8]
 8007c80:	f005 fea2 	bl	800d9c8 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	211a      	movs	r1, #26
 8007c8a:	fb01 f303 	mul.w	r3, r1, r3
 8007c8e:	4413      	add	r3, r2
 8007c90:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	b25b      	sxtb	r3, r3
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	da16      	bge.n	8007cca <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007c9c:	7bfb      	ldrb	r3, [r7, #15]
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	211a      	movs	r1, #26
 8007ca2:	fb01 f303 	mul.w	r3, r1, r3
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007cac:	781a      	ldrb	r2, [r3, #0]
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007cb2:	7bfb      	ldrb	r3, [r7, #15]
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	211a      	movs	r1, #26
 8007cb8:	fb01 f303 	mul.w	r3, r1, r3
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007cc2:	881a      	ldrh	r2, [r3, #0]
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	815a      	strh	r2, [r3, #10]
 8007cc8:	e015      	b.n	8007cf6 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007cca:	7bfb      	ldrb	r3, [r7, #15]
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	211a      	movs	r1, #26
 8007cd0:	fb01 f303 	mul.w	r3, r1, r3
 8007cd4:	4413      	add	r3, r2
 8007cd6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007cda:	781a      	ldrb	r2, [r3, #0]
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	211a      	movs	r1, #26
 8007ce6:	fb01 f303 	mul.w	r3, r1, r3
 8007cea:	4413      	add	r3, r2
 8007cec:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007cf0:	881a      	ldrh	r2, [r3, #0]
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007cf6:	7bfb      	ldrb	r3, [r7, #15]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	211a      	movs	r1, #26
 8007cfc:	fb01 f303 	mul.w	r3, r1, r3
 8007d00:	4413      	add	r3, r2
 8007d02:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	b25b      	sxtb	r3, r3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	da16      	bge.n	8007d3c <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007d0e:	7bfb      	ldrb	r3, [r7, #15]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	211a      	movs	r1, #26
 8007d14:	fb01 f303 	mul.w	r3, r1, r3
 8007d18:	4413      	add	r3, r2
 8007d1a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007d1e:	781a      	ldrb	r2, [r3, #0]
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007d24:	7bfb      	ldrb	r3, [r7, #15]
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	211a      	movs	r1, #26
 8007d2a:	fb01 f303 	mul.w	r3, r1, r3
 8007d2e:	4413      	add	r3, r2
 8007d30:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007d34:	881a      	ldrh	r2, [r3, #0]
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	815a      	strh	r2, [r3, #10]
 8007d3a:	e015      	b.n	8007d68 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	211a      	movs	r1, #26
 8007d42:	fb01 f303 	mul.w	r3, r1, r3
 8007d46:	4413      	add	r3, r2
 8007d48:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007d4c:	781a      	ldrb	r2, [r3, #0]
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007d52:	7bfb      	ldrb	r3, [r7, #15]
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	211a      	movs	r1, #26
 8007d58:	fb01 f303 	mul.w	r3, r1, r3
 8007d5c:	4413      	add	r3, r2
 8007d5e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007d62:	881a      	ldrh	r2, [r3, #0]
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	2200      	movs	r2, #0
 8007d72:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	2200      	movs	r2, #0
 8007d78:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	799b      	ldrb	r3, [r3, #6]
 8007d7e:	4619      	mov	r1, r3
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f002 fed6 	bl	800ab32 <USBH_AllocPipe>
 8007d86:	4603      	mov	r3, r0
 8007d88:	461a      	mov	r2, r3
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	79db      	ldrb	r3, [r3, #7]
 8007d92:	4619      	mov	r1, r3
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f002 fecc 	bl	800ab32 <USBH_AllocPipe>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fdc4 	bl	8008930 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	799b      	ldrb	r3, [r3, #6]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d01e      	beq.n	8007dee <USBH_MSC_InterfaceInit+0x1e2>
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	891b      	ldrh	r3, [r3, #8]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d01a      	beq.n	8007dee <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	7959      	ldrb	r1, [r3, #5]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	7998      	ldrb	r0, [r3, #6]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	8912      	ldrh	r2, [r2, #8]
 8007dd0:	9202      	str	r2, [sp, #8]
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	9201      	str	r2, [sp, #4]
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	4623      	mov	r3, r4
 8007dda:	4602      	mov	r2, r0
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f002 fe79 	bl	800aad4 <USBH_OpenPipe>
 8007de2:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	79db      	ldrb	r3, [r3, #7]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d02c      	beq.n	8007e46 <USBH_MSC_InterfaceInit+0x23a>
 8007dec:	e001      	b.n	8007df2 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8007dee:	2303      	movs	r3, #3
 8007df0:	e02a      	b.n	8007e48 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	895b      	ldrh	r3, [r3, #10]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d025      	beq.n	8007e46 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	7919      	ldrb	r1, [r3, #4]
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	79d8      	ldrb	r0, [r3, #7]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	8952      	ldrh	r2, [r2, #10]
 8007e12:	9202      	str	r2, [sp, #8]
 8007e14:	2202      	movs	r2, #2
 8007e16:	9201      	str	r2, [sp, #4]
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	4623      	mov	r3, r4
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f002 fe58 	bl	800aad4 <USBH_OpenPipe>
 8007e24:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	791b      	ldrb	r3, [r3, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f005 fceb 	bl	800d80a <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	795b      	ldrb	r3, [r3, #5]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f005 fce4 	bl	800d80a <USBH_LL_SetToggle>

  return USBH_OK;
 8007e42:	2300      	movs	r3, #0
 8007e44:	e000      	b.n	8007e48 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8007e46:	2303      	movs	r3, #3
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3714      	adds	r7, #20
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd90      	pop	{r4, r7, pc}

08007e50 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e5e:	69db      	ldr	r3, [r3, #28]
 8007e60:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	795b      	ldrb	r3, [r3, #5]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00e      	beq.n	8007e88 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	795b      	ldrb	r3, [r3, #5]
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f002 fe4e 	bl	800ab12 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	795b      	ldrb	r3, [r3, #5]
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f002 fe79 	bl	800ab74 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	791b      	ldrb	r3, [r3, #4]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d00e      	beq.n	8007eae <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	791b      	ldrb	r3, [r3, #4]
 8007e94:	4619      	mov	r1, r3
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f002 fe3b 	bl	800ab12 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	791b      	ldrb	r3, [r3, #4]
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f002 fe66 	bl	800ab74 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007eb4:	69db      	ldr	r3, [r3, #28]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00b      	beq.n	8007ed2 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ec0:	69db      	ldr	r3, [r3, #28]
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f005 fd6a 	bl	800d99c <free>
    phost->pActiveClass->pData = 0U;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ece:	2200      	movs	r2, #0
 8007ed0:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007eea:	69db      	ldr	r3, [r3, #28]
 8007eec:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	7b9b      	ldrb	r3, [r3, #14]
 8007ef6:	2b03      	cmp	r3, #3
 8007ef8:	d041      	beq.n	8007f7e <USBH_MSC_ClassRequest+0xa2>
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	dc4b      	bgt.n	8007f96 <USBH_MSC_ClassRequest+0xba>
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <USBH_MSC_ClassRequest+0x2a>
 8007f02:	2b02      	cmp	r3, #2
 8007f04:	d147      	bne.n	8007f96 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	4619      	mov	r1, r3
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 fcf1 	bl	80088f2 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8007f10:	4603      	mov	r3, r0
 8007f12:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8007f14:	7bfb      	ldrb	r3, [r7, #15]
 8007f16:	2b03      	cmp	r3, #3
 8007f18:	d104      	bne.n	8007f24 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8007f20:	2300      	movs	r3, #0
 8007f22:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8007f24:	7bfb      	ldrb	r3, [r7, #15]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d137      	bne.n	8007f9a <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	d804      	bhi.n	8007f3c <USBH_MSC_ClassRequest+0x60>
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	3301      	adds	r3, #1
 8007f38:	b2da      	uxtb	r2, r3
 8007f3a:	e000      	b.n	8007f3e <USBH_MSC_ClassRequest+0x62>
 8007f3c:	2202      	movs	r2, #2
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007f42:	2300      	movs	r3, #0
 8007f44:	73bb      	strb	r3, [r7, #14]
 8007f46:	e014      	b.n	8007f72 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8007f48:	7bbb      	ldrb	r3, [r7, #14]
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	2134      	movs	r1, #52	; 0x34
 8007f4e:	fb01 f303 	mul.w	r3, r1, r3
 8007f52:	4413      	add	r3, r2
 8007f54:	3392      	adds	r3, #146	; 0x92
 8007f56:	2202      	movs	r2, #2
 8007f58:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8007f5a:	7bbb      	ldrb	r3, [r7, #14]
 8007f5c:	68ba      	ldr	r2, [r7, #8]
 8007f5e:	2134      	movs	r1, #52	; 0x34
 8007f60:	fb01 f303 	mul.w	r3, r1, r3
 8007f64:	4413      	add	r3, r2
 8007f66:	33c1      	adds	r3, #193	; 0xc1
 8007f68:	2200      	movs	r2, #0
 8007f6a:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007f6c:	7bbb      	ldrb	r3, [r7, #14]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	73bb      	strb	r3, [r7, #14]
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	7bba      	ldrb	r2, [r7, #14]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d3e5      	bcc.n	8007f48 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8007f7c:	e00d      	b.n	8007f9a <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8007f7e:	2100      	movs	r1, #0
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f002 f888 	bl	800a096 <USBH_ClrFeature>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d108      	bne.n	8007f9e <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	7bda      	ldrb	r2, [r3, #15]
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	739a      	strb	r2, [r3, #14]
      }
      break;
 8007f94:	e003      	b.n	8007f9e <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8007f96:	bf00      	nop
 8007f98:	e002      	b.n	8007fa0 <USBH_MSC_ClassRequest+0xc4>
      break;
 8007f9a:	bf00      	nop
 8007f9c:	e000      	b.n	8007fa0 <USBH_MSC_ClassRequest+0xc4>
      break;
 8007f9e:	bf00      	nop
  }

  return status;
 8007fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
	...

08007fac <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b086      	sub	sp, #24
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fba:	69db      	ldr	r3, [r3, #28]
 8007fbc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	7b1b      	ldrb	r3, [r3, #12]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d003      	beq.n	8007fda <USBH_MSC_Process+0x2e>
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	f000 8271 	beq.w	80084ba <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8007fd8:	e272      	b.n	80084c0 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	f080 824f 	bcs.w	800848a <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	693a      	ldr	r2, [r7, #16]
 8007ff6:	2334      	movs	r3, #52	; 0x34
 8007ff8:	fb01 f303 	mul.w	r3, r1, r3
 8007ffc:	4413      	add	r3, r2
 8007ffe:	3391      	adds	r3, #145	; 0x91
 8008000:	2201      	movs	r2, #1
 8008002:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800800a:	4619      	mov	r1, r3
 800800c:	693a      	ldr	r2, [r7, #16]
 800800e:	2334      	movs	r3, #52	; 0x34
 8008010:	fb01 f303 	mul.w	r3, r1, r3
 8008014:	4413      	add	r3, r2
 8008016:	3390      	adds	r3, #144	; 0x90
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	2b08      	cmp	r3, #8
 800801c:	f200 8243 	bhi.w	80084a6 <USBH_MSC_Process+0x4fa>
 8008020:	a201      	add	r2, pc, #4	; (adr r2, 8008028 <USBH_MSC_Process+0x7c>)
 8008022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008026:	bf00      	nop
 8008028:	0800804d 	.word	0x0800804d
 800802c:	080084a7 	.word	0x080084a7
 8008030:	08008115 	.word	0x08008115
 8008034:	08008299 	.word	0x08008299
 8008038:	08008073 	.word	0x08008073
 800803c:	08008365 	.word	0x08008365
 8008040:	080084a7 	.word	0x080084a7
 8008044:	080084a7 	.word	0x080084a7
 8008048:	08008479 	.word	0x08008479
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008052:	4619      	mov	r1, r3
 8008054:	693a      	ldr	r2, [r7, #16]
 8008056:	2334      	movs	r3, #52	; 0x34
 8008058:	fb01 f303 	mul.w	r3, r1, r3
 800805c:	4413      	add	r3, r2
 800805e:	3390      	adds	r3, #144	; 0x90
 8008060:	2204      	movs	r2, #4
 8008062:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8008070:	e222      	b.n	80084b8 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008078:	b2d9      	uxtb	r1, r3
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008080:	461a      	mov	r2, r3
 8008082:	2334      	movs	r3, #52	; 0x34
 8008084:	fb02 f303 	mul.w	r3, r2, r3
 8008088:	3398      	adds	r3, #152	; 0x98
 800808a:	693a      	ldr	r2, [r7, #16]
 800808c:	4413      	add	r3, r2
 800808e:	3307      	adds	r3, #7
 8008090:	461a      	mov	r2, r3
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 ff6a 	bl	8008f6c <USBH_MSC_SCSI_Inquiry>
 8008098:	4603      	mov	r3, r0
 800809a:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800809c:	7bfb      	ldrb	r3, [r7, #15]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10b      	bne.n	80080ba <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80080a8:	4619      	mov	r1, r3
 80080aa:	693a      	ldr	r2, [r7, #16]
 80080ac:	2334      	movs	r3, #52	; 0x34
 80080ae:	fb01 f303 	mul.w	r3, r1, r3
 80080b2:	4413      	add	r3, r2
 80080b4:	3390      	adds	r3, #144	; 0x90
 80080b6:	2202      	movs	r2, #2
 80080b8:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80080ba:	7bfb      	ldrb	r3, [r7, #15]
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d10c      	bne.n	80080da <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80080c6:	4619      	mov	r1, r3
 80080c8:	693a      	ldr	r2, [r7, #16]
 80080ca:	2334      	movs	r3, #52	; 0x34
 80080cc:	fb01 f303 	mul.w	r3, r1, r3
 80080d0:	4413      	add	r3, r2
 80080d2:	3390      	adds	r3, #144	; 0x90
 80080d4:	2205      	movs	r2, #5
 80080d6:	701a      	strb	r2, [r3, #0]
            break;
 80080d8:	e1e7      	b.n	80084aa <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80080da:	7bfb      	ldrb	r3, [r7, #15]
 80080dc:	2b04      	cmp	r3, #4
 80080de:	f040 81e4 	bne.w	80084aa <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80080e8:	4619      	mov	r1, r3
 80080ea:	693a      	ldr	r2, [r7, #16]
 80080ec:	2334      	movs	r3, #52	; 0x34
 80080ee:	fb01 f303 	mul.w	r3, r1, r3
 80080f2:	4413      	add	r3, r2
 80080f4:	3390      	adds	r3, #144	; 0x90
 80080f6:	2201      	movs	r2, #1
 80080f8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008100:	4619      	mov	r1, r3
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	2334      	movs	r3, #52	; 0x34
 8008106:	fb01 f303 	mul.w	r3, r1, r3
 800810a:	4413      	add	r3, r2
 800810c:	3391      	adds	r3, #145	; 0x91
 800810e:	2202      	movs	r2, #2
 8008110:	701a      	strb	r2, [r3, #0]
            break;
 8008112:	e1ca      	b.n	80084aa <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800811a:	b2db      	uxtb	r3, r3
 800811c:	4619      	mov	r1, r3
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fe66 	bl	8008df0 <USBH_MSC_SCSI_TestUnitReady>
 8008124:	4603      	mov	r3, r0
 8008126:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8008128:	7bbb      	ldrb	r3, [r7, #14]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d149      	bne.n	80081c2 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008134:	4619      	mov	r1, r3
 8008136:	693a      	ldr	r2, [r7, #16]
 8008138:	2334      	movs	r3, #52	; 0x34
 800813a:	fb01 f303 	mul.w	r3, r1, r3
 800813e:	4413      	add	r3, r2
 8008140:	3392      	adds	r3, #146	; 0x92
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00c      	beq.n	8008162 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800814e:	4619      	mov	r1, r3
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	2334      	movs	r3, #52	; 0x34
 8008154:	fb01 f303 	mul.w	r3, r1, r3
 8008158:	4413      	add	r3, r2
 800815a:	33c1      	adds	r3, #193	; 0xc1
 800815c:	2201      	movs	r2, #1
 800815e:	701a      	strb	r2, [r3, #0]
 8008160:	e00b      	b.n	800817a <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008168:	4619      	mov	r1, r3
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	2334      	movs	r3, #52	; 0x34
 800816e:	fb01 f303 	mul.w	r3, r1, r3
 8008172:	4413      	add	r3, r2
 8008174:	33c1      	adds	r3, #193	; 0xc1
 8008176:	2200      	movs	r2, #0
 8008178:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008180:	4619      	mov	r1, r3
 8008182:	693a      	ldr	r2, [r7, #16]
 8008184:	2334      	movs	r3, #52	; 0x34
 8008186:	fb01 f303 	mul.w	r3, r1, r3
 800818a:	4413      	add	r3, r2
 800818c:	3390      	adds	r3, #144	; 0x90
 800818e:	2203      	movs	r2, #3
 8008190:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008198:	4619      	mov	r1, r3
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	2334      	movs	r3, #52	; 0x34
 800819e:	fb01 f303 	mul.w	r3, r1, r3
 80081a2:	4413      	add	r3, r2
 80081a4:	3391      	adds	r3, #145	; 0x91
 80081a6:	2200      	movs	r2, #0
 80081a8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80081b0:	4619      	mov	r1, r3
 80081b2:	693a      	ldr	r2, [r7, #16]
 80081b4:	2334      	movs	r3, #52	; 0x34
 80081b6:	fb01 f303 	mul.w	r3, r1, r3
 80081ba:	4413      	add	r3, r2
 80081bc:	3392      	adds	r3, #146	; 0x92
 80081be:	2200      	movs	r2, #0
 80081c0:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80081c2:	7bbb      	ldrb	r3, [r7, #14]
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	d14a      	bne.n	800825e <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80081ce:	4619      	mov	r1, r3
 80081d0:	693a      	ldr	r2, [r7, #16]
 80081d2:	2334      	movs	r3, #52	; 0x34
 80081d4:	fb01 f303 	mul.w	r3, r1, r3
 80081d8:	4413      	add	r3, r2
 80081da:	3392      	adds	r3, #146	; 0x92
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	2b02      	cmp	r3, #2
 80081e0:	d00c      	beq.n	80081fc <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80081e8:	4619      	mov	r1, r3
 80081ea:	693a      	ldr	r2, [r7, #16]
 80081ec:	2334      	movs	r3, #52	; 0x34
 80081ee:	fb01 f303 	mul.w	r3, r1, r3
 80081f2:	4413      	add	r3, r2
 80081f4:	33c1      	adds	r3, #193	; 0xc1
 80081f6:	2201      	movs	r2, #1
 80081f8:	701a      	strb	r2, [r3, #0]
 80081fa:	e00b      	b.n	8008214 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008202:	4619      	mov	r1, r3
 8008204:	693a      	ldr	r2, [r7, #16]
 8008206:	2334      	movs	r3, #52	; 0x34
 8008208:	fb01 f303 	mul.w	r3, r1, r3
 800820c:	4413      	add	r3, r2
 800820e:	33c1      	adds	r3, #193	; 0xc1
 8008210:	2200      	movs	r2, #0
 8008212:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800821a:	4619      	mov	r1, r3
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	2334      	movs	r3, #52	; 0x34
 8008220:	fb01 f303 	mul.w	r3, r1, r3
 8008224:	4413      	add	r3, r2
 8008226:	3390      	adds	r3, #144	; 0x90
 8008228:	2205      	movs	r2, #5
 800822a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008232:	4619      	mov	r1, r3
 8008234:	693a      	ldr	r2, [r7, #16]
 8008236:	2334      	movs	r3, #52	; 0x34
 8008238:	fb01 f303 	mul.w	r3, r1, r3
 800823c:	4413      	add	r3, r2
 800823e:	3391      	adds	r3, #145	; 0x91
 8008240:	2201      	movs	r2, #1
 8008242:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800824a:	4619      	mov	r1, r3
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	2334      	movs	r3, #52	; 0x34
 8008250:	fb01 f303 	mul.w	r3, r1, r3
 8008254:	4413      	add	r3, r2
 8008256:	3392      	adds	r3, #146	; 0x92
 8008258:	2202      	movs	r2, #2
 800825a:	701a      	strb	r2, [r3, #0]
            break;
 800825c:	e127      	b.n	80084ae <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800825e:	7bbb      	ldrb	r3, [r7, #14]
 8008260:	2b04      	cmp	r3, #4
 8008262:	f040 8124 	bne.w	80084ae <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800826c:	4619      	mov	r1, r3
 800826e:	693a      	ldr	r2, [r7, #16]
 8008270:	2334      	movs	r3, #52	; 0x34
 8008272:	fb01 f303 	mul.w	r3, r1, r3
 8008276:	4413      	add	r3, r2
 8008278:	3390      	adds	r3, #144	; 0x90
 800827a:	2201      	movs	r2, #1
 800827c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008284:	4619      	mov	r1, r3
 8008286:	693a      	ldr	r2, [r7, #16]
 8008288:	2334      	movs	r3, #52	; 0x34
 800828a:	fb01 f303 	mul.w	r3, r1, r3
 800828e:	4413      	add	r3, r2
 8008290:	3391      	adds	r3, #145	; 0x91
 8008292:	2202      	movs	r2, #2
 8008294:	701a      	strb	r2, [r3, #0]
            break;
 8008296:	e10a      	b.n	80084ae <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800829e:	b2d9      	uxtb	r1, r3
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80082a6:	461a      	mov	r2, r3
 80082a8:	2334      	movs	r3, #52	; 0x34
 80082aa:	fb02 f303 	mul.w	r3, r2, r3
 80082ae:	3390      	adds	r3, #144	; 0x90
 80082b0:	693a      	ldr	r2, [r7, #16]
 80082b2:	4413      	add	r3, r2
 80082b4:	3304      	adds	r3, #4
 80082b6:	461a      	mov	r2, r3
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fddc 	bl	8008e76 <USBH_MSC_SCSI_ReadCapacity>
 80082be:	4603      	mov	r3, r0
 80082c0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d120      	bne.n	800830a <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80082ce:	4619      	mov	r1, r3
 80082d0:	693a      	ldr	r2, [r7, #16]
 80082d2:	2334      	movs	r3, #52	; 0x34
 80082d4:	fb01 f303 	mul.w	r3, r1, r3
 80082d8:	4413      	add	r3, r2
 80082da:	3390      	adds	r3, #144	; 0x90
 80082dc:	2201      	movs	r2, #1
 80082de:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80082e6:	4619      	mov	r1, r3
 80082e8:	693a      	ldr	r2, [r7, #16]
 80082ea:	2334      	movs	r3, #52	; 0x34
 80082ec:	fb01 f303 	mul.w	r3, r1, r3
 80082f0:	4413      	add	r3, r2
 80082f2:	3391      	adds	r3, #145	; 0x91
 80082f4:	2200      	movs	r2, #0
 80082f6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80082fe:	3301      	adds	r3, #1
 8008300:	b29a      	uxth	r2, r3
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008308:	e0d3      	b.n	80084b2 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800830a:	7bfb      	ldrb	r3, [r7, #15]
 800830c:	2b02      	cmp	r3, #2
 800830e:	d10c      	bne.n	800832a <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008316:	4619      	mov	r1, r3
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	2334      	movs	r3, #52	; 0x34
 800831c:	fb01 f303 	mul.w	r3, r1, r3
 8008320:	4413      	add	r3, r2
 8008322:	3390      	adds	r3, #144	; 0x90
 8008324:	2205      	movs	r2, #5
 8008326:	701a      	strb	r2, [r3, #0]
            break;
 8008328:	e0c3      	b.n	80084b2 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800832a:	7bfb      	ldrb	r3, [r7, #15]
 800832c:	2b04      	cmp	r3, #4
 800832e:	f040 80c0 	bne.w	80084b2 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008338:	4619      	mov	r1, r3
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	2334      	movs	r3, #52	; 0x34
 800833e:	fb01 f303 	mul.w	r3, r1, r3
 8008342:	4413      	add	r3, r2
 8008344:	3390      	adds	r3, #144	; 0x90
 8008346:	2201      	movs	r2, #1
 8008348:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008350:	4619      	mov	r1, r3
 8008352:	693a      	ldr	r2, [r7, #16]
 8008354:	2334      	movs	r3, #52	; 0x34
 8008356:	fb01 f303 	mul.w	r3, r1, r3
 800835a:	4413      	add	r3, r2
 800835c:	3391      	adds	r3, #145	; 0x91
 800835e:	2202      	movs	r2, #2
 8008360:	701a      	strb	r2, [r3, #0]
            break;
 8008362:	e0a6      	b.n	80084b2 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800836a:	b2d9      	uxtb	r1, r3
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008372:	461a      	mov	r2, r3
 8008374:	2334      	movs	r3, #52	; 0x34
 8008376:	fb02 f303 	mul.w	r3, r2, r3
 800837a:	3398      	adds	r3, #152	; 0x98
 800837c:	693a      	ldr	r2, [r7, #16]
 800837e:	4413      	add	r3, r2
 8008380:	3304      	adds	r3, #4
 8008382:	461a      	mov	r2, r3
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fe96 	bl	80090b6 <USBH_MSC_SCSI_RequestSense>
 800838a:	4603      	mov	r3, r0
 800838c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800838e:	7bfb      	ldrb	r3, [r7, #15]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d145      	bne.n	8008420 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800839a:	4619      	mov	r1, r3
 800839c:	693a      	ldr	r2, [r7, #16]
 800839e:	2334      	movs	r3, #52	; 0x34
 80083a0:	fb01 f303 	mul.w	r3, r1, r3
 80083a4:	4413      	add	r3, r2
 80083a6:	339c      	adds	r3, #156	; 0x9c
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	2b06      	cmp	r3, #6
 80083ac:	d00c      	beq.n	80083c8 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80083b4:	4619      	mov	r1, r3
 80083b6:	693a      	ldr	r2, [r7, #16]
 80083b8:	2334      	movs	r3, #52	; 0x34
 80083ba:	fb01 f303 	mul.w	r3, r1, r3
 80083be:	4413      	add	r3, r2
 80083c0:	339c      	adds	r3, #156	; 0x9c
 80083c2:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d117      	bne.n	80083f8 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	f242 720f 	movw	r2, #9999	; 0x270f
 80083da:	4293      	cmp	r3, r2
 80083dc:	d80c      	bhi.n	80083f8 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80083e4:	4619      	mov	r1, r3
 80083e6:	693a      	ldr	r2, [r7, #16]
 80083e8:	2334      	movs	r3, #52	; 0x34
 80083ea:	fb01 f303 	mul.w	r3, r1, r3
 80083ee:	4413      	add	r3, r2
 80083f0:	3390      	adds	r3, #144	; 0x90
 80083f2:	2202      	movs	r2, #2
 80083f4:	701a      	strb	r2, [r3, #0]
                  break;
 80083f6:	e05f      	b.n	80084b8 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80083fe:	4619      	mov	r1, r3
 8008400:	693a      	ldr	r2, [r7, #16]
 8008402:	2334      	movs	r3, #52	; 0x34
 8008404:	fb01 f303 	mul.w	r3, r1, r3
 8008408:	4413      	add	r3, r2
 800840a:	3390      	adds	r3, #144	; 0x90
 800840c:	2201      	movs	r2, #1
 800840e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008416:	3301      	adds	r3, #1
 8008418:	b29a      	uxth	r2, r3
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8008420:	7bfb      	ldrb	r3, [r7, #15]
 8008422:	2b02      	cmp	r3, #2
 8008424:	d10c      	bne.n	8008440 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800842c:	4619      	mov	r1, r3
 800842e:	693a      	ldr	r2, [r7, #16]
 8008430:	2334      	movs	r3, #52	; 0x34
 8008432:	fb01 f303 	mul.w	r3, r1, r3
 8008436:	4413      	add	r3, r2
 8008438:	3390      	adds	r3, #144	; 0x90
 800843a:	2208      	movs	r2, #8
 800843c:	701a      	strb	r2, [r3, #0]
            break;
 800843e:	e03a      	b.n	80084b6 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008440:	7bfb      	ldrb	r3, [r7, #15]
 8008442:	2b04      	cmp	r3, #4
 8008444:	d137      	bne.n	80084b6 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800844c:	4619      	mov	r1, r3
 800844e:	693a      	ldr	r2, [r7, #16]
 8008450:	2334      	movs	r3, #52	; 0x34
 8008452:	fb01 f303 	mul.w	r3, r1, r3
 8008456:	4413      	add	r3, r2
 8008458:	3390      	adds	r3, #144	; 0x90
 800845a:	2201      	movs	r2, #1
 800845c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008464:	4619      	mov	r1, r3
 8008466:	693a      	ldr	r2, [r7, #16]
 8008468:	2334      	movs	r3, #52	; 0x34
 800846a:	fb01 f303 	mul.w	r3, r1, r3
 800846e:	4413      	add	r3, r2
 8008470:	3391      	adds	r3, #145	; 0x91
 8008472:	2202      	movs	r2, #2
 8008474:	701a      	strb	r2, [r3, #0]
            break;
 8008476:	e01e      	b.n	80084b6 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800847e:	3301      	adds	r3, #1
 8008480:	b29a      	uxth	r2, r3
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008488:	e016      	b.n	80084b8 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	2200      	movs	r2, #0
 800848e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	2201      	movs	r2, #1
 8008496:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800849e:	2102      	movs	r1, #2
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	4798      	blx	r3
      break;
 80084a4:	e00c      	b.n	80084c0 <USBH_MSC_Process+0x514>
            break;
 80084a6:	bf00      	nop
 80084a8:	e00a      	b.n	80084c0 <USBH_MSC_Process+0x514>
            break;
 80084aa:	bf00      	nop
 80084ac:	e008      	b.n	80084c0 <USBH_MSC_Process+0x514>
            break;
 80084ae:	bf00      	nop
 80084b0:	e006      	b.n	80084c0 <USBH_MSC_Process+0x514>
            break;
 80084b2:	bf00      	nop
 80084b4:	e004      	b.n	80084c0 <USBH_MSC_Process+0x514>
            break;
 80084b6:	bf00      	nop
      break;
 80084b8:	e002      	b.n	80084c0 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 80084ba:	2300      	movs	r3, #0
 80084bc:	75fb      	strb	r3, [r7, #23]
      break;
 80084be:	bf00      	nop
  }
  return error;
 80084c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3718      	adds	r7, #24
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop

080084cc <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	370c      	adds	r7, #12
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr

080084e2 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b088      	sub	sp, #32
 80084e6:	af02      	add	r7, sp, #8
 80084e8:	6078      	str	r0, [r7, #4]
 80084ea:	460b      	mov	r3, r1
 80084ec:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084f4:	69db      	ldr	r3, [r3, #28]
 80084f6:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80084f8:	2301      	movs	r3, #1
 80084fa:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80084fc:	2301      	movs	r3, #1
 80084fe:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8008500:	78fb      	ldrb	r3, [r7, #3]
 8008502:	693a      	ldr	r2, [r7, #16]
 8008504:	2134      	movs	r1, #52	; 0x34
 8008506:	fb01 f303 	mul.w	r3, r1, r3
 800850a:	4413      	add	r3, r2
 800850c:	3390      	adds	r3, #144	; 0x90
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	2b07      	cmp	r3, #7
 8008512:	d03c      	beq.n	800858e <USBH_MSC_RdWrProcess+0xac>
 8008514:	2b07      	cmp	r3, #7
 8008516:	f300 80a7 	bgt.w	8008668 <USBH_MSC_RdWrProcess+0x186>
 800851a:	2b05      	cmp	r3, #5
 800851c:	d06c      	beq.n	80085f8 <USBH_MSC_RdWrProcess+0x116>
 800851e:	2b06      	cmp	r3, #6
 8008520:	f040 80a2 	bne.w	8008668 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8008524:	78f9      	ldrb	r1, [r7, #3]
 8008526:	2300      	movs	r3, #0
 8008528:	9300      	str	r3, [sp, #0]
 800852a:	2300      	movs	r3, #0
 800852c:	2200      	movs	r2, #0
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fea5 	bl	800927e <USBH_MSC_SCSI_Read>
 8008534:	4603      	mov	r3, r0
 8008536:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008538:	7bfb      	ldrb	r3, [r7, #15]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d10b      	bne.n	8008556 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800853e:	78fb      	ldrb	r3, [r7, #3]
 8008540:	693a      	ldr	r2, [r7, #16]
 8008542:	2134      	movs	r1, #52	; 0x34
 8008544:	fb01 f303 	mul.w	r3, r1, r3
 8008548:	4413      	add	r3, r2
 800854a:	3390      	adds	r3, #144	; 0x90
 800854c:	2201      	movs	r2, #1
 800854e:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008550:	2300      	movs	r3, #0
 8008552:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008554:	e08a      	b.n	800866c <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8008556:	7bfb      	ldrb	r3, [r7, #15]
 8008558:	2b02      	cmp	r3, #2
 800855a:	d109      	bne.n	8008570 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800855c:	78fb      	ldrb	r3, [r7, #3]
 800855e:	693a      	ldr	r2, [r7, #16]
 8008560:	2134      	movs	r1, #52	; 0x34
 8008562:	fb01 f303 	mul.w	r3, r1, r3
 8008566:	4413      	add	r3, r2
 8008568:	3390      	adds	r3, #144	; 0x90
 800856a:	2205      	movs	r2, #5
 800856c:	701a      	strb	r2, [r3, #0]
      break;
 800856e:	e07d      	b.n	800866c <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008570:	7bfb      	ldrb	r3, [r7, #15]
 8008572:	2b04      	cmp	r3, #4
 8008574:	d17a      	bne.n	800866c <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008576:	78fb      	ldrb	r3, [r7, #3]
 8008578:	693a      	ldr	r2, [r7, #16]
 800857a:	2134      	movs	r1, #52	; 0x34
 800857c:	fb01 f303 	mul.w	r3, r1, r3
 8008580:	4413      	add	r3, r2
 8008582:	3390      	adds	r3, #144	; 0x90
 8008584:	2208      	movs	r2, #8
 8008586:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008588:	2302      	movs	r3, #2
 800858a:	75fb      	strb	r3, [r7, #23]
      break;
 800858c:	e06e      	b.n	800866c <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800858e:	78f9      	ldrb	r1, [r7, #3]
 8008590:	2300      	movs	r3, #0
 8008592:	9300      	str	r3, [sp, #0]
 8008594:	2300      	movs	r3, #0
 8008596:	2200      	movs	r2, #0
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fe05 	bl	80091a8 <USBH_MSC_SCSI_Write>
 800859e:	4603      	mov	r3, r0
 80085a0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d10b      	bne.n	80085c0 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80085a8:	78fb      	ldrb	r3, [r7, #3]
 80085aa:	693a      	ldr	r2, [r7, #16]
 80085ac:	2134      	movs	r1, #52	; 0x34
 80085ae:	fb01 f303 	mul.w	r3, r1, r3
 80085b2:	4413      	add	r3, r2
 80085b4:	3390      	adds	r3, #144	; 0x90
 80085b6:	2201      	movs	r2, #1
 80085b8:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80085ba:	2300      	movs	r3, #0
 80085bc:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80085be:	e057      	b.n	8008670 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 80085c0:	7bfb      	ldrb	r3, [r7, #15]
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d109      	bne.n	80085da <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80085c6:	78fb      	ldrb	r3, [r7, #3]
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	2134      	movs	r1, #52	; 0x34
 80085cc:	fb01 f303 	mul.w	r3, r1, r3
 80085d0:	4413      	add	r3, r2
 80085d2:	3390      	adds	r3, #144	; 0x90
 80085d4:	2205      	movs	r2, #5
 80085d6:	701a      	strb	r2, [r3, #0]
      break;
 80085d8:	e04a      	b.n	8008670 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80085da:	7bfb      	ldrb	r3, [r7, #15]
 80085dc:	2b04      	cmp	r3, #4
 80085de:	d147      	bne.n	8008670 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80085e0:	78fb      	ldrb	r3, [r7, #3]
 80085e2:	693a      	ldr	r2, [r7, #16]
 80085e4:	2134      	movs	r1, #52	; 0x34
 80085e6:	fb01 f303 	mul.w	r3, r1, r3
 80085ea:	4413      	add	r3, r2
 80085ec:	3390      	adds	r3, #144	; 0x90
 80085ee:	2208      	movs	r2, #8
 80085f0:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80085f2:	2302      	movs	r3, #2
 80085f4:	75fb      	strb	r3, [r7, #23]
      break;
 80085f6:	e03b      	b.n	8008670 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80085f8:	78fb      	ldrb	r3, [r7, #3]
 80085fa:	2234      	movs	r2, #52	; 0x34
 80085fc:	fb02 f303 	mul.w	r3, r2, r3
 8008600:	3398      	adds	r3, #152	; 0x98
 8008602:	693a      	ldr	r2, [r7, #16]
 8008604:	4413      	add	r3, r2
 8008606:	1d1a      	adds	r2, r3, #4
 8008608:	78fb      	ldrb	r3, [r7, #3]
 800860a:	4619      	mov	r1, r3
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 fd52 	bl	80090b6 <USBH_MSC_SCSI_RequestSense>
 8008612:	4603      	mov	r3, r0
 8008614:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008616:	7bfb      	ldrb	r3, [r7, #15]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d113      	bne.n	8008644 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800861c:	78fb      	ldrb	r3, [r7, #3]
 800861e:	693a      	ldr	r2, [r7, #16]
 8008620:	2134      	movs	r1, #52	; 0x34
 8008622:	fb01 f303 	mul.w	r3, r1, r3
 8008626:	4413      	add	r3, r2
 8008628:	3390      	adds	r3, #144	; 0x90
 800862a:	2201      	movs	r2, #1
 800862c:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800862e:	78fb      	ldrb	r3, [r7, #3]
 8008630:	693a      	ldr	r2, [r7, #16]
 8008632:	2134      	movs	r1, #52	; 0x34
 8008634:	fb01 f303 	mul.w	r3, r1, r3
 8008638:	4413      	add	r3, r2
 800863a:	3391      	adds	r3, #145	; 0x91
 800863c:	2202      	movs	r2, #2
 800863e:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8008640:	2302      	movs	r3, #2
 8008642:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8008644:	7bfb      	ldrb	r3, [r7, #15]
 8008646:	2b02      	cmp	r3, #2
 8008648:	d014      	beq.n	8008674 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800864a:	7bfb      	ldrb	r3, [r7, #15]
 800864c:	2b04      	cmp	r3, #4
 800864e:	d111      	bne.n	8008674 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008650:	78fb      	ldrb	r3, [r7, #3]
 8008652:	693a      	ldr	r2, [r7, #16]
 8008654:	2134      	movs	r1, #52	; 0x34
 8008656:	fb01 f303 	mul.w	r3, r1, r3
 800865a:	4413      	add	r3, r2
 800865c:	3390      	adds	r3, #144	; 0x90
 800865e:	2208      	movs	r2, #8
 8008660:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008662:	2302      	movs	r3, #2
 8008664:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008666:	e005      	b.n	8008674 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8008668:	bf00      	nop
 800866a:	e004      	b.n	8008676 <USBH_MSC_RdWrProcess+0x194>
      break;
 800866c:	bf00      	nop
 800866e:	e002      	b.n	8008676 <USBH_MSC_RdWrProcess+0x194>
      break;
 8008670:	bf00      	nop
 8008672:	e000      	b.n	8008676 <USBH_MSC_RdWrProcess+0x194>
      break;
 8008674:	bf00      	nop

  }
  return error;
 8008676:	7dfb      	ldrb	r3, [r7, #23]
}
 8008678:	4618      	mov	r0, r3
 800867a:	3718      	adds	r7, #24
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	460b      	mov	r3, r1
 800868a:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008692:	69db      	ldr	r3, [r3, #28]
 8008694:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	b2db      	uxtb	r3, r3
 800869c:	2b0b      	cmp	r3, #11
 800869e:	d10c      	bne.n	80086ba <USBH_MSC_UnitIsReady+0x3a>
 80086a0:	78fb      	ldrb	r3, [r7, #3]
 80086a2:	68ba      	ldr	r2, [r7, #8]
 80086a4:	2134      	movs	r1, #52	; 0x34
 80086a6:	fb01 f303 	mul.w	r3, r1, r3
 80086aa:	4413      	add	r3, r2
 80086ac:	3391      	adds	r3, #145	; 0x91
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d102      	bne.n	80086ba <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80086b4:	2301      	movs	r3, #1
 80086b6:	73fb      	strb	r3, [r7, #15]
 80086b8:	e001      	b.n	80086be <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80086ba:	2300      	movs	r3, #0
 80086bc:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80086be:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3714      	adds	r7, #20
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b086      	sub	sp, #24
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	460b      	mov	r3, r1
 80086d6:	607a      	str	r2, [r7, #4]
 80086d8:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086e0:	69db      	ldr	r3, [r3, #28]
 80086e2:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	2b0b      	cmp	r3, #11
 80086ec:	d10d      	bne.n	800870a <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80086ee:	7afb      	ldrb	r3, [r7, #11]
 80086f0:	2234      	movs	r2, #52	; 0x34
 80086f2:	fb02 f303 	mul.w	r3, r2, r3
 80086f6:	3390      	adds	r3, #144	; 0x90
 80086f8:	697a      	ldr	r2, [r7, #20]
 80086fa:	4413      	add	r3, r2
 80086fc:	2234      	movs	r2, #52	; 0x34
 80086fe:	4619      	mov	r1, r3
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f005 f953 	bl	800d9ac <memcpy>
    return USBH_OK;
 8008706:	2300      	movs	r3, #0
 8008708:	e000      	b.n	800870c <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800870a:	2302      	movs	r3, #2
  }
}
 800870c:	4618      	mov	r0, r3
 800870e:	3718      	adds	r7, #24
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b088      	sub	sp, #32
 8008718:	af02      	add	r7, sp, #8
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	607a      	str	r2, [r7, #4]
 800871e:	603b      	str	r3, [r7, #0]
 8008720:	460b      	mov	r3, r1
 8008722:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800872a:	69db      	ldr	r3, [r3, #28]
 800872c:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008734:	b2db      	uxtb	r3, r3
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00e      	beq.n	8008758 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008740:	2b0b      	cmp	r3, #11
 8008742:	d109      	bne.n	8008758 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008744:	7afb      	ldrb	r3, [r7, #11]
 8008746:	697a      	ldr	r2, [r7, #20]
 8008748:	2134      	movs	r1, #52	; 0x34
 800874a:	fb01 f303 	mul.w	r3, r1, r3
 800874e:	4413      	add	r3, r2
 8008750:	3390      	adds	r3, #144	; 0x90
 8008752:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008754:	2b01      	cmp	r3, #1
 8008756:	d001      	beq.n	800875c <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8008758:	2302      	movs	r3, #2
 800875a:	e040      	b.n	80087de <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	2206      	movs	r2, #6
 8008760:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8008762:	7afb      	ldrb	r3, [r7, #11]
 8008764:	697a      	ldr	r2, [r7, #20]
 8008766:	2134      	movs	r1, #52	; 0x34
 8008768:	fb01 f303 	mul.w	r3, r1, r3
 800876c:	4413      	add	r3, r2
 800876e:	3390      	adds	r3, #144	; 0x90
 8008770:	2206      	movs	r2, #6
 8008772:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8008774:	7afb      	ldrb	r3, [r7, #11]
 8008776:	b29a      	uxth	r2, r3
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800877e:	7af9      	ldrb	r1, [r7, #11]
 8008780:	6a3b      	ldr	r3, [r7, #32]
 8008782:	9300      	str	r3, [sp, #0]
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f000 fd78 	bl	800927e <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008794:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008796:	e016      	b.n	80087c6 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	1ad2      	subs	r2, r2, r3
 80087a2:	6a3b      	ldr	r3, [r7, #32]
 80087a4:	f242 7110 	movw	r1, #10000	; 0x2710
 80087a8:	fb01 f303 	mul.w	r3, r1, r3
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d805      	bhi.n	80087bc <USBH_MSC_Read+0xa8>
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d104      	bne.n	80087c6 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	2201      	movs	r2, #1
 80087c0:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80087c2:	2302      	movs	r3, #2
 80087c4:	e00b      	b.n	80087de <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80087c6:	7afb      	ldrb	r3, [r7, #11]
 80087c8:	4619      	mov	r1, r3
 80087ca:	68f8      	ldr	r0, [r7, #12]
 80087cc:	f7ff fe89 	bl	80084e2 <USBH_MSC_RdWrProcess>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d0e0      	beq.n	8008798 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	2201      	movs	r2, #1
 80087da:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3718      	adds	r7, #24
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b088      	sub	sp, #32
 80087ea:	af02      	add	r7, sp, #8
 80087ec:	60f8      	str	r0, [r7, #12]
 80087ee:	607a      	str	r2, [r7, #4]
 80087f0:	603b      	str	r3, [r7, #0]
 80087f2:	460b      	mov	r3, r1
 80087f4:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087fc:	69db      	ldr	r3, [r3, #28]
 80087fe:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008806:	b2db      	uxtb	r3, r3
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00e      	beq.n	800882a <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008812:	2b0b      	cmp	r3, #11
 8008814:	d109      	bne.n	800882a <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008816:	7afb      	ldrb	r3, [r7, #11]
 8008818:	697a      	ldr	r2, [r7, #20]
 800881a:	2134      	movs	r1, #52	; 0x34
 800881c:	fb01 f303 	mul.w	r3, r1, r3
 8008820:	4413      	add	r3, r2
 8008822:	3390      	adds	r3, #144	; 0x90
 8008824:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008826:	2b01      	cmp	r3, #1
 8008828:	d001      	beq.n	800882e <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800882a:	2302      	movs	r3, #2
 800882c:	e040      	b.n	80088b0 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	2207      	movs	r2, #7
 8008832:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8008834:	7afb      	ldrb	r3, [r7, #11]
 8008836:	697a      	ldr	r2, [r7, #20]
 8008838:	2134      	movs	r1, #52	; 0x34
 800883a:	fb01 f303 	mul.w	r3, r1, r3
 800883e:	4413      	add	r3, r2
 8008840:	3390      	adds	r3, #144	; 0x90
 8008842:	2207      	movs	r2, #7
 8008844:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8008846:	7afb      	ldrb	r3, [r7, #11]
 8008848:	b29a      	uxth	r2, r3
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8008850:	7af9      	ldrb	r1, [r7, #11]
 8008852:	6a3b      	ldr	r3, [r7, #32]
 8008854:	9300      	str	r3, [sp, #0]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	68f8      	ldr	r0, [r7, #12]
 800885c:	f000 fca4 	bl	80091a8 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008866:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008868:	e016      	b.n	8008898 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	1ad2      	subs	r2, r2, r3
 8008874:	6a3b      	ldr	r3, [r7, #32]
 8008876:	f242 7110 	movw	r1, #10000	; 0x2710
 800887a:	fb01 f303 	mul.w	r3, r1, r3
 800887e:	429a      	cmp	r2, r3
 8008880:	d805      	bhi.n	800888e <USBH_MSC_Write+0xa8>
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	d104      	bne.n	8008898 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	2201      	movs	r2, #1
 8008892:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8008894:	2302      	movs	r3, #2
 8008896:	e00b      	b.n	80088b0 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008898:	7afb      	ldrb	r3, [r7, #11]
 800889a:	4619      	mov	r1, r3
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f7ff fe20 	bl	80084e2 <USBH_MSC_RdWrProcess>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d0e0      	beq.n	800886a <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	2201      	movs	r2, #1
 80088ac:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3718      	adds	r7, #24
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2221      	movs	r2, #33	; 0x21
 80088c4:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	22ff      	movs	r2, #255	; 0xff
 80088ca:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 80088de:	2200      	movs	r2, #0
 80088e0:	2100      	movs	r1, #0
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f001 fea4 	bl	800a630 <USBH_CtlReq>
 80088e8:	4603      	mov	r3, r0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b082      	sub	sp, #8
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
 80088fa:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	22a1      	movs	r2, #161	; 0xa1
 8008900:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	22fe      	movs	r2, #254	; 0xfe
 8008906:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800891a:	2201      	movs	r2, #1
 800891c:	6839      	ldr	r1, [r7, #0]
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f001 fe86 	bl	800a630 <USBH_CtlReq>
 8008924:	4603      	mov	r3, r0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
	...

08008930 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8008930:	b480      	push	{r7}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800893e:	69db      	ldr	r3, [r3, #28]
 8008940:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	4a09      	ldr	r2, [pc, #36]	; (800896c <USBH_MSC_BOT_Init+0x3c>)
 8008946:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	4a09      	ldr	r2, [pc, #36]	; (8008970 <USBH_MSC_BOT_Init+0x40>)
 800894c:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2201      	movs	r2, #1
 8008952:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2201      	movs	r2, #1
 800895a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	3714      	adds	r7, #20
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr
 800896c:	43425355 	.word	0x43425355
 8008970:	20304050 	.word	0x20304050

08008974 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b088      	sub	sp, #32
 8008978:	af02      	add	r7, sp, #8
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	460b      	mov	r3, r1
 800897e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8008980:	2301      	movs	r3, #1
 8008982:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8008984:	2301      	movs	r3, #1
 8008986:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8008988:	2301      	movs	r3, #1
 800898a:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800898c:	2300      	movs	r3, #0
 800898e:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008996:	69db      	ldr	r3, [r3, #28]
 8008998:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800899a:	2300      	movs	r3, #0
 800899c:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80089a4:	3b01      	subs	r3, #1
 80089a6:	2b0a      	cmp	r3, #10
 80089a8:	f200 819e 	bhi.w	8008ce8 <USBH_MSC_BOT_Process+0x374>
 80089ac:	a201      	add	r2, pc, #4	; (adr r2, 80089b4 <USBH_MSC_BOT_Process+0x40>)
 80089ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b2:	bf00      	nop
 80089b4:	080089e1 	.word	0x080089e1
 80089b8:	08008a09 	.word	0x08008a09
 80089bc:	08008a73 	.word	0x08008a73
 80089c0:	08008a91 	.word	0x08008a91
 80089c4:	08008b15 	.word	0x08008b15
 80089c8:	08008b37 	.word	0x08008b37
 80089cc:	08008bcf 	.word	0x08008bcf
 80089d0:	08008beb 	.word	0x08008beb
 80089d4:	08008c3d 	.word	0x08008c3d
 80089d8:	08008c6d 	.word	0x08008c6d
 80089dc:	08008ccf 	.word	0x08008ccf
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	78fa      	ldrb	r2, [r7, #3]
 80089e4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	2202      	movs	r2, #2
 80089ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	795b      	ldrb	r3, [r3, #5]
 80089fa:	2201      	movs	r2, #1
 80089fc:	9200      	str	r2, [sp, #0]
 80089fe:	221f      	movs	r2, #31
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f002 f824 	bl	800aa4e <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8008a06:	e17e      	b.n	8008d06 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	795b      	ldrb	r3, [r3, #5]
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f004 feda 	bl	800d7c8 <USBH_LL_GetURBState>
 8008a14:	4603      	mov	r3, r0
 8008a16:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008a18:	7d3b      	ldrb	r3, [r7, #20]
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d118      	bne.n	8008a50 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00f      	beq.n	8008a46 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008a2c:	b25b      	sxtb	r3, r3
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	da04      	bge.n	8008a3c <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	2203      	movs	r2, #3
 8008a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a3a:	e157      	b.n	8008cec <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	2205      	movs	r2, #5
 8008a40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008a44:	e152      	b.n	8008cec <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	2207      	movs	r2, #7
 8008a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008a4e:	e14d      	b.n	8008cec <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008a50:	7d3b      	ldrb	r3, [r7, #20]
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d104      	bne.n	8008a60 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008a5e:	e145      	b.n	8008cec <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8008a60:	7d3b      	ldrb	r3, [r7, #20]
 8008a62:	2b05      	cmp	r3, #5
 8008a64:	f040 8142 	bne.w	8008cec <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	220a      	movs	r2, #10
 8008a6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008a70:	e13c      	b.n	8008cec <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	895a      	ldrh	r2, [r3, #10]
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	791b      	ldrb	r3, [r3, #4]
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f002 f809 	bl	800aa98 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	2204      	movs	r2, #4
 8008a8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8008a8e:	e13a      	b.n	8008d06 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	791b      	ldrb	r3, [r3, #4]
 8008a94:	4619      	mov	r1, r3
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f004 fe96 	bl	800d7c8 <USBH_LL_GetURBState>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008aa0:	7d3b      	ldrb	r3, [r7, #20]
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d12d      	bne.n	8008b02 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008aaa:	693a      	ldr	r2, [r7, #16]
 8008aac:	8952      	ldrh	r2, [r2, #10]
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d910      	bls.n	8008ad4 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ab8:	693a      	ldr	r2, [r7, #16]
 8008aba:	8952      	ldrh	r2, [r2, #10]
 8008abc:	441a      	add	r2, r3
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ac8:	693a      	ldr	r2, [r7, #16]
 8008aca:	8952      	ldrh	r2, [r2, #10]
 8008acc:	1a9a      	subs	r2, r3, r2
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	65da      	str	r2, [r3, #92]	; 0x5c
 8008ad2:	e002      	b.n	8008ada <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d00a      	beq.n	8008af8 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	895a      	ldrh	r2, [r3, #10]
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	791b      	ldrb	r3, [r3, #4]
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f001 ffd1 	bl	800aa98 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8008af6:	e0fb      	b.n	8008cf0 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	2207      	movs	r2, #7
 8008afc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008b00:	e0f6      	b.n	8008cf0 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8008b02:	7d3b      	ldrb	r3, [r7, #20]
 8008b04:	2b05      	cmp	r3, #5
 8008b06:	f040 80f3 	bne.w	8008cf0 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	2209      	movs	r2, #9
 8008b0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008b12:	e0ed      	b.n	8008cf0 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	891a      	ldrh	r2, [r3, #8]
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	795b      	ldrb	r3, [r3, #5]
 8008b22:	2001      	movs	r0, #1
 8008b24:	9000      	str	r0, [sp, #0]
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f001 ff91 	bl	800aa4e <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	2206      	movs	r2, #6
 8008b30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008b34:	e0e7      	b.n	8008d06 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	795b      	ldrb	r3, [r3, #5]
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f004 fe43 	bl	800d7c8 <USBH_LL_GetURBState>
 8008b42:	4603      	mov	r3, r0
 8008b44:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008b46:	7d3b      	ldrb	r3, [r7, #20]
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d12f      	bne.n	8008bac <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b50:	693a      	ldr	r2, [r7, #16]
 8008b52:	8912      	ldrh	r2, [r2, #8]
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d910      	bls.n	8008b7a <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b5e:	693a      	ldr	r2, [r7, #16]
 8008b60:	8912      	ldrh	r2, [r2, #8]
 8008b62:	441a      	add	r2, r3
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b6e:	693a      	ldr	r2, [r7, #16]
 8008b70:	8912      	ldrh	r2, [r2, #8]
 8008b72:	1a9a      	subs	r2, r3, r2
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	65da      	str	r2, [r3, #92]	; 0x5c
 8008b78:	e002      	b.n	8008b80 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00c      	beq.n	8008ba2 <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	891a      	ldrh	r2, [r3, #8]
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	795b      	ldrb	r3, [r3, #5]
 8008b96:	2001      	movs	r0, #1
 8008b98:	9000      	str	r0, [sp, #0]
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f001 ff57 	bl	800aa4e <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8008ba0:	e0a8      	b.n	8008cf4 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	2207      	movs	r2, #7
 8008ba6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008baa:	e0a3      	b.n	8008cf4 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008bac:	7d3b      	ldrb	r3, [r7, #20]
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	d104      	bne.n	8008bbc <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	2205      	movs	r2, #5
 8008bb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008bba:	e09b      	b.n	8008cf4 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8008bbc:	7d3b      	ldrb	r3, [r7, #20]
 8008bbe:	2b05      	cmp	r3, #5
 8008bc0:	f040 8098 	bne.w	8008cf4 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	220a      	movs	r2, #10
 8008bc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008bcc:	e092      	b.n	8008cf4 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	791b      	ldrb	r3, [r3, #4]
 8008bd8:	220d      	movs	r2, #13
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f001 ff5c 	bl	800aa98 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	2208      	movs	r2, #8
 8008be4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008be8:	e08d      	b.n	8008d06 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	791b      	ldrb	r3, [r3, #4]
 8008bee:	4619      	mov	r1, r3
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f004 fde9 	bl	800d7c8 <USBH_LL_GetURBState>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8008bfa:	7d3b      	ldrb	r3, [r7, #20]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d115      	bne.n	8008c2c <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 f8a9 	bl	8008d68 <USBH_MSC_DecodeCSW>
 8008c16:	4603      	mov	r3, r0
 8008c18:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8008c1a:	7d7b      	ldrb	r3, [r7, #21]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d102      	bne.n	8008c26 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8008c20:	2300      	movs	r3, #0
 8008c22:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8008c24:	e068      	b.n	8008cf8 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8008c26:	2302      	movs	r3, #2
 8008c28:	75fb      	strb	r3, [r7, #23]
      break;
 8008c2a:	e065      	b.n	8008cf8 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8008c2c:	7d3b      	ldrb	r3, [r7, #20]
 8008c2e:	2b05      	cmp	r3, #5
 8008c30:	d162      	bne.n	8008cf8 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	2209      	movs	r2, #9
 8008c36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008c3a:	e05d      	b.n	8008cf8 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8008c3c:	78fb      	ldrb	r3, [r7, #3]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	4619      	mov	r1, r3
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f864 	bl	8008d10 <USBH_MSC_BOT_Abort>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008c4c:	7dbb      	ldrb	r3, [r7, #22]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d104      	bne.n	8008c5c <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	2207      	movs	r2, #7
 8008c56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8008c5a:	e04f      	b.n	8008cfc <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8008c5c:	7dbb      	ldrb	r3, [r7, #22]
 8008c5e:	2b04      	cmp	r3, #4
 8008c60:	d14c      	bne.n	8008cfc <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	220b      	movs	r2, #11
 8008c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008c6a:	e047      	b.n	8008cfc <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8008c6c:	78fb      	ldrb	r3, [r7, #3]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	4619      	mov	r1, r3
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 f84c 	bl	8008d10 <USBH_MSC_BOT_Abort>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008c7c:	7dbb      	ldrb	r3, [r7, #22]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d11d      	bne.n	8008cbe <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	795b      	ldrb	r3, [r3, #5]
 8008c86:	4619      	mov	r1, r3
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f004 fdee 	bl	800d86a <USBH_LL_GetToggle>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	7959      	ldrb	r1, [r3, #5]
 8008c96:	7bfb      	ldrb	r3, [r7, #15]
 8008c98:	f1c3 0301 	rsb	r3, r3, #1
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f004 fdb2 	bl	800d80a <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	791b      	ldrb	r3, [r3, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	4619      	mov	r1, r3
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f004 fdab 	bl	800d80a <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	2209      	movs	r2, #9
 8008cb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8008cbc:	e020      	b.n	8008d00 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8008cbe:	7dbb      	ldrb	r3, [r7, #22]
 8008cc0:	2b04      	cmp	r3, #4
 8008cc2:	d11d      	bne.n	8008d00 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	220b      	movs	r2, #11
 8008cc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008ccc:	e018      	b.n	8008d00 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f7ff fdf2 	bl	80088b8 <USBH_MSC_BOT_REQ_Reset>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8008cd8:	7dfb      	ldrb	r3, [r7, #23]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d112      	bne.n	8008d04 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8008ce6:	e00d      	b.n	8008d04 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8008ce8:	bf00      	nop
 8008cea:	e00c      	b.n	8008d06 <USBH_MSC_BOT_Process+0x392>
      break;
 8008cec:	bf00      	nop
 8008cee:	e00a      	b.n	8008d06 <USBH_MSC_BOT_Process+0x392>
      break;
 8008cf0:	bf00      	nop
 8008cf2:	e008      	b.n	8008d06 <USBH_MSC_BOT_Process+0x392>
      break;
 8008cf4:	bf00      	nop
 8008cf6:	e006      	b.n	8008d06 <USBH_MSC_BOT_Process+0x392>
      break;
 8008cf8:	bf00      	nop
 8008cfa:	e004      	b.n	8008d06 <USBH_MSC_BOT_Process+0x392>
      break;
 8008cfc:	bf00      	nop
 8008cfe:	e002      	b.n	8008d06 <USBH_MSC_BOT_Process+0x392>
      break;
 8008d00:	bf00      	nop
 8008d02:	e000      	b.n	8008d06 <USBH_MSC_BOT_Process+0x392>
      break;
 8008d04:	bf00      	nop
  }
  return status;
 8008d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3718      	adds	r7, #24
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	460b      	mov	r3, r1
 8008d1a:	70fb      	strb	r3, [r7, #3]
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8008d20:	2302      	movs	r3, #2
 8008d22:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d2a:	69db      	ldr	r3, [r3, #28]
 8008d2c:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8008d2e:	78bb      	ldrb	r3, [r7, #2]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d002      	beq.n	8008d3a <USBH_MSC_BOT_Abort+0x2a>
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d009      	beq.n	8008d4c <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8008d38:	e011      	b.n	8008d5e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	79db      	ldrb	r3, [r3, #7]
 8008d3e:	4619      	mov	r1, r3
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f001 f9a8 	bl	800a096 <USBH_ClrFeature>
 8008d46:	4603      	mov	r3, r0
 8008d48:	73fb      	strb	r3, [r7, #15]
      break;
 8008d4a:	e008      	b.n	8008d5e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	799b      	ldrb	r3, [r3, #6]
 8008d50:	4619      	mov	r1, r3
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f001 f99f 	bl	800a096 <USBH_ClrFeature>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8008d5c:	bf00      	nop
  }
  return status;
 8008d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d76:	69db      	ldr	r3, [r3, #28]
 8008d78:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	791b      	ldrb	r3, [r3, #4]
 8008d82:	4619      	mov	r1, r3
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f004 fc8d 	bl	800d6a4 <USBH_LL_GetLastXferSize>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b0d      	cmp	r3, #13
 8008d8e:	d002      	beq.n	8008d96 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8008d90:	2302      	movs	r3, #2
 8008d92:	73fb      	strb	r3, [r7, #15]
 8008d94:	e024      	b.n	8008de0 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d9a:	4a14      	ldr	r2, [pc, #80]	; (8008dec <USBH_MSC_DecodeCSW+0x84>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d11d      	bne.n	8008ddc <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d119      	bne.n	8008de0 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d102      	bne.n	8008dbc <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8008db6:	2300      	movs	r3, #0
 8008db8:	73fb      	strb	r3, [r7, #15]
 8008dba:	e011      	b.n	8008de0 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d102      	bne.n	8008dcc <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	73fb      	strb	r3, [r7, #15]
 8008dca:	e009      	b.n	8008de0 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d104      	bne.n	8008de0 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8008dd6:	2302      	movs	r3, #2
 8008dd8:	73fb      	strb	r3, [r7, #15]
 8008dda:	e001      	b.n	8008de0 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8008ddc:	2302      	movs	r3, #2
 8008dde:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8008de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	53425355 	.word	0x53425355

08008df0 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	460b      	mov	r3, r1
 8008dfa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008dfc:	2302      	movs	r3, #2
 8008dfe:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e06:	69db      	ldr	r3, [r3, #28]
 8008e08:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d002      	beq.n	8008e1a <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8008e14:	2b02      	cmp	r3, #2
 8008e16:	d021      	beq.n	8008e5c <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008e18:	e028      	b.n	8008e6c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	2200      	movs	r2, #0
 8008e24:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	220a      	movs	r2, #10
 8008e2c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	3363      	adds	r3, #99	; 0x63
 8008e34:	2210      	movs	r2, #16
 8008e36:	2100      	movs	r1, #0
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f004 fdc5 	bl	800d9c8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	2202      	movs	r2, #2
 8008e52:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8008e56:	2301      	movs	r3, #1
 8008e58:	73fb      	strb	r3, [r7, #15]
      break;
 8008e5a:	e007      	b.n	8008e6c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008e5c:	78fb      	ldrb	r3, [r7, #3]
 8008e5e:	4619      	mov	r1, r3
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f7ff fd87 	bl	8008974 <USBH_MSC_BOT_Process>
 8008e66:	4603      	mov	r3, r0
 8008e68:	73fb      	strb	r3, [r7, #15]
      break;
 8008e6a:	bf00      	nop
  }

  return error;
 8008e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b086      	sub	sp, #24
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	60f8      	str	r0, [r7, #12]
 8008e7e:	460b      	mov	r3, r1
 8008e80:	607a      	str	r2, [r7, #4]
 8008e82:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8008e84:	2301      	movs	r3, #1
 8008e86:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e8e:	69db      	ldr	r3, [r3, #28]
 8008e90:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d002      	beq.n	8008ea2 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8008e9c:	2b02      	cmp	r3, #2
 8008e9e:	d027      	beq.n	8008ef0 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8008ea0:	e05f      	b.n	8008f62 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	2208      	movs	r2, #8
 8008ea6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	2280      	movs	r2, #128	; 0x80
 8008eac:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	220a      	movs	r2, #10
 8008eb4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	3363      	adds	r3, #99	; 0x63
 8008ebc:	2210      	movs	r2, #16
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f004 fd81 	bl	800d9c8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	2225      	movs	r2, #37	; 0x25
 8008eca:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	2202      	movs	r2, #2
 8008eda:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	f103 0210 	add.w	r2, r3, #16
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008eea:	2301      	movs	r3, #1
 8008eec:	75fb      	strb	r3, [r7, #23]
      break;
 8008eee:	e038      	b.n	8008f62 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008ef0:	7afb      	ldrb	r3, [r7, #11]
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f7ff fd3d 	bl	8008974 <USBH_MSC_BOT_Process>
 8008efa:	4603      	mov	r3, r0
 8008efc:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008efe:	7dfb      	ldrb	r3, [r7, #23]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d12d      	bne.n	8008f60 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f0a:	3303      	adds	r3, #3
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	461a      	mov	r2, r3
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f16:	3302      	adds	r3, #2
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	021b      	lsls	r3, r3, #8
 8008f1c:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f24:	3301      	adds	r3, #1
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008f2a:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	061b      	lsls	r3, r3, #24
 8008f36:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f42:	3307      	adds	r3, #7
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	b29a      	uxth	r2, r3
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f4e:	3306      	adds	r3, #6
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	021b      	lsls	r3, r3, #8
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	809a      	strh	r2, [r3, #4]
      break;
 8008f60:	bf00      	nop
  }

  return error;
 8008f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3718      	adds	r7, #24
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b086      	sub	sp, #24
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	460b      	mov	r3, r1
 8008f76:	607a      	str	r2, [r7, #4]
 8008f78:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8008f7a:	2302      	movs	r3, #2
 8008f7c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f84:	69db      	ldr	r3, [r3, #28]
 8008f86:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d002      	beq.n	8008f98 <USBH_MSC_SCSI_Inquiry+0x2c>
 8008f92:	2b02      	cmp	r3, #2
 8008f94:	d03d      	beq.n	8009012 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8008f96:	e089      	b.n	80090ac <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	2224      	movs	r2, #36	; 0x24
 8008f9c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	2280      	movs	r2, #128	; 0x80
 8008fa2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	220a      	movs	r2, #10
 8008faa:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	3363      	adds	r3, #99	; 0x63
 8008fb2:	220a      	movs	r2, #10
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f004 fd06 	bl	800d9c8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	2212      	movs	r2, #18
 8008fc0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8008fc4:	7afb      	ldrb	r3, [r7, #11]
 8008fc6:	015b      	lsls	r3, r3, #5
 8008fc8:	b2da      	uxtb	r2, r3
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	2224      	movs	r2, #36	; 0x24
 8008fe4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	2202      	movs	r2, #2
 8008ffc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	f103 0210 	add.w	r2, r3, #16
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800900c:	2301      	movs	r3, #1
 800900e:	75fb      	strb	r3, [r7, #23]
      break;
 8009010:	e04c      	b.n	80090ac <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009012:	7afb      	ldrb	r3, [r7, #11]
 8009014:	4619      	mov	r1, r3
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f7ff fcac 	bl	8008974 <USBH_MSC_BOT_Process>
 800901c:	4603      	mov	r3, r0
 800901e:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009020:	7dfb      	ldrb	r3, [r7, #23]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d141      	bne.n	80090aa <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8009026:	2222      	movs	r2, #34	; 0x22
 8009028:	2100      	movs	r1, #0
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f004 fccc 	bl	800d9c8 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	f003 031f 	and.w	r3, r3, #31
 800903c:	b2da      	uxtb	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	095b      	lsrs	r3, r3, #5
 800904c:	b2da      	uxtb	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009058:	3301      	adds	r3, #1
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	b25b      	sxtb	r3, r3
 800905e:	2b00      	cmp	r3, #0
 8009060:	da03      	bge.n	800906a <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2201      	movs	r2, #1
 8009066:	709a      	strb	r2, [r3, #2]
 8009068:	e002      	b.n	8009070 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	1cd8      	adds	r0, r3, #3
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800907a:	3308      	adds	r3, #8
 800907c:	2208      	movs	r2, #8
 800907e:	4619      	mov	r1, r3
 8009080:	f004 fc94 	bl	800d9ac <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f103 000c 	add.w	r0, r3, #12
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009090:	3310      	adds	r3, #16
 8009092:	2210      	movs	r2, #16
 8009094:	4619      	mov	r1, r3
 8009096:	f004 fc89 	bl	800d9ac <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	331d      	adds	r3, #29
 800909e:	693a      	ldr	r2, [r7, #16]
 80090a0:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80090a4:	3220      	adds	r2, #32
 80090a6:	6812      	ldr	r2, [r2, #0]
 80090a8:	601a      	str	r2, [r3, #0]
      break;
 80090aa:	bf00      	nop
  }

  return error;
 80090ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3718      	adds	r7, #24
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b086      	sub	sp, #24
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	60f8      	str	r0, [r7, #12]
 80090be:	460b      	mov	r3, r1
 80090c0:	607a      	str	r2, [r7, #4]
 80090c2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80090c4:	2302      	movs	r3, #2
 80090c6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090ce:	69db      	ldr	r3, [r3, #28]
 80090d0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d002      	beq.n	80090e2 <USBH_MSC_SCSI_RequestSense+0x2c>
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d03d      	beq.n	800915c <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 80090e0:	e05d      	b.n	800919e <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	220e      	movs	r2, #14
 80090e6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	2280      	movs	r2, #128	; 0x80
 80090ec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	220a      	movs	r2, #10
 80090f4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	3363      	adds	r3, #99	; 0x63
 80090fc:	2210      	movs	r2, #16
 80090fe:	2100      	movs	r1, #0
 8009100:	4618      	mov	r0, r3
 8009102:	f004 fc61 	bl	800d9c8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	2203      	movs	r2, #3
 800910a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800910e:	7afb      	ldrb	r3, [r7, #11]
 8009110:	015b      	lsls	r3, r3, #5
 8009112:	b2da      	uxtb	r2, r3
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	2200      	movs	r2, #0
 800911e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	2200      	movs	r2, #0
 8009126:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	220e      	movs	r2, #14
 800912e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	2200      	movs	r2, #0
 8009136:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	2201      	movs	r2, #1
 800913e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	2202      	movs	r2, #2
 8009146:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	f103 0210 	add.w	r2, r3, #16
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009156:	2301      	movs	r3, #1
 8009158:	75fb      	strb	r3, [r7, #23]
      break;
 800915a:	e020      	b.n	800919e <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800915c:	7afb      	ldrb	r3, [r7, #11]
 800915e:	4619      	mov	r1, r3
 8009160:	68f8      	ldr	r0, [r7, #12]
 8009162:	f7ff fc07 	bl	8008974 <USBH_MSC_BOT_Process>
 8009166:	4603      	mov	r3, r0
 8009168:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800916a:	7dfb      	ldrb	r3, [r7, #23]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d115      	bne.n	800919c <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009176:	3302      	adds	r3, #2
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	f003 030f 	and.w	r3, r3, #15
 800917e:	b2da      	uxtb	r2, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800918a:	7b1a      	ldrb	r2, [r3, #12]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009196:	7b5a      	ldrb	r2, [r3, #13]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	709a      	strb	r2, [r3, #2]
      break;
 800919c:	bf00      	nop
  }

  return error;
 800919e:	7dfb      	ldrb	r3, [r7, #23]
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3718      	adds	r7, #24
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b086      	sub	sp, #24
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	607a      	str	r2, [r7, #4]
 80091b2:	603b      	str	r3, [r7, #0]
 80091b4:	460b      	mov	r3, r1
 80091b6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80091b8:	2302      	movs	r3, #2
 80091ba:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091c2:	69db      	ldr	r3, [r3, #28]
 80091c4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d002      	beq.n	80091d6 <USBH_MSC_SCSI_Write+0x2e>
 80091d0:	2b02      	cmp	r3, #2
 80091d2:	d047      	beq.n	8009264 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80091d4:	e04e      	b.n	8009274 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80091dc:	461a      	mov	r2, r3
 80091de:	6a3b      	ldr	r3, [r7, #32]
 80091e0:	fb03 f202 	mul.w	r2, r3, r2
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	220a      	movs	r2, #10
 80091f4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	3363      	adds	r3, #99	; 0x63
 80091fc:	2210      	movs	r2, #16
 80091fe:	2100      	movs	r1, #0
 8009200:	4618      	mov	r0, r3
 8009202:	f004 fbe1 	bl	800d9c8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	222a      	movs	r2, #42	; 0x2a
 800920a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800920e:	79fa      	ldrb	r2, [r7, #7]
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009216:	79ba      	ldrb	r2, [r7, #6]
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800921e:	797a      	ldrb	r2, [r7, #5]
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009226:	1d3b      	adds	r3, r7, #4
 8009228:	781a      	ldrb	r2, [r3, #0]
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009230:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800923a:	f107 0320 	add.w	r3, r7, #32
 800923e:	781a      	ldrb	r2, [r3, #0]
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	2201      	movs	r2, #1
 800924a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	2202      	movs	r2, #2
 8009252:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	683a      	ldr	r2, [r7, #0]
 800925a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800925e:	2301      	movs	r3, #1
 8009260:	75fb      	strb	r3, [r7, #23]
      break;
 8009262:	e007      	b.n	8009274 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009264:	7afb      	ldrb	r3, [r7, #11]
 8009266:	4619      	mov	r1, r3
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	f7ff fb83 	bl	8008974 <USBH_MSC_BOT_Process>
 800926e:	4603      	mov	r3, r0
 8009270:	75fb      	strb	r3, [r7, #23]
      break;
 8009272:	bf00      	nop
  }

  return error;
 8009274:	7dfb      	ldrb	r3, [r7, #23]
}
 8009276:	4618      	mov	r0, r3
 8009278:	3718      	adds	r7, #24
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b086      	sub	sp, #24
 8009282:	af00      	add	r7, sp, #0
 8009284:	60f8      	str	r0, [r7, #12]
 8009286:	607a      	str	r2, [r7, #4]
 8009288:	603b      	str	r3, [r7, #0]
 800928a:	460b      	mov	r3, r1
 800928c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800928e:	2302      	movs	r3, #2
 8009290:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009298:	69db      	ldr	r3, [r3, #28]
 800929a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d002      	beq.n	80092ac <USBH_MSC_SCSI_Read+0x2e>
 80092a6:	2b02      	cmp	r3, #2
 80092a8:	d047      	beq.n	800933a <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80092aa:	e04e      	b.n	800934a <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80092b2:	461a      	mov	r2, r3
 80092b4:	6a3b      	ldr	r3, [r7, #32]
 80092b6:	fb03 f202 	mul.w	r2, r3, r2
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	2280      	movs	r2, #128	; 0x80
 80092c2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	220a      	movs	r2, #10
 80092ca:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	3363      	adds	r3, #99	; 0x63
 80092d2:	2210      	movs	r2, #16
 80092d4:	2100      	movs	r1, #0
 80092d6:	4618      	mov	r0, r3
 80092d8:	f004 fb76 	bl	800d9c8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	2228      	movs	r2, #40	; 0x28
 80092e0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80092e4:	79fa      	ldrb	r2, [r7, #7]
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80092ec:	79ba      	ldrb	r2, [r7, #6]
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80092f4:	797a      	ldrb	r2, [r7, #5]
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80092fc:	1d3b      	adds	r3, r7, #4
 80092fe:	781a      	ldrb	r2, [r3, #0]
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009306:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009310:	f107 0320 	add.w	r3, r7, #32
 8009314:	781a      	ldrb	r2, [r3, #0]
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	2201      	movs	r2, #1
 8009320:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	2202      	movs	r2, #2
 8009328:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	683a      	ldr	r2, [r7, #0]
 8009330:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009334:	2301      	movs	r3, #1
 8009336:	75fb      	strb	r3, [r7, #23]
      break;
 8009338:	e007      	b.n	800934a <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800933a:	7afb      	ldrb	r3, [r7, #11]
 800933c:	4619      	mov	r1, r3
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	f7ff fb18 	bl	8008974 <USBH_MSC_BOT_Process>
 8009344:	4603      	mov	r3, r0
 8009346:	75fb      	strb	r3, [r7, #23]
      break;
 8009348:	bf00      	nop
  }

  return error;
 800934a:	7dfb      	ldrb	r3, [r7, #23]
}
 800934c:	4618      	mov	r0, r3
 800934e:	3718      	adds	r7, #24
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	4613      	mov	r3, r2
 8009360:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d101      	bne.n	800936c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009368:	2302      	movs	r3, #2
 800936a:	e029      	b.n	80093c0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	79fa      	ldrb	r2, [r7, #7]
 8009370:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2200      	movs	r2, #0
 8009378:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2200      	movs	r2, #0
 8009380:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009384:	68f8      	ldr	r0, [r7, #12]
 8009386:	f000 f81f 	bl	80093c8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2200      	movs	r2, #0
 8009396:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d003      	beq.n	80093b8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	68ba      	ldr	r2, [r7, #8]
 80093b4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80093b8:	68f8      	ldr	r0, [r7, #12]
 80093ba:	f004 f8bf 	bl	800d53c <USBH_LL_Init>

  return USBH_OK;
 80093be:	2300      	movs	r3, #0
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3710      	adds	r7, #16
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b085      	sub	sp, #20
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80093d0:	2300      	movs	r3, #0
 80093d2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80093d4:	2300      	movs	r3, #0
 80093d6:	60fb      	str	r3, [r7, #12]
 80093d8:	e009      	b.n	80093ee <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	33e0      	adds	r3, #224	; 0xe0
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	4413      	add	r3, r2
 80093e4:	2200      	movs	r2, #0
 80093e6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	3301      	adds	r3, #1
 80093ec:	60fb      	str	r3, [r7, #12]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2b0f      	cmp	r3, #15
 80093f2:	d9f2      	bls.n	80093da <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80093f4:	2300      	movs	r3, #0
 80093f6:	60fb      	str	r3, [r7, #12]
 80093f8:	e009      	b.n	800940e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	4413      	add	r3, r2
 8009400:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009404:	2200      	movs	r2, #0
 8009406:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	3301      	adds	r3, #1
 800940c:	60fb      	str	r3, [r7, #12]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009414:	d3f1      	bcc.n	80093fa <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2201      	movs	r2, #1
 8009426:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2201      	movs	r2, #1
 8009434:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2240      	movs	r2, #64	; 0x40
 800943a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2201      	movs	r2, #1
 800944e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	3714      	adds	r7, #20
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009470:	b480      	push	{r7}
 8009472:	b085      	sub	sp, #20
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800947a:	2300      	movs	r3, #0
 800947c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d016      	beq.n	80094b2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800948a:	2b00      	cmp	r3, #0
 800948c:	d10e      	bne.n	80094ac <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009494:	1c59      	adds	r1, r3, #1
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	33de      	adds	r3, #222	; 0xde
 80094a0:	6839      	ldr	r1, [r7, #0]
 80094a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80094a6:	2300      	movs	r3, #0
 80094a8:	73fb      	strb	r3, [r7, #15]
 80094aa:	e004      	b.n	80094b6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80094ac:	2302      	movs	r3, #2
 80094ae:	73fb      	strb	r3, [r7, #15]
 80094b0:	e001      	b.n	80094b6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80094b2:	2302      	movs	r3, #2
 80094b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80094b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3714      	adds	r7, #20
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b085      	sub	sp, #20
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	460b      	mov	r3, r1
 80094ce:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80094d0:	2300      	movs	r3, #0
 80094d2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80094da:	78fa      	ldrb	r2, [r7, #3]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d204      	bcs.n	80094ea <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	78fa      	ldrb	r2, [r7, #3]
 80094e4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80094e8:	e001      	b.n	80094ee <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80094ea:	2302      	movs	r3, #2
 80094ec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80094ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3714      	adds	r7, #20
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b087      	sub	sp, #28
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	4608      	mov	r0, r1
 8009506:	4611      	mov	r1, r2
 8009508:	461a      	mov	r2, r3
 800950a:	4603      	mov	r3, r0
 800950c:	70fb      	strb	r3, [r7, #3]
 800950e:	460b      	mov	r3, r1
 8009510:	70bb      	strb	r3, [r7, #2]
 8009512:	4613      	mov	r3, r2
 8009514:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009516:	2300      	movs	r3, #0
 8009518:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800951a:	2300      	movs	r3, #0
 800951c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009524:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009526:	e025      	b.n	8009574 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009528:	7dfb      	ldrb	r3, [r7, #23]
 800952a:	221a      	movs	r2, #26
 800952c:	fb02 f303 	mul.w	r3, r2, r3
 8009530:	3308      	adds	r3, #8
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	4413      	add	r3, r2
 8009536:	3302      	adds	r3, #2
 8009538:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	795b      	ldrb	r3, [r3, #5]
 800953e:	78fa      	ldrb	r2, [r7, #3]
 8009540:	429a      	cmp	r2, r3
 8009542:	d002      	beq.n	800954a <USBH_FindInterface+0x4e>
 8009544:	78fb      	ldrb	r3, [r7, #3]
 8009546:	2bff      	cmp	r3, #255	; 0xff
 8009548:	d111      	bne.n	800956e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800954e:	78ba      	ldrb	r2, [r7, #2]
 8009550:	429a      	cmp	r2, r3
 8009552:	d002      	beq.n	800955a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009554:	78bb      	ldrb	r3, [r7, #2]
 8009556:	2bff      	cmp	r3, #255	; 0xff
 8009558:	d109      	bne.n	800956e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800955e:	787a      	ldrb	r2, [r7, #1]
 8009560:	429a      	cmp	r2, r3
 8009562:	d002      	beq.n	800956a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009564:	787b      	ldrb	r3, [r7, #1]
 8009566:	2bff      	cmp	r3, #255	; 0xff
 8009568:	d101      	bne.n	800956e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800956a:	7dfb      	ldrb	r3, [r7, #23]
 800956c:	e006      	b.n	800957c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800956e:	7dfb      	ldrb	r3, [r7, #23]
 8009570:	3301      	adds	r3, #1
 8009572:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009574:	7dfb      	ldrb	r3, [r7, #23]
 8009576:	2b01      	cmp	r3, #1
 8009578:	d9d6      	bls.n	8009528 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800957a:	23ff      	movs	r3, #255	; 0xff
}
 800957c:	4618      	mov	r0, r3
 800957e:	371c      	adds	r7, #28
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f004 f80f 	bl	800d5b4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009596:	2101      	movs	r1, #1
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f004 f928 	bl	800d7ee <USBH_LL_DriverVBUS>

  return USBH_OK;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3708      	adds	r7, #8
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b088      	sub	sp, #32
 80095ac:	af04      	add	r7, sp, #16
 80095ae:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80095b0:	2302      	movs	r3, #2
 80095b2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80095b4:	2300      	movs	r3, #0
 80095b6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d102      	bne.n	80095ca <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2203      	movs	r2, #3
 80095c8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	2b0b      	cmp	r3, #11
 80095d2:	f200 81be 	bhi.w	8009952 <USBH_Process+0x3aa>
 80095d6:	a201      	add	r2, pc, #4	; (adr r2, 80095dc <USBH_Process+0x34>)
 80095d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095dc:	0800960d 	.word	0x0800960d
 80095e0:	0800963f 	.word	0x0800963f
 80095e4:	080096a7 	.word	0x080096a7
 80095e8:	080098ed 	.word	0x080098ed
 80095ec:	08009953 	.word	0x08009953
 80095f0:	0800974b 	.word	0x0800974b
 80095f4:	08009893 	.word	0x08009893
 80095f8:	08009781 	.word	0x08009781
 80095fc:	080097a1 	.word	0x080097a1
 8009600:	080097c1 	.word	0x080097c1
 8009604:	08009805 	.word	0x08009805
 8009608:	080098d5 	.word	0x080098d5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009612:	b2db      	uxtb	r3, r3
 8009614:	2b00      	cmp	r3, #0
 8009616:	f000 819e 	beq.w	8009956 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2201      	movs	r2, #1
 800961e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009620:	20c8      	movs	r0, #200	; 0xc8
 8009622:	f004 f952 	bl	800d8ca <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f004 f821 	bl	800d66e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800963c:	e18b      	b.n	8009956 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009644:	2b01      	cmp	r3, #1
 8009646:	d107      	bne.n	8009658 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2200      	movs	r2, #0
 800964c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2202      	movs	r2, #2
 8009654:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009656:	e18d      	b.n	8009974 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800965e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009662:	d914      	bls.n	800968e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800966a:	3301      	adds	r3, #1
 800966c:	b2da      	uxtb	r2, r3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800967a:	2b03      	cmp	r3, #3
 800967c:	d903      	bls.n	8009686 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	220d      	movs	r2, #13
 8009682:	701a      	strb	r2, [r3, #0]
      break;
 8009684:	e176      	b.n	8009974 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	701a      	strb	r2, [r3, #0]
      break;
 800968c:	e172      	b.n	8009974 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009694:	f103 020a 	add.w	r2, r3, #10
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800969e:	200a      	movs	r0, #10
 80096a0:	f004 f913 	bl	800d8ca <USBH_Delay>
      break;
 80096a4:	e166      	b.n	8009974 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d005      	beq.n	80096bc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80096b6:	2104      	movs	r1, #4
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80096bc:	2064      	movs	r0, #100	; 0x64
 80096be:	f004 f904 	bl	800d8ca <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f003 ffac 	bl	800d620 <USBH_LL_GetSpeed>
 80096c8:	4603      	mov	r3, r0
 80096ca:	461a      	mov	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2205      	movs	r2, #5
 80096d6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80096d8:	2100      	movs	r1, #0
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f001 fa29 	bl	800ab32 <USBH_AllocPipe>
 80096e0:	4603      	mov	r3, r0
 80096e2:	461a      	mov	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80096e8:	2180      	movs	r1, #128	; 0x80
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f001 fa21 	bl	800ab32 <USBH_AllocPipe>
 80096f0:	4603      	mov	r3, r0
 80096f2:	461a      	mov	r2, r3
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	7919      	ldrb	r1, [r3, #4]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800970c:	b292      	uxth	r2, r2
 800970e:	9202      	str	r2, [sp, #8]
 8009710:	2200      	movs	r2, #0
 8009712:	9201      	str	r2, [sp, #4]
 8009714:	9300      	str	r3, [sp, #0]
 8009716:	4603      	mov	r3, r0
 8009718:	2280      	movs	r2, #128	; 0x80
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f001 f9da 	bl	800aad4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	7959      	ldrb	r1, [r3, #5]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009734:	b292      	uxth	r2, r2
 8009736:	9202      	str	r2, [sp, #8]
 8009738:	2200      	movs	r2, #0
 800973a:	9201      	str	r2, [sp, #4]
 800973c:	9300      	str	r3, [sp, #0]
 800973e:	4603      	mov	r3, r0
 8009740:	2200      	movs	r2, #0
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f001 f9c6 	bl	800aad4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009748:	e114      	b.n	8009974 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f918 	bl	8009980 <USBH_HandleEnum>
 8009750:	4603      	mov	r3, r0
 8009752:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009754:	7bbb      	ldrb	r3, [r7, #14]
 8009756:	b2db      	uxtb	r3, r3
 8009758:	2b00      	cmp	r3, #0
 800975a:	f040 80fe 	bne.w	800995a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800976c:	2b01      	cmp	r3, #1
 800976e:	d103      	bne.n	8009778 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2208      	movs	r2, #8
 8009774:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009776:	e0f0      	b.n	800995a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2207      	movs	r2, #7
 800977c:	701a      	strb	r2, [r3, #0]
      break;
 800977e:	e0ec      	b.n	800995a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009786:	2b00      	cmp	r3, #0
 8009788:	f000 80e9 	beq.w	800995e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009792:	2101      	movs	r1, #1
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2208      	movs	r2, #8
 800979c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800979e:	e0de      	b.n	800995e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	4619      	mov	r1, r3
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 fc2c 	bl	800a008 <USBH_SetCfg>
 80097b0:	4603      	mov	r3, r0
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f040 80d5 	bne.w	8009962 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2209      	movs	r2, #9
 80097bc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80097be:	e0d0      	b.n	8009962 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80097c6:	f003 0320 	and.w	r3, r3, #32
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d016      	beq.n	80097fc <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80097ce:	2101      	movs	r1, #1
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 fc3c 	bl	800a04e <USBH_SetFeature>
 80097d6:	4603      	mov	r3, r0
 80097d8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80097da:	7bbb      	ldrb	r3, [r7, #14]
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d103      	bne.n	80097ea <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	220a      	movs	r2, #10
 80097e6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80097e8:	e0bd      	b.n	8009966 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80097ea:	7bbb      	ldrb	r3, [r7, #14]
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	2b03      	cmp	r3, #3
 80097f0:	f040 80b9 	bne.w	8009966 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	220a      	movs	r2, #10
 80097f8:	701a      	strb	r2, [r3, #0]
      break;
 80097fa:	e0b4      	b.n	8009966 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	220a      	movs	r2, #10
 8009800:	701a      	strb	r2, [r3, #0]
      break;
 8009802:	e0b0      	b.n	8009966 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800980a:	2b00      	cmp	r3, #0
 800980c:	f000 80ad 	beq.w	800996a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009818:	2300      	movs	r3, #0
 800981a:	73fb      	strb	r3, [r7, #15]
 800981c:	e016      	b.n	800984c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800981e:	7bfa      	ldrb	r2, [r7, #15]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	32de      	adds	r2, #222	; 0xde
 8009824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009828:	791a      	ldrb	r2, [r3, #4]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009830:	429a      	cmp	r2, r3
 8009832:	d108      	bne.n	8009846 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009834:	7bfa      	ldrb	r2, [r7, #15]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	32de      	adds	r2, #222	; 0xde
 800983a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009844:	e005      	b.n	8009852 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009846:	7bfb      	ldrb	r3, [r7, #15]
 8009848:	3301      	adds	r3, #1
 800984a:	73fb      	strb	r3, [r7, #15]
 800984c:	7bfb      	ldrb	r3, [r7, #15]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d0e5      	beq.n	800981e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009858:	2b00      	cmp	r3, #0
 800985a:	d016      	beq.n	800988a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	4798      	blx	r3
 8009868:	4603      	mov	r3, r0
 800986a:	2b00      	cmp	r3, #0
 800986c:	d109      	bne.n	8009882 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2206      	movs	r2, #6
 8009872:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800987a:	2103      	movs	r1, #3
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009880:	e073      	b.n	800996a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	220d      	movs	r2, #13
 8009886:	701a      	strb	r2, [r3, #0]
      break;
 8009888:	e06f      	b.n	800996a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	220d      	movs	r2, #13
 800988e:	701a      	strb	r2, [r3, #0]
      break;
 8009890:	e06b      	b.n	800996a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009898:	2b00      	cmp	r3, #0
 800989a:	d017      	beq.n	80098cc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098a2:	691b      	ldr	r3, [r3, #16]
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	4798      	blx	r3
 80098a8:	4603      	mov	r3, r0
 80098aa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80098ac:	7bbb      	ldrb	r3, [r7, #14]
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d103      	bne.n	80098bc <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	220b      	movs	r2, #11
 80098b8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80098ba:	e058      	b.n	800996e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80098bc:	7bbb      	ldrb	r3, [r7, #14]
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	2b02      	cmp	r3, #2
 80098c2:	d154      	bne.n	800996e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	220d      	movs	r2, #13
 80098c8:	701a      	strb	r2, [r3, #0]
      break;
 80098ca:	e050      	b.n	800996e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	220d      	movs	r2, #13
 80098d0:	701a      	strb	r2, [r3, #0]
      break;
 80098d2:	e04c      	b.n	800996e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d049      	beq.n	8009972 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098e4:	695b      	ldr	r3, [r3, #20]
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	4798      	blx	r3
      }
      break;
 80098ea:	e042      	b.n	8009972 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f7ff fd67 	bl	80093c8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009900:	2b00      	cmp	r3, #0
 8009902:	d009      	beq.n	8009918 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800991e:	2b00      	cmp	r3, #0
 8009920:	d005      	beq.n	800992e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009928:	2105      	movs	r1, #5
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009934:	b2db      	uxtb	r3, r3
 8009936:	2b01      	cmp	r3, #1
 8009938:	d107      	bne.n	800994a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f7ff fe20 	bl	8009588 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009948:	e014      	b.n	8009974 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f003 fe32 	bl	800d5b4 <USBH_LL_Start>
      break;
 8009950:	e010      	b.n	8009974 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8009952:	bf00      	nop
 8009954:	e00e      	b.n	8009974 <USBH_Process+0x3cc>
      break;
 8009956:	bf00      	nop
 8009958:	e00c      	b.n	8009974 <USBH_Process+0x3cc>
      break;
 800995a:	bf00      	nop
 800995c:	e00a      	b.n	8009974 <USBH_Process+0x3cc>
    break;
 800995e:	bf00      	nop
 8009960:	e008      	b.n	8009974 <USBH_Process+0x3cc>
      break;
 8009962:	bf00      	nop
 8009964:	e006      	b.n	8009974 <USBH_Process+0x3cc>
      break;
 8009966:	bf00      	nop
 8009968:	e004      	b.n	8009974 <USBH_Process+0x3cc>
      break;
 800996a:	bf00      	nop
 800996c:	e002      	b.n	8009974 <USBH_Process+0x3cc>
      break;
 800996e:	bf00      	nop
 8009970:	e000      	b.n	8009974 <USBH_Process+0x3cc>
      break;
 8009972:	bf00      	nop
  }
  return USBH_OK;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3710      	adds	r7, #16
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop

08009980 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b088      	sub	sp, #32
 8009984:	af04      	add	r7, sp, #16
 8009986:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009988:	2301      	movs	r3, #1
 800998a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800998c:	2301      	movs	r3, #1
 800998e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	785b      	ldrb	r3, [r3, #1]
 8009994:	2b07      	cmp	r3, #7
 8009996:	f200 81c1 	bhi.w	8009d1c <USBH_HandleEnum+0x39c>
 800999a:	a201      	add	r2, pc, #4	; (adr r2, 80099a0 <USBH_HandleEnum+0x20>)
 800999c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a0:	080099c1 	.word	0x080099c1
 80099a4:	08009a7f 	.word	0x08009a7f
 80099a8:	08009ae9 	.word	0x08009ae9
 80099ac:	08009b77 	.word	0x08009b77
 80099b0:	08009be1 	.word	0x08009be1
 80099b4:	08009c51 	.word	0x08009c51
 80099b8:	08009c97 	.word	0x08009c97
 80099bc:	08009cdd 	.word	0x08009cdd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80099c0:	2108      	movs	r1, #8
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 fa50 	bl	8009e68 <USBH_Get_DevDesc>
 80099c8:	4603      	mov	r3, r0
 80099ca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80099cc:	7bbb      	ldrb	r3, [r7, #14]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d130      	bne.n	8009a34 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	7919      	ldrb	r1, [r3, #4]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80099f6:	b292      	uxth	r2, r2
 80099f8:	9202      	str	r2, [sp, #8]
 80099fa:	2200      	movs	r2, #0
 80099fc:	9201      	str	r2, [sp, #4]
 80099fe:	9300      	str	r3, [sp, #0]
 8009a00:	4603      	mov	r3, r0
 8009a02:	2280      	movs	r2, #128	; 0x80
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f001 f865 	bl	800aad4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	7959      	ldrb	r1, [r3, #5]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a1e:	b292      	uxth	r2, r2
 8009a20:	9202      	str	r2, [sp, #8]
 8009a22:	2200      	movs	r2, #0
 8009a24:	9201      	str	r2, [sp, #4]
 8009a26:	9300      	str	r3, [sp, #0]
 8009a28:	4603      	mov	r3, r0
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f001 f851 	bl	800aad4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009a32:	e175      	b.n	8009d20 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a34:	7bbb      	ldrb	r3, [r7, #14]
 8009a36:	2b03      	cmp	r3, #3
 8009a38:	f040 8172 	bne.w	8009d20 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a42:	3301      	adds	r3, #1
 8009a44:	b2da      	uxtb	r2, r3
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a52:	2b03      	cmp	r3, #3
 8009a54:	d903      	bls.n	8009a5e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	220d      	movs	r2, #13
 8009a5a:	701a      	strb	r2, [r3, #0]
      break;
 8009a5c:	e160      	b.n	8009d20 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	795b      	ldrb	r3, [r3, #5]
 8009a62:	4619      	mov	r1, r3
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f001 f885 	bl	800ab74 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	791b      	ldrb	r3, [r3, #4]
 8009a6e:	4619      	mov	r1, r3
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f001 f87f 	bl	800ab74 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	701a      	strb	r2, [r3, #0]
      break;
 8009a7c:	e150      	b.n	8009d20 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009a7e:	2112      	movs	r1, #18
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 f9f1 	bl	8009e68 <USBH_Get_DevDesc>
 8009a86:	4603      	mov	r3, r0
 8009a88:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a8a:	7bbb      	ldrb	r3, [r7, #14]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d103      	bne.n	8009a98 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2202      	movs	r2, #2
 8009a94:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009a96:	e145      	b.n	8009d24 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a98:	7bbb      	ldrb	r3, [r7, #14]
 8009a9a:	2b03      	cmp	r3, #3
 8009a9c:	f040 8142 	bne.w	8009d24 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	b2da      	uxtb	r2, r3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009ab6:	2b03      	cmp	r3, #3
 8009ab8:	d903      	bls.n	8009ac2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	220d      	movs	r2, #13
 8009abe:	701a      	strb	r2, [r3, #0]
      break;
 8009ac0:	e130      	b.n	8009d24 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	795b      	ldrb	r3, [r3, #5]
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f001 f853 	bl	800ab74 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	791b      	ldrb	r3, [r3, #4]
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f001 f84d 	bl	800ab74 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	701a      	strb	r2, [r3, #0]
      break;
 8009ae6:	e11d      	b.n	8009d24 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009ae8:	2101      	movs	r1, #1
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 fa68 	bl	8009fc0 <USBH_SetAddress>
 8009af0:	4603      	mov	r3, r0
 8009af2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009af4:	7bbb      	ldrb	r3, [r7, #14]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d132      	bne.n	8009b60 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009afa:	2002      	movs	r0, #2
 8009afc:	f003 fee5 	bl	800d8ca <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2203      	movs	r2, #3
 8009b0c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	7919      	ldrb	r1, [r3, #4]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009b22:	b292      	uxth	r2, r2
 8009b24:	9202      	str	r2, [sp, #8]
 8009b26:	2200      	movs	r2, #0
 8009b28:	9201      	str	r2, [sp, #4]
 8009b2a:	9300      	str	r3, [sp, #0]
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2280      	movs	r2, #128	; 0x80
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 ffcf 	bl	800aad4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	7959      	ldrb	r1, [r3, #5]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009b4a:	b292      	uxth	r2, r2
 8009b4c:	9202      	str	r2, [sp, #8]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	9201      	str	r2, [sp, #4]
 8009b52:	9300      	str	r3, [sp, #0]
 8009b54:	4603      	mov	r3, r0
 8009b56:	2200      	movs	r2, #0
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 ffbb 	bl	800aad4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009b5e:	e0e3      	b.n	8009d28 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b60:	7bbb      	ldrb	r3, [r7, #14]
 8009b62:	2b03      	cmp	r3, #3
 8009b64:	f040 80e0 	bne.w	8009d28 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	220d      	movs	r2, #13
 8009b6c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	705a      	strb	r2, [r3, #1]
      break;
 8009b74:	e0d8      	b.n	8009d28 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009b76:	2109      	movs	r1, #9
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 f99d 	bl	8009eb8 <USBH_Get_CfgDesc>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009b82:	7bbb      	ldrb	r3, [r7, #14]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d103      	bne.n	8009b90 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2204      	movs	r2, #4
 8009b8c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009b8e:	e0cd      	b.n	8009d2c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b90:	7bbb      	ldrb	r3, [r7, #14]
 8009b92:	2b03      	cmp	r3, #3
 8009b94:	f040 80ca 	bne.w	8009d2c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	b2da      	uxtb	r2, r3
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009bae:	2b03      	cmp	r3, #3
 8009bb0:	d903      	bls.n	8009bba <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	220d      	movs	r2, #13
 8009bb6:	701a      	strb	r2, [r3, #0]
      break;
 8009bb8:	e0b8      	b.n	8009d2c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	795b      	ldrb	r3, [r3, #5]
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 ffd7 	bl	800ab74 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	791b      	ldrb	r3, [r3, #4]
 8009bca:	4619      	mov	r1, r3
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 ffd1 	bl	800ab74 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	701a      	strb	r2, [r3, #0]
      break;
 8009bde:	e0a5      	b.n	8009d2c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009be6:	4619      	mov	r1, r3
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 f965 	bl	8009eb8 <USBH_Get_CfgDesc>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009bf2:	7bbb      	ldrb	r3, [r7, #14]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d103      	bne.n	8009c00 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2205      	movs	r2, #5
 8009bfc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009bfe:	e097      	b.n	8009d30 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c00:	7bbb      	ldrb	r3, [r7, #14]
 8009c02:	2b03      	cmp	r3, #3
 8009c04:	f040 8094 	bne.w	8009d30 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009c0e:	3301      	adds	r3, #1
 8009c10:	b2da      	uxtb	r2, r3
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009c1e:	2b03      	cmp	r3, #3
 8009c20:	d903      	bls.n	8009c2a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	220d      	movs	r2, #13
 8009c26:	701a      	strb	r2, [r3, #0]
      break;
 8009c28:	e082      	b.n	8009d30 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	795b      	ldrb	r3, [r3, #5]
 8009c2e:	4619      	mov	r1, r3
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 ff9f 	bl	800ab74 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	791b      	ldrb	r3, [r3, #4]
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 ff99 	bl	800ab74 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	701a      	strb	r2, [r3, #0]
      break;
 8009c4e:	e06f      	b.n	8009d30 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d019      	beq.n	8009c8e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009c66:	23ff      	movs	r3, #255	; 0xff
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 f949 	bl	8009f00 <USBH_Get_StringDesc>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009c72:	7bbb      	ldrb	r3, [r7, #14]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d103      	bne.n	8009c80 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2206      	movs	r2, #6
 8009c7c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009c7e:	e059      	b.n	8009d34 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c80:	7bbb      	ldrb	r3, [r7, #14]
 8009c82:	2b03      	cmp	r3, #3
 8009c84:	d156      	bne.n	8009d34 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2206      	movs	r2, #6
 8009c8a:	705a      	strb	r2, [r3, #1]
      break;
 8009c8c:	e052      	b.n	8009d34 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2206      	movs	r2, #6
 8009c92:	705a      	strb	r2, [r3, #1]
      break;
 8009c94:	e04e      	b.n	8009d34 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d019      	beq.n	8009cd4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009cac:	23ff      	movs	r3, #255	; 0xff
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 f926 	bl	8009f00 <USBH_Get_StringDesc>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009cb8:	7bbb      	ldrb	r3, [r7, #14]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d103      	bne.n	8009cc6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2207      	movs	r2, #7
 8009cc2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009cc4:	e038      	b.n	8009d38 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009cc6:	7bbb      	ldrb	r3, [r7, #14]
 8009cc8:	2b03      	cmp	r3, #3
 8009cca:	d135      	bne.n	8009d38 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2207      	movs	r2, #7
 8009cd0:	705a      	strb	r2, [r3, #1]
      break;
 8009cd2:	e031      	b.n	8009d38 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2207      	movs	r2, #7
 8009cd8:	705a      	strb	r2, [r3, #1]
      break;
 8009cda:	e02d      	b.n	8009d38 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d017      	beq.n	8009d16 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009cf2:	23ff      	movs	r3, #255	; 0xff
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 f903 	bl	8009f00 <USBH_Get_StringDesc>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009cfe:	7bbb      	ldrb	r3, [r7, #14]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d102      	bne.n	8009d0a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009d04:	2300      	movs	r3, #0
 8009d06:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009d08:	e018      	b.n	8009d3c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d0a:	7bbb      	ldrb	r3, [r7, #14]
 8009d0c:	2b03      	cmp	r3, #3
 8009d0e:	d115      	bne.n	8009d3c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009d10:	2300      	movs	r3, #0
 8009d12:	73fb      	strb	r3, [r7, #15]
      break;
 8009d14:	e012      	b.n	8009d3c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009d16:	2300      	movs	r3, #0
 8009d18:	73fb      	strb	r3, [r7, #15]
      break;
 8009d1a:	e00f      	b.n	8009d3c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009d1c:	bf00      	nop
 8009d1e:	e00e      	b.n	8009d3e <USBH_HandleEnum+0x3be>
      break;
 8009d20:	bf00      	nop
 8009d22:	e00c      	b.n	8009d3e <USBH_HandleEnum+0x3be>
      break;
 8009d24:	bf00      	nop
 8009d26:	e00a      	b.n	8009d3e <USBH_HandleEnum+0x3be>
      break;
 8009d28:	bf00      	nop
 8009d2a:	e008      	b.n	8009d3e <USBH_HandleEnum+0x3be>
      break;
 8009d2c:	bf00      	nop
 8009d2e:	e006      	b.n	8009d3e <USBH_HandleEnum+0x3be>
      break;
 8009d30:	bf00      	nop
 8009d32:	e004      	b.n	8009d3e <USBH_HandleEnum+0x3be>
      break;
 8009d34:	bf00      	nop
 8009d36:	e002      	b.n	8009d3e <USBH_HandleEnum+0x3be>
      break;
 8009d38:	bf00      	nop
 8009d3a:	e000      	b.n	8009d3e <USBH_HandleEnum+0x3be>
      break;
 8009d3c:	bf00      	nop
  }
  return Status;
 8009d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3710      	adds	r7, #16
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	683a      	ldr	r2, [r7, #0]
 8009d56:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009d5a:	bf00      	nop
 8009d5c:	370c      	adds	r7, #12
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr

08009d66 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b082      	sub	sp, #8
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009d74:	1c5a      	adds	r2, r3, #1
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 f804 	bl	8009d8a <USBH_HandleSof>
}
 8009d82:	bf00      	nop
 8009d84:	3708      	adds	r7, #8
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b082      	sub	sp, #8
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	2b0b      	cmp	r3, #11
 8009d9a:	d10a      	bne.n	8009db2 <USBH_HandleSof+0x28>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d005      	beq.n	8009db2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dac:	699b      	ldr	r3, [r3, #24]
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	4798      	blx	r3
  }
}
 8009db2:	bf00      	nop
 8009db4:	3708      	adds	r7, #8
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009dba:	b480      	push	{r7}
 8009dbc:	b083      	sub	sp, #12
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009dca:	bf00      	nop
}
 8009dcc:	370c      	adds	r7, #12
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr

08009dd6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009dd6:	b480      	push	{r7}
 8009dd8:	b083      	sub	sp, #12
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009de6:	bf00      	nop
}
 8009de8:	370c      	adds	r7, #12
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr

08009df2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009df2:	b480      	push	{r7}
 8009df4:	b083      	sub	sp, #12
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009e12:	2300      	movs	r3, #0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	370c      	adds	r7, #12
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f003 fbd2 	bl	800d5ea <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	791b      	ldrb	r3, [r3, #4]
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 fe91 	bl	800ab74 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	795b      	ldrb	r3, [r3, #5]
 8009e56:	4619      	mov	r1, r3
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 fe8b 	bl	800ab74 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009e5e:	2300      	movs	r3, #0
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3708      	adds	r7, #8
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b086      	sub	sp, #24
 8009e6c:	af02      	add	r7, sp, #8
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	460b      	mov	r3, r1
 8009e72:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009e7a:	78fb      	ldrb	r3, [r7, #3]
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	9300      	str	r3, [sp, #0]
 8009e80:	4613      	mov	r3, r2
 8009e82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e86:	2100      	movs	r1, #0
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 f864 	bl	8009f56 <USBH_GetDescriptor>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8009e92:	7bfb      	ldrb	r3, [r7, #15]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d10a      	bne.n	8009eae <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009ea4:	78fa      	ldrb	r2, [r7, #3]
 8009ea6:	b292      	uxth	r2, r2
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	f000 f918 	bl	800a0de <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3710      	adds	r7, #16
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b086      	sub	sp, #24
 8009ebc:	af02      	add	r7, sp, #8
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	331c      	adds	r3, #28
 8009ec8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009eca:	887b      	ldrh	r3, [r7, #2]
 8009ecc:	9300      	str	r3, [sp, #0]
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ed4:	2100      	movs	r1, #0
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 f83d 	bl	8009f56 <USBH_GetDescriptor>
 8009edc:	4603      	mov	r3, r0
 8009ede:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009ee0:	7bfb      	ldrb	r3, [r7, #15]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d107      	bne.n	8009ef6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009ee6:	887b      	ldrh	r3, [r7, #2]
 8009ee8:	461a      	mov	r2, r3
 8009eea:	68b9      	ldr	r1, [r7, #8]
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 f987 	bl	800a200 <USBH_ParseCfgDesc>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3710      	adds	r7, #16
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b088      	sub	sp, #32
 8009f04:	af02      	add	r7, sp, #8
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	607a      	str	r2, [r7, #4]
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	72fb      	strb	r3, [r7, #11]
 8009f10:	4613      	mov	r3, r2
 8009f12:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8009f14:	7afb      	ldrb	r3, [r7, #11]
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009f1c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009f24:	893b      	ldrh	r3, [r7, #8]
 8009f26:	9300      	str	r3, [sp, #0]
 8009f28:	460b      	mov	r3, r1
 8009f2a:	2100      	movs	r1, #0
 8009f2c:	68f8      	ldr	r0, [r7, #12]
 8009f2e:	f000 f812 	bl	8009f56 <USBH_GetDescriptor>
 8009f32:	4603      	mov	r3, r0
 8009f34:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009f36:	7dfb      	ldrb	r3, [r7, #23]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d107      	bne.n	8009f4c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009f42:	893a      	ldrh	r2, [r7, #8]
 8009f44:	6879      	ldr	r1, [r7, #4]
 8009f46:	4618      	mov	r0, r3
 8009f48:	f000 fb24 	bl	800a594 <USBH_ParseStringDesc>
  }

  return status;
 8009f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3718      	adds	r7, #24
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009f56:	b580      	push	{r7, lr}
 8009f58:	b084      	sub	sp, #16
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	60f8      	str	r0, [r7, #12]
 8009f5e:	607b      	str	r3, [r7, #4]
 8009f60:	460b      	mov	r3, r1
 8009f62:	72fb      	strb	r3, [r7, #11]
 8009f64:	4613      	mov	r3, r2
 8009f66:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	789b      	ldrb	r3, [r3, #2]
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d11c      	bne.n	8009faa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009f70:	7afb      	ldrb	r3, [r7, #11]
 8009f72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009f76:	b2da      	uxtb	r2, r3
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2206      	movs	r2, #6
 8009f80:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	893a      	ldrh	r2, [r7, #8]
 8009f86:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009f88:	893b      	ldrh	r3, [r7, #8]
 8009f8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009f8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f92:	d104      	bne.n	8009f9e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f240 4209 	movw	r2, #1033	; 0x409
 8009f9a:	829a      	strh	r2, [r3, #20]
 8009f9c:	e002      	b.n	8009fa4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	8b3a      	ldrh	r2, [r7, #24]
 8009fa8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009faa:	8b3b      	ldrh	r3, [r7, #24]
 8009fac:	461a      	mov	r2, r3
 8009fae:	6879      	ldr	r1, [r7, #4]
 8009fb0:	68f8      	ldr	r0, [r7, #12]
 8009fb2:	f000 fb3d 	bl	800a630 <USBH_CtlReq>
 8009fb6:	4603      	mov	r3, r0
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3710      	adds	r7, #16
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	460b      	mov	r3, r1
 8009fca:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	789b      	ldrb	r3, [r3, #2]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d10f      	bne.n	8009ff4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2205      	movs	r2, #5
 8009fde:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009fe0:	78fb      	ldrb	r3, [r7, #3]
 8009fe2:	b29a      	uxth	r2, r3
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	2100      	movs	r1, #0
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 fb19 	bl	800a630 <USBH_CtlReq>
 8009ffe:	4603      	mov	r3, r0
}
 800a000:	4618      	mov	r0, r3
 800a002:	3708      	adds	r7, #8
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	460b      	mov	r3, r1
 800a012:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	789b      	ldrb	r3, [r3, #2]
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d10e      	bne.n	800a03a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2209      	movs	r2, #9
 800a026:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	887a      	ldrh	r2, [r7, #2]
 800a02c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a03a:	2200      	movs	r2, #0
 800a03c:	2100      	movs	r1, #0
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 faf6 	bl	800a630 <USBH_CtlReq>
 800a044:	4603      	mov	r3, r0
}
 800a046:	4618      	mov	r0, r3
 800a048:	3708      	adds	r7, #8
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b082      	sub	sp, #8
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
 800a056:	460b      	mov	r3, r1
 800a058:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	789b      	ldrb	r3, [r3, #2]
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d10f      	bne.n	800a082 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2203      	movs	r2, #3
 800a06c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a06e:	78fb      	ldrb	r3, [r7, #3]
 800a070:	b29a      	uxth	r2, r3
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2200      	movs	r2, #0
 800a07a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a082:	2200      	movs	r2, #0
 800a084:	2100      	movs	r1, #0
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 fad2 	bl	800a630 <USBH_CtlReq>
 800a08c:	4603      	mov	r3, r0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3708      	adds	r7, #8
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a096:	b580      	push	{r7, lr}
 800a098:	b082      	sub	sp, #8
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
 800a09e:	460b      	mov	r3, r1
 800a0a0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	789b      	ldrb	r3, [r3, #2]
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d10f      	bne.n	800a0ca <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2202      	movs	r2, #2
 800a0ae:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a0bc:	78fb      	ldrb	r3, [r7, #3]
 800a0be:	b29a      	uxth	r2, r3
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	2100      	movs	r1, #0
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 faae 	bl	800a630 <USBH_CtlReq>
 800a0d4:	4603      	mov	r3, r0
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3708      	adds	r7, #8
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a0de:	b480      	push	{r7}
 800a0e0:	b085      	sub	sp, #20
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	60f8      	str	r0, [r7, #12]
 800a0e6:	60b9      	str	r1, [r7, #8]
 800a0e8:	4613      	mov	r3, r2
 800a0ea:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	781a      	ldrb	r2, [r3, #0]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	785a      	ldrb	r2, [r3, #1]
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	3302      	adds	r3, #2
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	b29a      	uxth	r2, r3
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	3303      	adds	r3, #3
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	021b      	lsls	r3, r3, #8
 800a10e:	b29b      	uxth	r3, r3
 800a110:	4313      	orrs	r3, r2
 800a112:	b29a      	uxth	r2, r3
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	791a      	ldrb	r2, [r3, #4]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	795a      	ldrb	r2, [r3, #5]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	799a      	ldrb	r2, [r3, #6]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	79da      	ldrb	r2, [r3, #7]
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	79db      	ldrb	r3, [r3, #7]
 800a13c:	2b20      	cmp	r3, #32
 800a13e:	dc11      	bgt.n	800a164 <USBH_ParseDevDesc+0x86>
 800a140:	2b08      	cmp	r3, #8
 800a142:	db16      	blt.n	800a172 <USBH_ParseDevDesc+0x94>
 800a144:	3b08      	subs	r3, #8
 800a146:	2201      	movs	r2, #1
 800a148:	fa02 f303 	lsl.w	r3, r2, r3
 800a14c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800a150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a154:	2b00      	cmp	r3, #0
 800a156:	bf14      	ite	ne
 800a158:	2301      	movne	r3, #1
 800a15a:	2300      	moveq	r3, #0
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d102      	bne.n	800a168 <USBH_ParseDevDesc+0x8a>
 800a162:	e006      	b.n	800a172 <USBH_ParseDevDesc+0x94>
 800a164:	2b40      	cmp	r3, #64	; 0x40
 800a166:	d104      	bne.n	800a172 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	79da      	ldrb	r2, [r3, #7]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	71da      	strb	r2, [r3, #7]
      break;
 800a170:	e003      	b.n	800a17a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2240      	movs	r2, #64	; 0x40
 800a176:	71da      	strb	r2, [r3, #7]
      break;
 800a178:	bf00      	nop
  }

  if (length > 8U)
 800a17a:	88fb      	ldrh	r3, [r7, #6]
 800a17c:	2b08      	cmp	r3, #8
 800a17e:	d939      	bls.n	800a1f4 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	3308      	adds	r3, #8
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	b29a      	uxth	r2, r3
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	3309      	adds	r3, #9
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	b29b      	uxth	r3, r3
 800a190:	021b      	lsls	r3, r3, #8
 800a192:	b29b      	uxth	r3, r3
 800a194:	4313      	orrs	r3, r2
 800a196:	b29a      	uxth	r2, r3
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	330a      	adds	r3, #10
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	b29a      	uxth	r2, r3
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	330b      	adds	r3, #11
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	021b      	lsls	r3, r3, #8
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	b29a      	uxth	r2, r3
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	330c      	adds	r3, #12
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	b29a      	uxth	r2, r3
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	330d      	adds	r3, #13
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	021b      	lsls	r3, r3, #8
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	b29a      	uxth	r2, r3
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	7b9a      	ldrb	r2, [r3, #14]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	7bda      	ldrb	r2, [r3, #15]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	7c1a      	ldrb	r2, [r3, #16]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	7c5a      	ldrb	r2, [r3, #17]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	745a      	strb	r2, [r3, #17]
  }
}
 800a1f4:	bf00      	nop
 800a1f6:	3714      	adds	r7, #20
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b08c      	sub	sp, #48	; 0x30
 800a204:	af00      	add	r7, sp, #0
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	60b9      	str	r1, [r7, #8]
 800a20a:	4613      	mov	r3, r2
 800a20c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a214:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a216:	2300      	movs	r3, #0
 800a218:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a220:	2300      	movs	r3, #0
 800a222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800a226:	2300      	movs	r3, #0
 800a228:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	781a      	ldrb	r2, [r3, #0]
 800a234:	6a3b      	ldr	r3, [r7, #32]
 800a236:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	785a      	ldrb	r2, [r3, #1]
 800a23c:	6a3b      	ldr	r3, [r7, #32]
 800a23e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	3302      	adds	r3, #2
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	b29a      	uxth	r2, r3
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	3303      	adds	r3, #3
 800a24c:	781b      	ldrb	r3, [r3, #0]
 800a24e:	b29b      	uxth	r3, r3
 800a250:	021b      	lsls	r3, r3, #8
 800a252:	b29b      	uxth	r3, r3
 800a254:	4313      	orrs	r3, r2
 800a256:	b29b      	uxth	r3, r3
 800a258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a25c:	bf28      	it	cs
 800a25e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800a262:	b29a      	uxth	r2, r3
 800a264:	6a3b      	ldr	r3, [r7, #32]
 800a266:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	791a      	ldrb	r2, [r3, #4]
 800a26c:	6a3b      	ldr	r3, [r7, #32]
 800a26e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	795a      	ldrb	r2, [r3, #5]
 800a274:	6a3b      	ldr	r3, [r7, #32]
 800a276:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	799a      	ldrb	r2, [r3, #6]
 800a27c:	6a3b      	ldr	r3, [r7, #32]
 800a27e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	79da      	ldrb	r2, [r3, #7]
 800a284:	6a3b      	ldr	r3, [r7, #32]
 800a286:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	7a1a      	ldrb	r2, [r3, #8]
 800a28c:	6a3b      	ldr	r3, [r7, #32]
 800a28e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800a290:	6a3b      	ldr	r3, [r7, #32]
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	2b09      	cmp	r3, #9
 800a296:	d002      	beq.n	800a29e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a298:	6a3b      	ldr	r3, [r7, #32]
 800a29a:	2209      	movs	r2, #9
 800a29c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a29e:	88fb      	ldrh	r3, [r7, #6]
 800a2a0:	2b09      	cmp	r3, #9
 800a2a2:	f240 809d 	bls.w	800a3e0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800a2a6:	2309      	movs	r3, #9
 800a2a8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a2ae:	e081      	b.n	800a3b4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a2b0:	f107 0316 	add.w	r3, r7, #22
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2b8:	f000 f99f 	bl	800a5fa <USBH_GetNextDesc>
 800a2bc:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c0:	785b      	ldrb	r3, [r3, #1]
 800a2c2:	2b04      	cmp	r3, #4
 800a2c4:	d176      	bne.n	800a3b4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	2b09      	cmp	r3, #9
 800a2cc:	d002      	beq.n	800a2d4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d0:	2209      	movs	r2, #9
 800a2d2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a2d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2d8:	221a      	movs	r2, #26
 800a2da:	fb02 f303 	mul.w	r3, r2, r3
 800a2de:	3308      	adds	r3, #8
 800a2e0:	6a3a      	ldr	r2, [r7, #32]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	3302      	adds	r3, #2
 800a2e6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a2e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2ea:	69f8      	ldr	r0, [r7, #28]
 800a2ec:	f000 f87e 	bl	800a3ec <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a2fa:	e043      	b.n	800a384 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a2fc:	f107 0316 	add.w	r3, r7, #22
 800a300:	4619      	mov	r1, r3
 800a302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a304:	f000 f979 	bl	800a5fa <USBH_GetNextDesc>
 800a308:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30c:	785b      	ldrb	r3, [r3, #1]
 800a30e:	2b05      	cmp	r3, #5
 800a310:	d138      	bne.n	800a384 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	795b      	ldrb	r3, [r3, #5]
 800a316:	2b01      	cmp	r3, #1
 800a318:	d10f      	bne.n	800a33a <USBH_ParseCfgDesc+0x13a>
 800a31a:	69fb      	ldr	r3, [r7, #28]
 800a31c:	799b      	ldrb	r3, [r3, #6]
 800a31e:	2b02      	cmp	r3, #2
 800a320:	d10b      	bne.n	800a33a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	79db      	ldrb	r3, [r3, #7]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d10f      	bne.n	800a34a <USBH_ParseCfgDesc+0x14a>
 800a32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	2b09      	cmp	r3, #9
 800a330:	d00b      	beq.n	800a34a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800a332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a334:	2209      	movs	r2, #9
 800a336:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a338:	e007      	b.n	800a34a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800a33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	2b07      	cmp	r3, #7
 800a340:	d004      	beq.n	800a34c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a344:	2207      	movs	r2, #7
 800a346:	701a      	strb	r2, [r3, #0]
 800a348:	e000      	b.n	800a34c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a34a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a34c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a350:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a354:	3201      	adds	r2, #1
 800a356:	00d2      	lsls	r2, r2, #3
 800a358:	211a      	movs	r1, #26
 800a35a:	fb01 f303 	mul.w	r3, r1, r3
 800a35e:	4413      	add	r3, r2
 800a360:	3308      	adds	r3, #8
 800a362:	6a3a      	ldr	r2, [r7, #32]
 800a364:	4413      	add	r3, r2
 800a366:	3304      	adds	r3, #4
 800a368:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a36a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a36c:	69b9      	ldr	r1, [r7, #24]
 800a36e:	68f8      	ldr	r0, [r7, #12]
 800a370:	f000 f86b 	bl	800a44a <USBH_ParseEPDesc>
 800a374:	4603      	mov	r3, r0
 800a376:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800a37a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a37e:	3301      	adds	r3, #1
 800a380:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a384:	69fb      	ldr	r3, [r7, #28]
 800a386:	791b      	ldrb	r3, [r3, #4]
 800a388:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d204      	bcs.n	800a39a <USBH_ParseCfgDesc+0x19a>
 800a390:	6a3b      	ldr	r3, [r7, #32]
 800a392:	885a      	ldrh	r2, [r3, #2]
 800a394:	8afb      	ldrh	r3, [r7, #22]
 800a396:	429a      	cmp	r2, r3
 800a398:	d8b0      	bhi.n	800a2fc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a39a:	69fb      	ldr	r3, [r7, #28]
 800a39c:	791b      	ldrb	r3, [r3, #4]
 800a39e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d201      	bcs.n	800a3aa <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800a3a6:	2303      	movs	r3, #3
 800a3a8:	e01c      	b.n	800a3e4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800a3aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a3b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d805      	bhi.n	800a3c8 <USBH_ParseCfgDesc+0x1c8>
 800a3bc:	6a3b      	ldr	r3, [r7, #32]
 800a3be:	885a      	ldrh	r2, [r3, #2]
 800a3c0:	8afb      	ldrh	r3, [r7, #22]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	f63f af74 	bhi.w	800a2b0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a3c8:	6a3b      	ldr	r3, [r7, #32]
 800a3ca:	791b      	ldrb	r3, [r3, #4]
 800a3cc:	2b02      	cmp	r3, #2
 800a3ce:	bf28      	it	cs
 800a3d0:	2302      	movcs	r3, #2
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d201      	bcs.n	800a3e0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800a3dc:	2303      	movs	r3, #3
 800a3de:	e001      	b.n	800a3e4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800a3e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3730      	adds	r7, #48	; 0x30
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b083      	sub	sp, #12
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	781a      	ldrb	r2, [r3, #0]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	785a      	ldrb	r2, [r3, #1]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	789a      	ldrb	r2, [r3, #2]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	78da      	ldrb	r2, [r3, #3]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	791a      	ldrb	r2, [r3, #4]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	795a      	ldrb	r2, [r3, #5]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	799a      	ldrb	r2, [r3, #6]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	79da      	ldrb	r2, [r3, #7]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	7a1a      	ldrb	r2, [r3, #8]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	721a      	strb	r2, [r3, #8]
}
 800a43e:	bf00      	nop
 800a440:	370c      	adds	r7, #12
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr

0800a44a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800a44a:	b480      	push	{r7}
 800a44c:	b087      	sub	sp, #28
 800a44e:	af00      	add	r7, sp, #0
 800a450:	60f8      	str	r0, [r7, #12]
 800a452:	60b9      	str	r1, [r7, #8]
 800a454:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a456:	2300      	movs	r3, #0
 800a458:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	781a      	ldrb	r2, [r3, #0]
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	785a      	ldrb	r2, [r3, #1]
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	789a      	ldrb	r2, [r3, #2]
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	78da      	ldrb	r2, [r3, #3]
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	3304      	adds	r3, #4
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	b29a      	uxth	r2, r3
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	3305      	adds	r3, #5
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	b29b      	uxth	r3, r3
 800a48a:	021b      	lsls	r3, r3, #8
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	4313      	orrs	r3, r2
 800a490:	b29a      	uxth	r2, r3
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	799a      	ldrb	r2, [r3, #6]
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	889b      	ldrh	r3, [r3, #4]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d102      	bne.n	800a4ac <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800a4a6:	2303      	movs	r3, #3
 800a4a8:	75fb      	strb	r3, [r7, #23]
 800a4aa:	e033      	b.n	800a514 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	889b      	ldrh	r3, [r3, #4]
 800a4b0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a4b4:	f023 0307 	bic.w	r3, r3, #7
 800a4b8:	b29a      	uxth	r2, r3
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	889b      	ldrh	r3, [r3, #4]
 800a4c2:	b21a      	sxth	r2, r3
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	3304      	adds	r3, #4
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	b299      	uxth	r1, r3
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	3305      	adds	r3, #5
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	b29b      	uxth	r3, r3
 800a4d4:	021b      	lsls	r3, r3, #8
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	430b      	orrs	r3, r1
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d110      	bne.n	800a506 <USBH_ParseEPDesc+0xbc>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	3304      	adds	r3, #4
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	b299      	uxth	r1, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	3305      	adds	r3, #5
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	021b      	lsls	r3, r3, #8
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	430b      	orrs	r3, r1
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	b21b      	sxth	r3, r3
 800a4fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a502:	b21b      	sxth	r3, r3
 800a504:	e001      	b.n	800a50a <USBH_ParseEPDesc+0xc0>
 800a506:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a50a:	4313      	orrs	r3, r2
 800a50c:	b21b      	sxth	r3, r3
 800a50e:	b29a      	uxth	r2, r3
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d116      	bne.n	800a54c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	78db      	ldrb	r3, [r3, #3]
 800a522:	f003 0303 	and.w	r3, r3, #3
 800a526:	2b01      	cmp	r3, #1
 800a528:	d005      	beq.n	800a536 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	78db      	ldrb	r3, [r3, #3]
 800a52e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a532:	2b03      	cmp	r3, #3
 800a534:	d127      	bne.n	800a586 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	799b      	ldrb	r3, [r3, #6]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d003      	beq.n	800a546 <USBH_ParseEPDesc+0xfc>
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	799b      	ldrb	r3, [r3, #6]
 800a542:	2b10      	cmp	r3, #16
 800a544:	d91f      	bls.n	800a586 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a546:	2303      	movs	r3, #3
 800a548:	75fb      	strb	r3, [r7, #23]
 800a54a:	e01c      	b.n	800a586 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	78db      	ldrb	r3, [r3, #3]
 800a550:	f003 0303 	and.w	r3, r3, #3
 800a554:	2b01      	cmp	r3, #1
 800a556:	d10a      	bne.n	800a56e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	799b      	ldrb	r3, [r3, #6]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d003      	beq.n	800a568 <USBH_ParseEPDesc+0x11e>
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	799b      	ldrb	r3, [r3, #6]
 800a564:	2b10      	cmp	r3, #16
 800a566:	d90e      	bls.n	800a586 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a568:	2303      	movs	r3, #3
 800a56a:	75fb      	strb	r3, [r7, #23]
 800a56c:	e00b      	b.n	800a586 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	78db      	ldrb	r3, [r3, #3]
 800a572:	f003 0303 	and.w	r3, r3, #3
 800a576:	2b03      	cmp	r3, #3
 800a578:	d105      	bne.n	800a586 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	799b      	ldrb	r3, [r3, #6]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d101      	bne.n	800a586 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a582:	2303      	movs	r3, #3
 800a584:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800a586:	7dfb      	ldrb	r3, [r7, #23]
}
 800a588:	4618      	mov	r0, r3
 800a58a:	371c      	adds	r7, #28
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a594:	b480      	push	{r7}
 800a596:	b087      	sub	sp, #28
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	4613      	mov	r3, r2
 800a5a0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	2b03      	cmp	r3, #3
 800a5aa:	d120      	bne.n	800a5ee <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	1e9a      	subs	r2, r3, #2
 800a5b2:	88fb      	ldrh	r3, [r7, #6]
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	bf28      	it	cs
 800a5b8:	4613      	movcs	r3, r2
 800a5ba:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	3302      	adds	r3, #2
 800a5c0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	82fb      	strh	r3, [r7, #22]
 800a5c6:	e00b      	b.n	800a5e0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a5c8:	8afb      	ldrh	r3, [r7, #22]
 800a5ca:	68fa      	ldr	r2, [r7, #12]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	781a      	ldrb	r2, [r3, #0]
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	3301      	adds	r3, #1
 800a5d8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a5da:	8afb      	ldrh	r3, [r7, #22]
 800a5dc:	3302      	adds	r3, #2
 800a5de:	82fb      	strh	r3, [r7, #22]
 800a5e0:	8afa      	ldrh	r2, [r7, #22]
 800a5e2:	8abb      	ldrh	r3, [r7, #20]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d3ef      	bcc.n	800a5c8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	701a      	strb	r2, [r3, #0]
  }
}
 800a5ee:	bf00      	nop
 800a5f0:	371c      	adds	r7, #28
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f8:	4770      	bx	lr

0800a5fa <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a5fa:	b480      	push	{r7}
 800a5fc:	b085      	sub	sp, #20
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
 800a602:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	881a      	ldrh	r2, [r3, #0]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	4413      	add	r3, r2
 800a610:	b29a      	uxth	r2, r3
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	4413      	add	r3, r2
 800a620:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a622:	68fb      	ldr	r3, [r7, #12]
}
 800a624:	4618      	mov	r0, r3
 800a626:	3714      	adds	r7, #20
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b086      	sub	sp, #24
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	4613      	mov	r3, r2
 800a63c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a63e:	2301      	movs	r3, #1
 800a640:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	789b      	ldrb	r3, [r3, #2]
 800a646:	2b01      	cmp	r3, #1
 800a648:	d002      	beq.n	800a650 <USBH_CtlReq+0x20>
 800a64a:	2b02      	cmp	r3, #2
 800a64c:	d00f      	beq.n	800a66e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a64e:	e027      	b.n	800a6a0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	68ba      	ldr	r2, [r7, #8]
 800a654:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	88fa      	ldrh	r2, [r7, #6]
 800a65a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2201      	movs	r2, #1
 800a660:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2202      	movs	r2, #2
 800a666:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a668:	2301      	movs	r3, #1
 800a66a:	75fb      	strb	r3, [r7, #23]
      break;
 800a66c:	e018      	b.n	800a6a0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a66e:	68f8      	ldr	r0, [r7, #12]
 800a670:	f000 f81c 	bl	800a6ac <USBH_HandleControl>
 800a674:	4603      	mov	r3, r0
 800a676:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a678:	7dfb      	ldrb	r3, [r7, #23]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d002      	beq.n	800a684 <USBH_CtlReq+0x54>
 800a67e:	7dfb      	ldrb	r3, [r7, #23]
 800a680:	2b03      	cmp	r3, #3
 800a682:	d106      	bne.n	800a692 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2201      	movs	r2, #1
 800a688:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2200      	movs	r2, #0
 800a68e:	761a      	strb	r2, [r3, #24]
      break;
 800a690:	e005      	b.n	800a69e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a692:	7dfb      	ldrb	r3, [r7, #23]
 800a694:	2b02      	cmp	r3, #2
 800a696:	d102      	bne.n	800a69e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2201      	movs	r2, #1
 800a69c:	709a      	strb	r2, [r3, #2]
      break;
 800a69e:	bf00      	nop
  }
  return status;
 800a6a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3718      	adds	r7, #24
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
	...

0800a6ac <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b086      	sub	sp, #24
 800a6b0:	af02      	add	r7, sp, #8
 800a6b2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	7e1b      	ldrb	r3, [r3, #24]
 800a6c0:	3b01      	subs	r3, #1
 800a6c2:	2b0a      	cmp	r3, #10
 800a6c4:	f200 8156 	bhi.w	800a974 <USBH_HandleControl+0x2c8>
 800a6c8:	a201      	add	r2, pc, #4	; (adr r2, 800a6d0 <USBH_HandleControl+0x24>)
 800a6ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ce:	bf00      	nop
 800a6d0:	0800a6fd 	.word	0x0800a6fd
 800a6d4:	0800a717 	.word	0x0800a717
 800a6d8:	0800a781 	.word	0x0800a781
 800a6dc:	0800a7a7 	.word	0x0800a7a7
 800a6e0:	0800a7df 	.word	0x0800a7df
 800a6e4:	0800a809 	.word	0x0800a809
 800a6e8:	0800a85b 	.word	0x0800a85b
 800a6ec:	0800a87d 	.word	0x0800a87d
 800a6f0:	0800a8b9 	.word	0x0800a8b9
 800a6f4:	0800a8df 	.word	0x0800a8df
 800a6f8:	0800a91d 	.word	0x0800a91d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f103 0110 	add.w	r1, r3, #16
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	795b      	ldrb	r3, [r3, #5]
 800a706:	461a      	mov	r2, r3
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f000 f943 	bl	800a994 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2202      	movs	r2, #2
 800a712:	761a      	strb	r2, [r3, #24]
      break;
 800a714:	e139      	b.n	800a98a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	795b      	ldrb	r3, [r3, #5]
 800a71a:	4619      	mov	r1, r3
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f003 f853 	bl	800d7c8 <USBH_LL_GetURBState>
 800a722:	4603      	mov	r3, r0
 800a724:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a726:	7bbb      	ldrb	r3, [r7, #14]
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d11e      	bne.n	800a76a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	7c1b      	ldrb	r3, [r3, #16]
 800a730:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a734:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	8adb      	ldrh	r3, [r3, #22]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d00a      	beq.n	800a754 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a73e:	7b7b      	ldrb	r3, [r7, #13]
 800a740:	2b80      	cmp	r3, #128	; 0x80
 800a742:	d103      	bne.n	800a74c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2203      	movs	r2, #3
 800a748:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a74a:	e115      	b.n	800a978 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2205      	movs	r2, #5
 800a750:	761a      	strb	r2, [r3, #24]
      break;
 800a752:	e111      	b.n	800a978 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a754:	7b7b      	ldrb	r3, [r7, #13]
 800a756:	2b80      	cmp	r3, #128	; 0x80
 800a758:	d103      	bne.n	800a762 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2209      	movs	r2, #9
 800a75e:	761a      	strb	r2, [r3, #24]
      break;
 800a760:	e10a      	b.n	800a978 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2207      	movs	r2, #7
 800a766:	761a      	strb	r2, [r3, #24]
      break;
 800a768:	e106      	b.n	800a978 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a76a:	7bbb      	ldrb	r3, [r7, #14]
 800a76c:	2b04      	cmp	r3, #4
 800a76e:	d003      	beq.n	800a778 <USBH_HandleControl+0xcc>
 800a770:	7bbb      	ldrb	r3, [r7, #14]
 800a772:	2b02      	cmp	r3, #2
 800a774:	f040 8100 	bne.w	800a978 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	220b      	movs	r2, #11
 800a77c:	761a      	strb	r2, [r3, #24]
      break;
 800a77e:	e0fb      	b.n	800a978 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a786:	b29a      	uxth	r2, r3
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6899      	ldr	r1, [r3, #8]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	899a      	ldrh	r2, [r3, #12]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	791b      	ldrb	r3, [r3, #4]
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 f93a 	bl	800aa12 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2204      	movs	r2, #4
 800a7a2:	761a      	strb	r2, [r3, #24]
      break;
 800a7a4:	e0f1      	b.n	800a98a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	791b      	ldrb	r3, [r3, #4]
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f003 f80b 	bl	800d7c8 <USBH_LL_GetURBState>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a7b6:	7bbb      	ldrb	r3, [r7, #14]
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d102      	bne.n	800a7c2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2209      	movs	r2, #9
 800a7c0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a7c2:	7bbb      	ldrb	r3, [r7, #14]
 800a7c4:	2b05      	cmp	r3, #5
 800a7c6:	d102      	bne.n	800a7ce <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a7c8:	2303      	movs	r3, #3
 800a7ca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a7cc:	e0d6      	b.n	800a97c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a7ce:	7bbb      	ldrb	r3, [r7, #14]
 800a7d0:	2b04      	cmp	r3, #4
 800a7d2:	f040 80d3 	bne.w	800a97c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	220b      	movs	r2, #11
 800a7da:	761a      	strb	r2, [r3, #24]
      break;
 800a7dc:	e0ce      	b.n	800a97c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6899      	ldr	r1, [r3, #8]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	899a      	ldrh	r2, [r3, #12]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	795b      	ldrb	r3, [r3, #5]
 800a7ea:	2001      	movs	r0, #1
 800a7ec:	9000      	str	r0, [sp, #0]
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 f8ea 	bl	800a9c8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a7fa:	b29a      	uxth	r2, r3
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2206      	movs	r2, #6
 800a804:	761a      	strb	r2, [r3, #24]
      break;
 800a806:	e0c0      	b.n	800a98a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	795b      	ldrb	r3, [r3, #5]
 800a80c:	4619      	mov	r1, r3
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f002 ffda 	bl	800d7c8 <USBH_LL_GetURBState>
 800a814:	4603      	mov	r3, r0
 800a816:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a818:	7bbb      	ldrb	r3, [r7, #14]
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	d103      	bne.n	800a826 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2207      	movs	r2, #7
 800a822:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a824:	e0ac      	b.n	800a980 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a826:	7bbb      	ldrb	r3, [r7, #14]
 800a828:	2b05      	cmp	r3, #5
 800a82a:	d105      	bne.n	800a838 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	220c      	movs	r2, #12
 800a830:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a832:	2303      	movs	r3, #3
 800a834:	73fb      	strb	r3, [r7, #15]
      break;
 800a836:	e0a3      	b.n	800a980 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a838:	7bbb      	ldrb	r3, [r7, #14]
 800a83a:	2b02      	cmp	r3, #2
 800a83c:	d103      	bne.n	800a846 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2205      	movs	r2, #5
 800a842:	761a      	strb	r2, [r3, #24]
      break;
 800a844:	e09c      	b.n	800a980 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a846:	7bbb      	ldrb	r3, [r7, #14]
 800a848:	2b04      	cmp	r3, #4
 800a84a:	f040 8099 	bne.w	800a980 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	220b      	movs	r2, #11
 800a852:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a854:	2302      	movs	r3, #2
 800a856:	73fb      	strb	r3, [r7, #15]
      break;
 800a858:	e092      	b.n	800a980 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	791b      	ldrb	r3, [r3, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	2100      	movs	r1, #0
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 f8d5 	bl	800aa12 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a86e:	b29a      	uxth	r2, r3
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2208      	movs	r2, #8
 800a878:	761a      	strb	r2, [r3, #24]

      break;
 800a87a:	e086      	b.n	800a98a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	791b      	ldrb	r3, [r3, #4]
 800a880:	4619      	mov	r1, r3
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f002 ffa0 	bl	800d7c8 <USBH_LL_GetURBState>
 800a888:	4603      	mov	r3, r0
 800a88a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a88c:	7bbb      	ldrb	r3, [r7, #14]
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d105      	bne.n	800a89e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	220d      	movs	r2, #13
 800a896:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a898:	2300      	movs	r3, #0
 800a89a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a89c:	e072      	b.n	800a984 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a89e:	7bbb      	ldrb	r3, [r7, #14]
 800a8a0:	2b04      	cmp	r3, #4
 800a8a2:	d103      	bne.n	800a8ac <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	220b      	movs	r2, #11
 800a8a8:	761a      	strb	r2, [r3, #24]
      break;
 800a8aa:	e06b      	b.n	800a984 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a8ac:	7bbb      	ldrb	r3, [r7, #14]
 800a8ae:	2b05      	cmp	r3, #5
 800a8b0:	d168      	bne.n	800a984 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a8b2:	2303      	movs	r3, #3
 800a8b4:	73fb      	strb	r3, [r7, #15]
      break;
 800a8b6:	e065      	b.n	800a984 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	795b      	ldrb	r3, [r3, #5]
 800a8bc:	2201      	movs	r2, #1
 800a8be:	9200      	str	r2, [sp, #0]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	2100      	movs	r1, #0
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f000 f87f 	bl	800a9c8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a8d0:	b29a      	uxth	r2, r3
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	220a      	movs	r2, #10
 800a8da:	761a      	strb	r2, [r3, #24]
      break;
 800a8dc:	e055      	b.n	800a98a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	795b      	ldrb	r3, [r3, #5]
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f002 ff6f 	bl	800d7c8 <USBH_LL_GetURBState>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a8ee:	7bbb      	ldrb	r3, [r7, #14]
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d105      	bne.n	800a900 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	220d      	movs	r2, #13
 800a8fc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a8fe:	e043      	b.n	800a988 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a900:	7bbb      	ldrb	r3, [r7, #14]
 800a902:	2b02      	cmp	r3, #2
 800a904:	d103      	bne.n	800a90e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2209      	movs	r2, #9
 800a90a:	761a      	strb	r2, [r3, #24]
      break;
 800a90c:	e03c      	b.n	800a988 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a90e:	7bbb      	ldrb	r3, [r7, #14]
 800a910:	2b04      	cmp	r3, #4
 800a912:	d139      	bne.n	800a988 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	220b      	movs	r2, #11
 800a918:	761a      	strb	r2, [r3, #24]
      break;
 800a91a:	e035      	b.n	800a988 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	7e5b      	ldrb	r3, [r3, #25]
 800a920:	3301      	adds	r3, #1
 800a922:	b2da      	uxtb	r2, r3
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	765a      	strb	r2, [r3, #25]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	7e5b      	ldrb	r3, [r3, #25]
 800a92c:	2b02      	cmp	r3, #2
 800a92e:	d806      	bhi.n	800a93e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2201      	movs	r2, #1
 800a934:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2201      	movs	r2, #1
 800a93a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a93c:	e025      	b.n	800a98a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a944:	2106      	movs	r1, #6
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	795b      	ldrb	r3, [r3, #5]
 800a954:	4619      	mov	r1, r3
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 f90c 	bl	800ab74 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	791b      	ldrb	r3, [r3, #4]
 800a960:	4619      	mov	r1, r3
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 f906 	bl	800ab74 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2200      	movs	r2, #0
 800a96c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a96e:	2302      	movs	r3, #2
 800a970:	73fb      	strb	r3, [r7, #15]
      break;
 800a972:	e00a      	b.n	800a98a <USBH_HandleControl+0x2de>

    default:
      break;
 800a974:	bf00      	nop
 800a976:	e008      	b.n	800a98a <USBH_HandleControl+0x2de>
      break;
 800a978:	bf00      	nop
 800a97a:	e006      	b.n	800a98a <USBH_HandleControl+0x2de>
      break;
 800a97c:	bf00      	nop
 800a97e:	e004      	b.n	800a98a <USBH_HandleControl+0x2de>
      break;
 800a980:	bf00      	nop
 800a982:	e002      	b.n	800a98a <USBH_HandleControl+0x2de>
      break;
 800a984:	bf00      	nop
 800a986:	e000      	b.n	800a98a <USBH_HandleControl+0x2de>
      break;
 800a988:	bf00      	nop
  }

  return status;
 800a98a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3710      	adds	r7, #16
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b088      	sub	sp, #32
 800a998:	af04      	add	r7, sp, #16
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	4613      	mov	r3, r2
 800a9a0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a9a2:	79f9      	ldrb	r1, [r7, #7]
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	9303      	str	r3, [sp, #12]
 800a9a8:	2308      	movs	r3, #8
 800a9aa:	9302      	str	r3, [sp, #8]
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	9301      	str	r3, [sp, #4]
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	9300      	str	r3, [sp, #0]
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	f002 fed4 	bl	800d766 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a9be:	2300      	movs	r3, #0
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3710      	adds	r7, #16
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b088      	sub	sp, #32
 800a9cc:	af04      	add	r7, sp, #16
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	4611      	mov	r1, r2
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	80fb      	strh	r3, [r7, #6]
 800a9da:	4613      	mov	r3, r2
 800a9dc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d001      	beq.n	800a9ec <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a9ec:	7979      	ldrb	r1, [r7, #5]
 800a9ee:	7e3b      	ldrb	r3, [r7, #24]
 800a9f0:	9303      	str	r3, [sp, #12]
 800a9f2:	88fb      	ldrh	r3, [r7, #6]
 800a9f4:	9302      	str	r3, [sp, #8]
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	9301      	str	r3, [sp, #4]
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	9300      	str	r3, [sp, #0]
 800a9fe:	2300      	movs	r3, #0
 800aa00:	2200      	movs	r2, #0
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	f002 feaf 	bl	800d766 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800aa08:	2300      	movs	r3, #0
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3710      	adds	r7, #16
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}

0800aa12 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800aa12:	b580      	push	{r7, lr}
 800aa14:	b088      	sub	sp, #32
 800aa16:	af04      	add	r7, sp, #16
 800aa18:	60f8      	str	r0, [r7, #12]
 800aa1a:	60b9      	str	r1, [r7, #8]
 800aa1c:	4611      	mov	r1, r2
 800aa1e:	461a      	mov	r2, r3
 800aa20:	460b      	mov	r3, r1
 800aa22:	80fb      	strh	r3, [r7, #6]
 800aa24:	4613      	mov	r3, r2
 800aa26:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa28:	7979      	ldrb	r1, [r7, #5]
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	9303      	str	r3, [sp, #12]
 800aa2e:	88fb      	ldrh	r3, [r7, #6]
 800aa30:	9302      	str	r3, [sp, #8]
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	9301      	str	r3, [sp, #4]
 800aa36:	2301      	movs	r3, #1
 800aa38:	9300      	str	r3, [sp, #0]
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	f002 fe91 	bl	800d766 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aa44:	2300      	movs	r3, #0

}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3710      	adds	r7, #16
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}

0800aa4e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800aa4e:	b580      	push	{r7, lr}
 800aa50:	b088      	sub	sp, #32
 800aa52:	af04      	add	r7, sp, #16
 800aa54:	60f8      	str	r0, [r7, #12]
 800aa56:	60b9      	str	r1, [r7, #8]
 800aa58:	4611      	mov	r1, r2
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	80fb      	strh	r3, [r7, #6]
 800aa60:	4613      	mov	r3, r2
 800aa62:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d001      	beq.n	800aa72 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa72:	7979      	ldrb	r1, [r7, #5]
 800aa74:	7e3b      	ldrb	r3, [r7, #24]
 800aa76:	9303      	str	r3, [sp, #12]
 800aa78:	88fb      	ldrh	r3, [r7, #6]
 800aa7a:	9302      	str	r3, [sp, #8]
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	9301      	str	r3, [sp, #4]
 800aa80:	2301      	movs	r3, #1
 800aa82:	9300      	str	r3, [sp, #0]
 800aa84:	2302      	movs	r3, #2
 800aa86:	2200      	movs	r2, #0
 800aa88:	68f8      	ldr	r0, [r7, #12]
 800aa8a:	f002 fe6c 	bl	800d766 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800aa8e:	2300      	movs	r3, #0
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3710      	adds	r7, #16
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b088      	sub	sp, #32
 800aa9c:	af04      	add	r7, sp, #16
 800aa9e:	60f8      	str	r0, [r7, #12]
 800aaa0:	60b9      	str	r1, [r7, #8]
 800aaa2:	4611      	mov	r1, r2
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	460b      	mov	r3, r1
 800aaa8:	80fb      	strh	r3, [r7, #6]
 800aaaa:	4613      	mov	r3, r2
 800aaac:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aaae:	7979      	ldrb	r1, [r7, #5]
 800aab0:	2300      	movs	r3, #0
 800aab2:	9303      	str	r3, [sp, #12]
 800aab4:	88fb      	ldrh	r3, [r7, #6]
 800aab6:	9302      	str	r3, [sp, #8]
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	9301      	str	r3, [sp, #4]
 800aabc:	2301      	movs	r3, #1
 800aabe:	9300      	str	r3, [sp, #0]
 800aac0:	2302      	movs	r3, #2
 800aac2:	2201      	movs	r2, #1
 800aac4:	68f8      	ldr	r0, [r7, #12]
 800aac6:	f002 fe4e 	bl	800d766 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aaca:	2300      	movs	r3, #0
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3710      	adds	r7, #16
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b086      	sub	sp, #24
 800aad8:	af04      	add	r7, sp, #16
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	4608      	mov	r0, r1
 800aade:	4611      	mov	r1, r2
 800aae0:	461a      	mov	r2, r3
 800aae2:	4603      	mov	r3, r0
 800aae4:	70fb      	strb	r3, [r7, #3]
 800aae6:	460b      	mov	r3, r1
 800aae8:	70bb      	strb	r3, [r7, #2]
 800aaea:	4613      	mov	r3, r2
 800aaec:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800aaee:	7878      	ldrb	r0, [r7, #1]
 800aaf0:	78ba      	ldrb	r2, [r7, #2]
 800aaf2:	78f9      	ldrb	r1, [r7, #3]
 800aaf4:	8b3b      	ldrh	r3, [r7, #24]
 800aaf6:	9302      	str	r3, [sp, #8]
 800aaf8:	7d3b      	ldrb	r3, [r7, #20]
 800aafa:	9301      	str	r3, [sp, #4]
 800aafc:	7c3b      	ldrb	r3, [r7, #16]
 800aafe:	9300      	str	r3, [sp, #0]
 800ab00:	4603      	mov	r3, r0
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f002 fde1 	bl	800d6ca <USBH_LL_OpenPipe>

  return USBH_OK;
 800ab08:	2300      	movs	r3, #0
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3708      	adds	r7, #8
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}

0800ab12 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b082      	sub	sp, #8
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ab1e:	78fb      	ldrb	r3, [r7, #3]
 800ab20:	4619      	mov	r1, r3
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f002 fe00 	bl	800d728 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ab28:	2300      	movs	r3, #0
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3708      	adds	r7, #8
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}

0800ab32 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ab32:	b580      	push	{r7, lr}
 800ab34:	b084      	sub	sp, #16
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
 800ab3a:	460b      	mov	r3, r1
 800ab3c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 f836 	bl	800abb0 <USBH_GetFreePipe>
 800ab44:	4603      	mov	r3, r0
 800ab46:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ab48:	89fb      	ldrh	r3, [r7, #14]
 800ab4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d00a      	beq.n	800ab68 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ab52:	78fa      	ldrb	r2, [r7, #3]
 800ab54:	89fb      	ldrh	r3, [r7, #14]
 800ab56:	f003 030f 	and.w	r3, r3, #15
 800ab5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ab5e:	6879      	ldr	r1, [r7, #4]
 800ab60:	33e0      	adds	r3, #224	; 0xe0
 800ab62:	009b      	lsls	r3, r3, #2
 800ab64:	440b      	add	r3, r1
 800ab66:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ab68:	89fb      	ldrh	r3, [r7, #14]
 800ab6a:	b2db      	uxtb	r3, r3
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3710      	adds	r7, #16
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b083      	sub	sp, #12
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ab80:	78fb      	ldrb	r3, [r7, #3]
 800ab82:	2b0f      	cmp	r3, #15
 800ab84:	d80d      	bhi.n	800aba2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ab86:	78fb      	ldrb	r3, [r7, #3]
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	33e0      	adds	r3, #224	; 0xe0
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	4413      	add	r3, r2
 800ab90:	685a      	ldr	r2, [r3, #4]
 800ab92:	78fb      	ldrb	r3, [r7, #3]
 800ab94:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ab98:	6879      	ldr	r1, [r7, #4]
 800ab9a:	33e0      	adds	r3, #224	; 0xe0
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	440b      	add	r3, r1
 800aba0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800aba2:	2300      	movs	r3, #0
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	370c      	adds	r7, #12
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr

0800abb0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b085      	sub	sp, #20
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800abb8:	2300      	movs	r3, #0
 800abba:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800abbc:	2300      	movs	r3, #0
 800abbe:	73fb      	strb	r3, [r7, #15]
 800abc0:	e00f      	b.n	800abe2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800abc2:	7bfb      	ldrb	r3, [r7, #15]
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	33e0      	adds	r3, #224	; 0xe0
 800abc8:	009b      	lsls	r3, r3, #2
 800abca:	4413      	add	r3, r2
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d102      	bne.n	800abdc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800abd6:	7bfb      	ldrb	r3, [r7, #15]
 800abd8:	b29b      	uxth	r3, r3
 800abda:	e007      	b.n	800abec <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800abdc:	7bfb      	ldrb	r3, [r7, #15]
 800abde:	3301      	adds	r3, #1
 800abe0:	73fb      	strb	r3, [r7, #15]
 800abe2:	7bfb      	ldrb	r3, [r7, #15]
 800abe4:	2b0f      	cmp	r3, #15
 800abe6:	d9ec      	bls.n	800abc2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800abe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800abec:	4618      	mov	r0, r3
 800abee:	3714      	adds	r7, #20
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr

0800abf8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	4603      	mov	r3, r0
 800ac00:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ac02:	79fb      	ldrb	r3, [r7, #7]
 800ac04:	4a08      	ldr	r2, [pc, #32]	; (800ac28 <disk_status+0x30>)
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	4413      	add	r3, r2
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	79fa      	ldrb	r2, [r7, #7]
 800ac10:	4905      	ldr	r1, [pc, #20]	; (800ac28 <disk_status+0x30>)
 800ac12:	440a      	add	r2, r1
 800ac14:	7a12      	ldrb	r2, [r2, #8]
 800ac16:	4610      	mov	r0, r2
 800ac18:	4798      	blx	r3
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ac1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3710      	adds	r7, #16
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	200016ac 	.word	0x200016ac

0800ac2c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	4603      	mov	r3, r0
 800ac34:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ac36:	2300      	movs	r3, #0
 800ac38:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ac3a:	79fb      	ldrb	r3, [r7, #7]
 800ac3c:	4a0d      	ldr	r2, [pc, #52]	; (800ac74 <disk_initialize+0x48>)
 800ac3e:	5cd3      	ldrb	r3, [r2, r3]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d111      	bne.n	800ac68 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ac44:	79fb      	ldrb	r3, [r7, #7]
 800ac46:	4a0b      	ldr	r2, [pc, #44]	; (800ac74 <disk_initialize+0x48>)
 800ac48:	2101      	movs	r1, #1
 800ac4a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ac4c:	79fb      	ldrb	r3, [r7, #7]
 800ac4e:	4a09      	ldr	r2, [pc, #36]	; (800ac74 <disk_initialize+0x48>)
 800ac50:	009b      	lsls	r3, r3, #2
 800ac52:	4413      	add	r3, r2
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	79fa      	ldrb	r2, [r7, #7]
 800ac5a:	4906      	ldr	r1, [pc, #24]	; (800ac74 <disk_initialize+0x48>)
 800ac5c:	440a      	add	r2, r1
 800ac5e:	7a12      	ldrb	r2, [r2, #8]
 800ac60:	4610      	mov	r0, r2
 800ac62:	4798      	blx	r3
 800ac64:	4603      	mov	r3, r0
 800ac66:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ac68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3710      	adds	r7, #16
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
 800ac72:	bf00      	nop
 800ac74:	200016ac 	.word	0x200016ac

0800ac78 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ac78:	b590      	push	{r4, r7, lr}
 800ac7a:	b087      	sub	sp, #28
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	60b9      	str	r1, [r7, #8]
 800ac80:	607a      	str	r2, [r7, #4]
 800ac82:	603b      	str	r3, [r7, #0]
 800ac84:	4603      	mov	r3, r0
 800ac86:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ac88:	7bfb      	ldrb	r3, [r7, #15]
 800ac8a:	4a0a      	ldr	r2, [pc, #40]	; (800acb4 <disk_read+0x3c>)
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	4413      	add	r3, r2
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	689c      	ldr	r4, [r3, #8]
 800ac94:	7bfb      	ldrb	r3, [r7, #15]
 800ac96:	4a07      	ldr	r2, [pc, #28]	; (800acb4 <disk_read+0x3c>)
 800ac98:	4413      	add	r3, r2
 800ac9a:	7a18      	ldrb	r0, [r3, #8]
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	68b9      	ldr	r1, [r7, #8]
 800aca2:	47a0      	blx	r4
 800aca4:	4603      	mov	r3, r0
 800aca6:	75fb      	strb	r3, [r7, #23]
  return res;
 800aca8:	7dfb      	ldrb	r3, [r7, #23]
}
 800acaa:	4618      	mov	r0, r3
 800acac:	371c      	adds	r7, #28
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd90      	pop	{r4, r7, pc}
 800acb2:	bf00      	nop
 800acb4:	200016ac 	.word	0x200016ac

0800acb8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800acb8:	b590      	push	{r4, r7, lr}
 800acba:	b087      	sub	sp, #28
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	60b9      	str	r1, [r7, #8]
 800acc0:	607a      	str	r2, [r7, #4]
 800acc2:	603b      	str	r3, [r7, #0]
 800acc4:	4603      	mov	r3, r0
 800acc6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800acc8:	7bfb      	ldrb	r3, [r7, #15]
 800acca:	4a0a      	ldr	r2, [pc, #40]	; (800acf4 <disk_write+0x3c>)
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	4413      	add	r3, r2
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	68dc      	ldr	r4, [r3, #12]
 800acd4:	7bfb      	ldrb	r3, [r7, #15]
 800acd6:	4a07      	ldr	r2, [pc, #28]	; (800acf4 <disk_write+0x3c>)
 800acd8:	4413      	add	r3, r2
 800acda:	7a18      	ldrb	r0, [r3, #8]
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	68b9      	ldr	r1, [r7, #8]
 800ace2:	47a0      	blx	r4
 800ace4:	4603      	mov	r3, r0
 800ace6:	75fb      	strb	r3, [r7, #23]
  return res;
 800ace8:	7dfb      	ldrb	r3, [r7, #23]
}
 800acea:	4618      	mov	r0, r3
 800acec:	371c      	adds	r7, #28
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd90      	pop	{r4, r7, pc}
 800acf2:	bf00      	nop
 800acf4:	200016ac 	.word	0x200016ac

0800acf8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	4603      	mov	r3, r0
 800ad00:	603a      	str	r2, [r7, #0]
 800ad02:	71fb      	strb	r3, [r7, #7]
 800ad04:	460b      	mov	r3, r1
 800ad06:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ad08:	79fb      	ldrb	r3, [r7, #7]
 800ad0a:	4a09      	ldr	r2, [pc, #36]	; (800ad30 <disk_ioctl+0x38>)
 800ad0c:	009b      	lsls	r3, r3, #2
 800ad0e:	4413      	add	r3, r2
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	691b      	ldr	r3, [r3, #16]
 800ad14:	79fa      	ldrb	r2, [r7, #7]
 800ad16:	4906      	ldr	r1, [pc, #24]	; (800ad30 <disk_ioctl+0x38>)
 800ad18:	440a      	add	r2, r1
 800ad1a:	7a10      	ldrb	r0, [r2, #8]
 800ad1c:	79b9      	ldrb	r1, [r7, #6]
 800ad1e:	683a      	ldr	r2, [r7, #0]
 800ad20:	4798      	blx	r3
 800ad22:	4603      	mov	r3, r0
 800ad24:	73fb      	strb	r3, [r7, #15]
  return res;
 800ad26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3710      	adds	r7, #16
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}
 800ad30:	200016ac 	.word	0x200016ac

0800ad34 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ad34:	b480      	push	{r7}
 800ad36:	b085      	sub	sp, #20
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	3301      	adds	r3, #1
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ad44:	89fb      	ldrh	r3, [r7, #14]
 800ad46:	021b      	lsls	r3, r3, #8
 800ad48:	b21a      	sxth	r2, r3
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	781b      	ldrb	r3, [r3, #0]
 800ad4e:	b21b      	sxth	r3, r3
 800ad50:	4313      	orrs	r3, r2
 800ad52:	b21b      	sxth	r3, r3
 800ad54:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ad56:	89fb      	ldrh	r3, [r7, #14]
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3714      	adds	r7, #20
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad62:	4770      	bx	lr

0800ad64 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ad64:	b480      	push	{r7}
 800ad66:	b085      	sub	sp, #20
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	3303      	adds	r3, #3
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	021b      	lsls	r3, r3, #8
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	3202      	adds	r2, #2
 800ad7c:	7812      	ldrb	r2, [r2, #0]
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	021b      	lsls	r3, r3, #8
 800ad86:	687a      	ldr	r2, [r7, #4]
 800ad88:	3201      	adds	r2, #1
 800ad8a:	7812      	ldrb	r2, [r2, #0]
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	021b      	lsls	r3, r3, #8
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	7812      	ldrb	r2, [r2, #0]
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	60fb      	str	r3, [r7, #12]
	return rv;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3714      	adds	r7, #20
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr

0800adaa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800adaa:	b480      	push	{r7}
 800adac:	b083      	sub	sp, #12
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
 800adb2:	460b      	mov	r3, r1
 800adb4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	1c5a      	adds	r2, r3, #1
 800adba:	607a      	str	r2, [r7, #4]
 800adbc:	887a      	ldrh	r2, [r7, #2]
 800adbe:	b2d2      	uxtb	r2, r2
 800adc0:	701a      	strb	r2, [r3, #0]
 800adc2:	887b      	ldrh	r3, [r7, #2]
 800adc4:	0a1b      	lsrs	r3, r3, #8
 800adc6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	1c5a      	adds	r2, r3, #1
 800adcc:	607a      	str	r2, [r7, #4]
 800adce:	887a      	ldrh	r2, [r7, #2]
 800add0:	b2d2      	uxtb	r2, r2
 800add2:	701a      	strb	r2, [r3, #0]
}
 800add4:	bf00      	nop
 800add6:	370c      	adds	r7, #12
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr

0800ade0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ade0:	b480      	push	{r7}
 800ade2:	b083      	sub	sp, #12
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	1c5a      	adds	r2, r3, #1
 800adee:	607a      	str	r2, [r7, #4]
 800adf0:	683a      	ldr	r2, [r7, #0]
 800adf2:	b2d2      	uxtb	r2, r2
 800adf4:	701a      	strb	r2, [r3, #0]
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	0a1b      	lsrs	r3, r3, #8
 800adfa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	1c5a      	adds	r2, r3, #1
 800ae00:	607a      	str	r2, [r7, #4]
 800ae02:	683a      	ldr	r2, [r7, #0]
 800ae04:	b2d2      	uxtb	r2, r2
 800ae06:	701a      	strb	r2, [r3, #0]
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	0a1b      	lsrs	r3, r3, #8
 800ae0c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	1c5a      	adds	r2, r3, #1
 800ae12:	607a      	str	r2, [r7, #4]
 800ae14:	683a      	ldr	r2, [r7, #0]
 800ae16:	b2d2      	uxtb	r2, r2
 800ae18:	701a      	strb	r2, [r3, #0]
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	0a1b      	lsrs	r3, r3, #8
 800ae1e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	1c5a      	adds	r2, r3, #1
 800ae24:	607a      	str	r2, [r7, #4]
 800ae26:	683a      	ldr	r2, [r7, #0]
 800ae28:	b2d2      	uxtb	r2, r2
 800ae2a:	701a      	strb	r2, [r3, #0]
}
 800ae2c:	bf00      	nop
 800ae2e:	370c      	adds	r7, #12
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr

0800ae38 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ae38:	b480      	push	{r7}
 800ae3a:	b087      	sub	sp, #28
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	60f8      	str	r0, [r7, #12]
 800ae40:	60b9      	str	r1, [r7, #8]
 800ae42:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d00d      	beq.n	800ae6e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ae52:	693a      	ldr	r2, [r7, #16]
 800ae54:	1c53      	adds	r3, r2, #1
 800ae56:	613b      	str	r3, [r7, #16]
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	1c59      	adds	r1, r3, #1
 800ae5c:	6179      	str	r1, [r7, #20]
 800ae5e:	7812      	ldrb	r2, [r2, #0]
 800ae60:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	3b01      	subs	r3, #1
 800ae66:	607b      	str	r3, [r7, #4]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d1f1      	bne.n	800ae52 <mem_cpy+0x1a>
	}
}
 800ae6e:	bf00      	nop
 800ae70:	371c      	adds	r7, #28
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr

0800ae7a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ae7a:	b480      	push	{r7}
 800ae7c:	b087      	sub	sp, #28
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	60f8      	str	r0, [r7, #12]
 800ae82:	60b9      	str	r1, [r7, #8]
 800ae84:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	1c5a      	adds	r2, r3, #1
 800ae8e:	617a      	str	r2, [r7, #20]
 800ae90:	68ba      	ldr	r2, [r7, #8]
 800ae92:	b2d2      	uxtb	r2, r2
 800ae94:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	3b01      	subs	r3, #1
 800ae9a:	607b      	str	r3, [r7, #4]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d1f3      	bne.n	800ae8a <mem_set+0x10>
}
 800aea2:	bf00      	nop
 800aea4:	bf00      	nop
 800aea6:	371c      	adds	r7, #28
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800aeb0:	b480      	push	{r7}
 800aeb2:	b089      	sub	sp, #36	; 0x24
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	61fb      	str	r3, [r7, #28]
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800aec4:	2300      	movs	r3, #0
 800aec6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800aec8:	69fb      	ldr	r3, [r7, #28]
 800aeca:	1c5a      	adds	r2, r3, #1
 800aecc:	61fa      	str	r2, [r7, #28]
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	4619      	mov	r1, r3
 800aed2:	69bb      	ldr	r3, [r7, #24]
 800aed4:	1c5a      	adds	r2, r3, #1
 800aed6:	61ba      	str	r2, [r7, #24]
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	1acb      	subs	r3, r1, r3
 800aedc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	3b01      	subs	r3, #1
 800aee2:	607b      	str	r3, [r7, #4]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d002      	beq.n	800aef0 <mem_cmp+0x40>
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d0eb      	beq.n	800aec8 <mem_cmp+0x18>

	return r;
 800aef0:	697b      	ldr	r3, [r7, #20]
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3724      	adds	r7, #36	; 0x24
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr

0800aefe <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800aefe:	b480      	push	{r7}
 800af00:	b083      	sub	sp, #12
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
 800af06:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800af08:	e002      	b.n	800af10 <chk_chr+0x12>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	3301      	adds	r3, #1
 800af0e:	607b      	str	r3, [r7, #4]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d005      	beq.n	800af24 <chk_chr+0x26>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	461a      	mov	r2, r3
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	4293      	cmp	r3, r2
 800af22:	d1f2      	bne.n	800af0a <chk_chr+0xc>
	return *str;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	781b      	ldrb	r3, [r3, #0]
}
 800af28:	4618      	mov	r0, r3
 800af2a:	370c      	adds	r7, #12
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr

0800af34 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800af34:	b480      	push	{r7}
 800af36:	b085      	sub	sp, #20
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800af3e:	2300      	movs	r3, #0
 800af40:	60bb      	str	r3, [r7, #8]
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	60fb      	str	r3, [r7, #12]
 800af46:	e029      	b.n	800af9c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800af48:	4a27      	ldr	r2, [pc, #156]	; (800afe8 <chk_lock+0xb4>)
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	011b      	lsls	r3, r3, #4
 800af4e:	4413      	add	r3, r2
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d01d      	beq.n	800af92 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800af56:	4a24      	ldr	r2, [pc, #144]	; (800afe8 <chk_lock+0xb4>)
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	011b      	lsls	r3, r3, #4
 800af5c:	4413      	add	r3, r2
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	429a      	cmp	r2, r3
 800af66:	d116      	bne.n	800af96 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800af68:	4a1f      	ldr	r2, [pc, #124]	; (800afe8 <chk_lock+0xb4>)
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	011b      	lsls	r3, r3, #4
 800af6e:	4413      	add	r3, r2
 800af70:	3304      	adds	r3, #4
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800af78:	429a      	cmp	r2, r3
 800af7a:	d10c      	bne.n	800af96 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800af7c:	4a1a      	ldr	r2, [pc, #104]	; (800afe8 <chk_lock+0xb4>)
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	011b      	lsls	r3, r3, #4
 800af82:	4413      	add	r3, r2
 800af84:	3308      	adds	r3, #8
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d102      	bne.n	800af96 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800af90:	e007      	b.n	800afa2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800af92:	2301      	movs	r3, #1
 800af94:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	3301      	adds	r3, #1
 800af9a:	60fb      	str	r3, [r7, #12]
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	d9d2      	bls.n	800af48 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	2b02      	cmp	r3, #2
 800afa6:	d109      	bne.n	800afbc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d102      	bne.n	800afb4 <chk_lock+0x80>
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	2b02      	cmp	r3, #2
 800afb2:	d101      	bne.n	800afb8 <chk_lock+0x84>
 800afb4:	2300      	movs	r3, #0
 800afb6:	e010      	b.n	800afda <chk_lock+0xa6>
 800afb8:	2312      	movs	r3, #18
 800afba:	e00e      	b.n	800afda <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d108      	bne.n	800afd4 <chk_lock+0xa0>
 800afc2:	4a09      	ldr	r2, [pc, #36]	; (800afe8 <chk_lock+0xb4>)
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	011b      	lsls	r3, r3, #4
 800afc8:	4413      	add	r3, r2
 800afca:	330c      	adds	r3, #12
 800afcc:	881b      	ldrh	r3, [r3, #0]
 800afce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afd2:	d101      	bne.n	800afd8 <chk_lock+0xa4>
 800afd4:	2310      	movs	r3, #16
 800afd6:	e000      	b.n	800afda <chk_lock+0xa6>
 800afd8:	2300      	movs	r3, #0
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3714      	adds	r7, #20
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr
 800afe6:	bf00      	nop
 800afe8:	2000168c 	.word	0x2000168c

0800afec <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800afec:	b480      	push	{r7}
 800afee:	b083      	sub	sp, #12
 800aff0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800aff2:	2300      	movs	r3, #0
 800aff4:	607b      	str	r3, [r7, #4]
 800aff6:	e002      	b.n	800affe <enq_lock+0x12>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	3301      	adds	r3, #1
 800affc:	607b      	str	r3, [r7, #4]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2b01      	cmp	r3, #1
 800b002:	d806      	bhi.n	800b012 <enq_lock+0x26>
 800b004:	4a09      	ldr	r2, [pc, #36]	; (800b02c <enq_lock+0x40>)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	011b      	lsls	r3, r3, #4
 800b00a:	4413      	add	r3, r2
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d1f2      	bne.n	800aff8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2b02      	cmp	r3, #2
 800b016:	bf14      	ite	ne
 800b018:	2301      	movne	r3, #1
 800b01a:	2300      	moveq	r3, #0
 800b01c:	b2db      	uxtb	r3, r3
}
 800b01e:	4618      	mov	r0, r3
 800b020:	370c      	adds	r7, #12
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr
 800b02a:	bf00      	nop
 800b02c:	2000168c 	.word	0x2000168c

0800b030 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b030:	b480      	push	{r7}
 800b032:	b085      	sub	sp, #20
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b03a:	2300      	movs	r3, #0
 800b03c:	60fb      	str	r3, [r7, #12]
 800b03e:	e01f      	b.n	800b080 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b040:	4a41      	ldr	r2, [pc, #260]	; (800b148 <inc_lock+0x118>)
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	011b      	lsls	r3, r3, #4
 800b046:	4413      	add	r3, r2
 800b048:	681a      	ldr	r2, [r3, #0]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d113      	bne.n	800b07a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b052:	4a3d      	ldr	r2, [pc, #244]	; (800b148 <inc_lock+0x118>)
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	011b      	lsls	r3, r3, #4
 800b058:	4413      	add	r3, r2
 800b05a:	3304      	adds	r3, #4
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b062:	429a      	cmp	r2, r3
 800b064:	d109      	bne.n	800b07a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b066:	4a38      	ldr	r2, [pc, #224]	; (800b148 <inc_lock+0x118>)
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	011b      	lsls	r3, r3, #4
 800b06c:	4413      	add	r3, r2
 800b06e:	3308      	adds	r3, #8
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b076:	429a      	cmp	r2, r3
 800b078:	d006      	beq.n	800b088 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	3301      	adds	r3, #1
 800b07e:	60fb      	str	r3, [r7, #12]
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2b01      	cmp	r3, #1
 800b084:	d9dc      	bls.n	800b040 <inc_lock+0x10>
 800b086:	e000      	b.n	800b08a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b088:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2b02      	cmp	r3, #2
 800b08e:	d132      	bne.n	800b0f6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b090:	2300      	movs	r3, #0
 800b092:	60fb      	str	r3, [r7, #12]
 800b094:	e002      	b.n	800b09c <inc_lock+0x6c>
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	3301      	adds	r3, #1
 800b09a:	60fb      	str	r3, [r7, #12]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d806      	bhi.n	800b0b0 <inc_lock+0x80>
 800b0a2:	4a29      	ldr	r2, [pc, #164]	; (800b148 <inc_lock+0x118>)
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	011b      	lsls	r3, r3, #4
 800b0a8:	4413      	add	r3, r2
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d1f2      	bne.n	800b096 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2b02      	cmp	r3, #2
 800b0b4:	d101      	bne.n	800b0ba <inc_lock+0x8a>
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	e040      	b.n	800b13c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681a      	ldr	r2, [r3, #0]
 800b0be:	4922      	ldr	r1, [pc, #136]	; (800b148 <inc_lock+0x118>)
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	011b      	lsls	r3, r3, #4
 800b0c4:	440b      	add	r3, r1
 800b0c6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	689a      	ldr	r2, [r3, #8]
 800b0cc:	491e      	ldr	r1, [pc, #120]	; (800b148 <inc_lock+0x118>)
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	011b      	lsls	r3, r3, #4
 800b0d2:	440b      	add	r3, r1
 800b0d4:	3304      	adds	r3, #4
 800b0d6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	695a      	ldr	r2, [r3, #20]
 800b0dc:	491a      	ldr	r1, [pc, #104]	; (800b148 <inc_lock+0x118>)
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	011b      	lsls	r3, r3, #4
 800b0e2:	440b      	add	r3, r1
 800b0e4:	3308      	adds	r3, #8
 800b0e6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b0e8:	4a17      	ldr	r2, [pc, #92]	; (800b148 <inc_lock+0x118>)
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	011b      	lsls	r3, r3, #4
 800b0ee:	4413      	add	r3, r2
 800b0f0:	330c      	adds	r3, #12
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d009      	beq.n	800b110 <inc_lock+0xe0>
 800b0fc:	4a12      	ldr	r2, [pc, #72]	; (800b148 <inc_lock+0x118>)
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	011b      	lsls	r3, r3, #4
 800b102:	4413      	add	r3, r2
 800b104:	330c      	adds	r3, #12
 800b106:	881b      	ldrh	r3, [r3, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d001      	beq.n	800b110 <inc_lock+0xe0>
 800b10c:	2300      	movs	r3, #0
 800b10e:	e015      	b.n	800b13c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d108      	bne.n	800b128 <inc_lock+0xf8>
 800b116:	4a0c      	ldr	r2, [pc, #48]	; (800b148 <inc_lock+0x118>)
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	011b      	lsls	r3, r3, #4
 800b11c:	4413      	add	r3, r2
 800b11e:	330c      	adds	r3, #12
 800b120:	881b      	ldrh	r3, [r3, #0]
 800b122:	3301      	adds	r3, #1
 800b124:	b29a      	uxth	r2, r3
 800b126:	e001      	b.n	800b12c <inc_lock+0xfc>
 800b128:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b12c:	4906      	ldr	r1, [pc, #24]	; (800b148 <inc_lock+0x118>)
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	011b      	lsls	r3, r3, #4
 800b132:	440b      	add	r3, r1
 800b134:	330c      	adds	r3, #12
 800b136:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	3301      	adds	r3, #1
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3714      	adds	r7, #20
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr
 800b148:	2000168c 	.word	0x2000168c

0800b14c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b085      	sub	sp, #20
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	3b01      	subs	r3, #1
 800b158:	607b      	str	r3, [r7, #4]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d825      	bhi.n	800b1ac <dec_lock+0x60>
		n = Files[i].ctr;
 800b160:	4a17      	ldr	r2, [pc, #92]	; (800b1c0 <dec_lock+0x74>)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	011b      	lsls	r3, r3, #4
 800b166:	4413      	add	r3, r2
 800b168:	330c      	adds	r3, #12
 800b16a:	881b      	ldrh	r3, [r3, #0]
 800b16c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b16e:	89fb      	ldrh	r3, [r7, #14]
 800b170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b174:	d101      	bne.n	800b17a <dec_lock+0x2e>
 800b176:	2300      	movs	r3, #0
 800b178:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b17a:	89fb      	ldrh	r3, [r7, #14]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d002      	beq.n	800b186 <dec_lock+0x3a>
 800b180:	89fb      	ldrh	r3, [r7, #14]
 800b182:	3b01      	subs	r3, #1
 800b184:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b186:	4a0e      	ldr	r2, [pc, #56]	; (800b1c0 <dec_lock+0x74>)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	011b      	lsls	r3, r3, #4
 800b18c:	4413      	add	r3, r2
 800b18e:	330c      	adds	r3, #12
 800b190:	89fa      	ldrh	r2, [r7, #14]
 800b192:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b194:	89fb      	ldrh	r3, [r7, #14]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d105      	bne.n	800b1a6 <dec_lock+0x5a>
 800b19a:	4a09      	ldr	r2, [pc, #36]	; (800b1c0 <dec_lock+0x74>)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	011b      	lsls	r3, r3, #4
 800b1a0:	4413      	add	r3, r2
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	737b      	strb	r3, [r7, #13]
 800b1aa:	e001      	b.n	800b1b0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b1ac:	2302      	movs	r3, #2
 800b1ae:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b1b0:	7b7b      	ldrb	r3, [r7, #13]
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3714      	adds	r7, #20
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1bc:	4770      	bx	lr
 800b1be:	bf00      	nop
 800b1c0:	2000168c 	.word	0x2000168c

0800b1c4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b085      	sub	sp, #20
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	60fb      	str	r3, [r7, #12]
 800b1d0:	e010      	b.n	800b1f4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b1d2:	4a0d      	ldr	r2, [pc, #52]	; (800b208 <clear_lock+0x44>)
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	011b      	lsls	r3, r3, #4
 800b1d8:	4413      	add	r3, r2
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	687a      	ldr	r2, [r7, #4]
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d105      	bne.n	800b1ee <clear_lock+0x2a>
 800b1e2:	4a09      	ldr	r2, [pc, #36]	; (800b208 <clear_lock+0x44>)
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	011b      	lsls	r3, r3, #4
 800b1e8:	4413      	add	r3, r2
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	60fb      	str	r3, [r7, #12]
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2b01      	cmp	r3, #1
 800b1f8:	d9eb      	bls.n	800b1d2 <clear_lock+0xe>
	}
}
 800b1fa:	bf00      	nop
 800b1fc:	bf00      	nop
 800b1fe:	3714      	adds	r7, #20
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr
 800b208:	2000168c 	.word	0x2000168c

0800b20c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b086      	sub	sp, #24
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b214:	2300      	movs	r3, #0
 800b216:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	78db      	ldrb	r3, [r3, #3]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d034      	beq.n	800b28a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b224:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	7858      	ldrb	r0, [r3, #1]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b230:	2301      	movs	r3, #1
 800b232:	697a      	ldr	r2, [r7, #20]
 800b234:	f7ff fd40 	bl	800acb8 <disk_write>
 800b238:	4603      	mov	r3, r0
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d002      	beq.n	800b244 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b23e:	2301      	movs	r3, #1
 800b240:	73fb      	strb	r3, [r7, #15]
 800b242:	e022      	b.n	800b28a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6a1b      	ldr	r3, [r3, #32]
 800b24e:	697a      	ldr	r2, [r7, #20]
 800b250:	1ad2      	subs	r2, r2, r3
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	699b      	ldr	r3, [r3, #24]
 800b256:	429a      	cmp	r2, r3
 800b258:	d217      	bcs.n	800b28a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	789b      	ldrb	r3, [r3, #2]
 800b25e:	613b      	str	r3, [r7, #16]
 800b260:	e010      	b.n	800b284 <sync_window+0x78>
					wsect += fs->fsize;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	699b      	ldr	r3, [r3, #24]
 800b266:	697a      	ldr	r2, [r7, #20]
 800b268:	4413      	add	r3, r2
 800b26a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	7858      	ldrb	r0, [r3, #1]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b276:	2301      	movs	r3, #1
 800b278:	697a      	ldr	r2, [r7, #20]
 800b27a:	f7ff fd1d 	bl	800acb8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	3b01      	subs	r3, #1
 800b282:	613b      	str	r3, [r7, #16]
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	2b01      	cmp	r3, #1
 800b288:	d8eb      	bhi.n	800b262 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b28a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3718      	adds	r7, #24
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a6:	683a      	ldr	r2, [r7, #0]
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d01b      	beq.n	800b2e4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f7ff ffad 	bl	800b20c <sync_window>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b2b6:	7bfb      	ldrb	r3, [r7, #15]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d113      	bne.n	800b2e4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	7858      	ldrb	r0, [r3, #1]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	683a      	ldr	r2, [r7, #0]
 800b2ca:	f7ff fcd5 	bl	800ac78 <disk_read>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d004      	beq.n	800b2de <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b2d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2d8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b2da:	2301      	movs	r3, #1
 800b2dc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	683a      	ldr	r2, [r7, #0]
 800b2e2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800b2e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
	...

0800b2f0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b084      	sub	sp, #16
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f7ff ff87 	bl	800b20c <sync_window>
 800b2fe:	4603      	mov	r3, r0
 800b300:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b302:	7bfb      	ldrb	r3, [r7, #15]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d158      	bne.n	800b3ba <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	2b03      	cmp	r3, #3
 800b30e:	d148      	bne.n	800b3a2 <sync_fs+0xb2>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	791b      	ldrb	r3, [r3, #4]
 800b314:	2b01      	cmp	r3, #1
 800b316:	d144      	bne.n	800b3a2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	3330      	adds	r3, #48	; 0x30
 800b31c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b320:	2100      	movs	r1, #0
 800b322:	4618      	mov	r0, r3
 800b324:	f7ff fda9 	bl	800ae7a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	3330      	adds	r3, #48	; 0x30
 800b32c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b330:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b334:	4618      	mov	r0, r3
 800b336:	f7ff fd38 	bl	800adaa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	3330      	adds	r3, #48	; 0x30
 800b33e:	4921      	ldr	r1, [pc, #132]	; (800b3c4 <sync_fs+0xd4>)
 800b340:	4618      	mov	r0, r3
 800b342:	f7ff fd4d 	bl	800ade0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	3330      	adds	r3, #48	; 0x30
 800b34a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b34e:	491e      	ldr	r1, [pc, #120]	; (800b3c8 <sync_fs+0xd8>)
 800b350:	4618      	mov	r0, r3
 800b352:	f7ff fd45 	bl	800ade0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	3330      	adds	r3, #48	; 0x30
 800b35a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	691b      	ldr	r3, [r3, #16]
 800b362:	4619      	mov	r1, r3
 800b364:	4610      	mov	r0, r2
 800b366:	f7ff fd3b 	bl	800ade0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	3330      	adds	r3, #48	; 0x30
 800b36e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	68db      	ldr	r3, [r3, #12]
 800b376:	4619      	mov	r1, r3
 800b378:	4610      	mov	r0, r2
 800b37a:	f7ff fd31 	bl	800ade0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	69db      	ldr	r3, [r3, #28]
 800b382:	1c5a      	adds	r2, r3, #1
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	7858      	ldrb	r0, [r3, #1]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b396:	2301      	movs	r3, #1
 800b398:	f7ff fc8e 	bl	800acb8 <disk_write>
			fs->fsi_flag = 0;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	785b      	ldrb	r3, [r3, #1]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	2100      	movs	r1, #0
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7ff fca4 	bl	800acf8 <disk_ioctl>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d001      	beq.n	800b3ba <sync_fs+0xca>
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b3ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3710      	adds	r7, #16
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}
 800b3c4:	41615252 	.word	0x41615252
 800b3c8:	61417272 	.word	0x61417272

0800b3cc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b083      	sub	sp, #12
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	3b02      	subs	r3, #2
 800b3da:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	695b      	ldr	r3, [r3, #20]
 800b3e0:	3b02      	subs	r3, #2
 800b3e2:	683a      	ldr	r2, [r7, #0]
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d301      	bcc.n	800b3ec <clust2sect+0x20>
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	e008      	b.n	800b3fe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	895b      	ldrh	r3, [r3, #10]
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	fb03 f202 	mul.w	r2, r3, r2
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3fc:	4413      	add	r3, r2
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	370c      	adds	r7, #12
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr

0800b40a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b40a:	b580      	push	{r7, lr}
 800b40c:	b086      	sub	sp, #24
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]
 800b412:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d904      	bls.n	800b42a <get_fat+0x20>
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	695b      	ldr	r3, [r3, #20]
 800b424:	683a      	ldr	r2, [r7, #0]
 800b426:	429a      	cmp	r2, r3
 800b428:	d302      	bcc.n	800b430 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b42a:	2301      	movs	r3, #1
 800b42c:	617b      	str	r3, [r7, #20]
 800b42e:	e08f      	b.n	800b550 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b434:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	2b03      	cmp	r3, #3
 800b43c:	d062      	beq.n	800b504 <get_fat+0xfa>
 800b43e:	2b03      	cmp	r3, #3
 800b440:	dc7c      	bgt.n	800b53c <get_fat+0x132>
 800b442:	2b01      	cmp	r3, #1
 800b444:	d002      	beq.n	800b44c <get_fat+0x42>
 800b446:	2b02      	cmp	r3, #2
 800b448:	d042      	beq.n	800b4d0 <get_fat+0xc6>
 800b44a:	e077      	b.n	800b53c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	60fb      	str	r3, [r7, #12]
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	085b      	lsrs	r3, r3, #1
 800b454:	68fa      	ldr	r2, [r7, #12]
 800b456:	4413      	add	r3, r2
 800b458:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	6a1a      	ldr	r2, [r3, #32]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	0a5b      	lsrs	r3, r3, #9
 800b462:	4413      	add	r3, r2
 800b464:	4619      	mov	r1, r3
 800b466:	6938      	ldr	r0, [r7, #16]
 800b468:	f7ff ff14 	bl	800b294 <move_window>
 800b46c:	4603      	mov	r3, r0
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d167      	bne.n	800b542 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	1c5a      	adds	r2, r3, #1
 800b476:	60fa      	str	r2, [r7, #12]
 800b478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b47c:	693a      	ldr	r2, [r7, #16]
 800b47e:	4413      	add	r3, r2
 800b480:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b484:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	6a1a      	ldr	r2, [r3, #32]
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	0a5b      	lsrs	r3, r3, #9
 800b48e:	4413      	add	r3, r2
 800b490:	4619      	mov	r1, r3
 800b492:	6938      	ldr	r0, [r7, #16]
 800b494:	f7ff fefe 	bl	800b294 <move_window>
 800b498:	4603      	mov	r3, r0
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d153      	bne.n	800b546 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4a4:	693a      	ldr	r2, [r7, #16]
 800b4a6:	4413      	add	r3, r2
 800b4a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b4ac:	021b      	lsls	r3, r3, #8
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	f003 0301 	and.w	r3, r3, #1
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d002      	beq.n	800b4c6 <get_fat+0xbc>
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	091b      	lsrs	r3, r3, #4
 800b4c4:	e002      	b.n	800b4cc <get_fat+0xc2>
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b4cc:	617b      	str	r3, [r7, #20]
			break;
 800b4ce:	e03f      	b.n	800b550 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	6a1a      	ldr	r2, [r3, #32]
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	0a1b      	lsrs	r3, r3, #8
 800b4d8:	4413      	add	r3, r2
 800b4da:	4619      	mov	r1, r3
 800b4dc:	6938      	ldr	r0, [r7, #16]
 800b4de:	f7ff fed9 	bl	800b294 <move_window>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d130      	bne.n	800b54a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	005b      	lsls	r3, r3, #1
 800b4f2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b4f6:	4413      	add	r3, r2
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7ff fc1b 	bl	800ad34 <ld_word>
 800b4fe:	4603      	mov	r3, r0
 800b500:	617b      	str	r3, [r7, #20]
			break;
 800b502:	e025      	b.n	800b550 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	6a1a      	ldr	r2, [r3, #32]
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	09db      	lsrs	r3, r3, #7
 800b50c:	4413      	add	r3, r2
 800b50e:	4619      	mov	r1, r3
 800b510:	6938      	ldr	r0, [r7, #16]
 800b512:	f7ff febf 	bl	800b294 <move_window>
 800b516:	4603      	mov	r3, r0
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d118      	bne.n	800b54e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	009b      	lsls	r3, r3, #2
 800b526:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b52a:	4413      	add	r3, r2
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7ff fc19 	bl	800ad64 <ld_dword>
 800b532:	4603      	mov	r3, r0
 800b534:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b538:	617b      	str	r3, [r7, #20]
			break;
 800b53a:	e009      	b.n	800b550 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b53c:	2301      	movs	r3, #1
 800b53e:	617b      	str	r3, [r7, #20]
 800b540:	e006      	b.n	800b550 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b542:	bf00      	nop
 800b544:	e004      	b.n	800b550 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b546:	bf00      	nop
 800b548:	e002      	b.n	800b550 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b54a:	bf00      	nop
 800b54c:	e000      	b.n	800b550 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b54e:	bf00      	nop
		}
	}

	return val;
 800b550:	697b      	ldr	r3, [r7, #20]
}
 800b552:	4618      	mov	r0, r3
 800b554:	3718      	adds	r7, #24
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}

0800b55a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b55a:	b590      	push	{r4, r7, lr}
 800b55c:	b089      	sub	sp, #36	; 0x24
 800b55e:	af00      	add	r7, sp, #0
 800b560:	60f8      	str	r0, [r7, #12]
 800b562:	60b9      	str	r1, [r7, #8]
 800b564:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b566:	2302      	movs	r3, #2
 800b568:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	f240 80d2 	bls.w	800b716 <put_fat+0x1bc>
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	695b      	ldr	r3, [r3, #20]
 800b576:	68ba      	ldr	r2, [r7, #8]
 800b578:	429a      	cmp	r2, r3
 800b57a:	f080 80cc 	bcs.w	800b716 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	2b03      	cmp	r3, #3
 800b584:	f000 8096 	beq.w	800b6b4 <put_fat+0x15a>
 800b588:	2b03      	cmp	r3, #3
 800b58a:	f300 80cd 	bgt.w	800b728 <put_fat+0x1ce>
 800b58e:	2b01      	cmp	r3, #1
 800b590:	d002      	beq.n	800b598 <put_fat+0x3e>
 800b592:	2b02      	cmp	r3, #2
 800b594:	d06e      	beq.n	800b674 <put_fat+0x11a>
 800b596:	e0c7      	b.n	800b728 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	61bb      	str	r3, [r7, #24]
 800b59c:	69bb      	ldr	r3, [r7, #24]
 800b59e:	085b      	lsrs	r3, r3, #1
 800b5a0:	69ba      	ldr	r2, [r7, #24]
 800b5a2:	4413      	add	r3, r2
 800b5a4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	6a1a      	ldr	r2, [r3, #32]
 800b5aa:	69bb      	ldr	r3, [r7, #24]
 800b5ac:	0a5b      	lsrs	r3, r3, #9
 800b5ae:	4413      	add	r3, r2
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	68f8      	ldr	r0, [r7, #12]
 800b5b4:	f7ff fe6e 	bl	800b294 <move_window>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b5bc:	7ffb      	ldrb	r3, [r7, #31]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	f040 80ab 	bne.w	800b71a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b5ca:	69bb      	ldr	r3, [r7, #24]
 800b5cc:	1c59      	adds	r1, r3, #1
 800b5ce:	61b9      	str	r1, [r7, #24]
 800b5d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5d4:	4413      	add	r3, r2
 800b5d6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	f003 0301 	and.w	r3, r3, #1
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d00d      	beq.n	800b5fe <put_fat+0xa4>
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	b25b      	sxtb	r3, r3
 800b5e8:	f003 030f 	and.w	r3, r3, #15
 800b5ec:	b25a      	sxtb	r2, r3
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	011b      	lsls	r3, r3, #4
 800b5f4:	b25b      	sxtb	r3, r3
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	b25b      	sxtb	r3, r3
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	e001      	b.n	800b602 <put_fat+0xa8>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	b2db      	uxtb	r3, r3
 800b602:	697a      	ldr	r2, [r7, #20]
 800b604:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2201      	movs	r2, #1
 800b60a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	6a1a      	ldr	r2, [r3, #32]
 800b610:	69bb      	ldr	r3, [r7, #24]
 800b612:	0a5b      	lsrs	r3, r3, #9
 800b614:	4413      	add	r3, r2
 800b616:	4619      	mov	r1, r3
 800b618:	68f8      	ldr	r0, [r7, #12]
 800b61a:	f7ff fe3b 	bl	800b294 <move_window>
 800b61e:	4603      	mov	r3, r0
 800b620:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b622:	7ffb      	ldrb	r3, [r7, #31]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d17a      	bne.n	800b71e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b62e:	69bb      	ldr	r3, [r7, #24]
 800b630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b634:	4413      	add	r3, r2
 800b636:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	f003 0301 	and.w	r3, r3, #1
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d003      	beq.n	800b64a <put_fat+0xf0>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	091b      	lsrs	r3, r3, #4
 800b646:	b2db      	uxtb	r3, r3
 800b648:	e00e      	b.n	800b668 <put_fat+0x10e>
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	b25b      	sxtb	r3, r3
 800b650:	f023 030f 	bic.w	r3, r3, #15
 800b654:	b25a      	sxtb	r2, r3
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	0a1b      	lsrs	r3, r3, #8
 800b65a:	b25b      	sxtb	r3, r3
 800b65c:	f003 030f 	and.w	r3, r3, #15
 800b660:	b25b      	sxtb	r3, r3
 800b662:	4313      	orrs	r3, r2
 800b664:	b25b      	sxtb	r3, r3
 800b666:	b2db      	uxtb	r3, r3
 800b668:	697a      	ldr	r2, [r7, #20]
 800b66a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2201      	movs	r2, #1
 800b670:	70da      	strb	r2, [r3, #3]
			break;
 800b672:	e059      	b.n	800b728 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	6a1a      	ldr	r2, [r3, #32]
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	0a1b      	lsrs	r3, r3, #8
 800b67c:	4413      	add	r3, r2
 800b67e:	4619      	mov	r1, r3
 800b680:	68f8      	ldr	r0, [r7, #12]
 800b682:	f7ff fe07 	bl	800b294 <move_window>
 800b686:	4603      	mov	r3, r0
 800b688:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b68a:	7ffb      	ldrb	r3, [r7, #31]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d148      	bne.n	800b722 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	005b      	lsls	r3, r3, #1
 800b69a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b69e:	4413      	add	r3, r2
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	b292      	uxth	r2, r2
 800b6a4:	4611      	mov	r1, r2
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f7ff fb7f 	bl	800adaa <st_word>
			fs->wflag = 1;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	70da      	strb	r2, [r3, #3]
			break;
 800b6b2:	e039      	b.n	800b728 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	6a1a      	ldr	r2, [r3, #32]
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	09db      	lsrs	r3, r3, #7
 800b6bc:	4413      	add	r3, r2
 800b6be:	4619      	mov	r1, r3
 800b6c0:	68f8      	ldr	r0, [r7, #12]
 800b6c2:	f7ff fde7 	bl	800b294 <move_window>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b6ca:	7ffb      	ldrb	r3, [r7, #31]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d12a      	bne.n	800b726 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	009b      	lsls	r3, r3, #2
 800b6e0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b6e4:	4413      	add	r3, r2
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f7ff fb3c 	bl	800ad64 <ld_dword>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b6f2:	4323      	orrs	r3, r4
 800b6f4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b704:	4413      	add	r3, r2
 800b706:	6879      	ldr	r1, [r7, #4]
 800b708:	4618      	mov	r0, r3
 800b70a:	f7ff fb69 	bl	800ade0 <st_dword>
			fs->wflag = 1;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	2201      	movs	r2, #1
 800b712:	70da      	strb	r2, [r3, #3]
			break;
 800b714:	e008      	b.n	800b728 <put_fat+0x1ce>
		}
	}
 800b716:	bf00      	nop
 800b718:	e006      	b.n	800b728 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b71a:	bf00      	nop
 800b71c:	e004      	b.n	800b728 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b71e:	bf00      	nop
 800b720:	e002      	b.n	800b728 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b722:	bf00      	nop
 800b724:	e000      	b.n	800b728 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b726:	bf00      	nop
	return res;
 800b728:	7ffb      	ldrb	r3, [r7, #31]
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3724      	adds	r7, #36	; 0x24
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd90      	pop	{r4, r7, pc}

0800b732 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b732:	b580      	push	{r7, lr}
 800b734:	b088      	sub	sp, #32
 800b736:	af00      	add	r7, sp, #0
 800b738:	60f8      	str	r0, [r7, #12]
 800b73a:	60b9      	str	r1, [r7, #8]
 800b73c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b73e:	2300      	movs	r3, #0
 800b740:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	2b01      	cmp	r3, #1
 800b74c:	d904      	bls.n	800b758 <remove_chain+0x26>
 800b74e:	69bb      	ldr	r3, [r7, #24]
 800b750:	695b      	ldr	r3, [r3, #20]
 800b752:	68ba      	ldr	r2, [r7, #8]
 800b754:	429a      	cmp	r2, r3
 800b756:	d301      	bcc.n	800b75c <remove_chain+0x2a>
 800b758:	2302      	movs	r3, #2
 800b75a:	e04b      	b.n	800b7f4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d00c      	beq.n	800b77c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b762:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b766:	6879      	ldr	r1, [r7, #4]
 800b768:	69b8      	ldr	r0, [r7, #24]
 800b76a:	f7ff fef6 	bl	800b55a <put_fat>
 800b76e:	4603      	mov	r3, r0
 800b770:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b772:	7ffb      	ldrb	r3, [r7, #31]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d001      	beq.n	800b77c <remove_chain+0x4a>
 800b778:	7ffb      	ldrb	r3, [r7, #31]
 800b77a:	e03b      	b.n	800b7f4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b77c:	68b9      	ldr	r1, [r7, #8]
 800b77e:	68f8      	ldr	r0, [r7, #12]
 800b780:	f7ff fe43 	bl	800b40a <get_fat>
 800b784:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d031      	beq.n	800b7f0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	2b01      	cmp	r3, #1
 800b790:	d101      	bne.n	800b796 <remove_chain+0x64>
 800b792:	2302      	movs	r3, #2
 800b794:	e02e      	b.n	800b7f4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b79c:	d101      	bne.n	800b7a2 <remove_chain+0x70>
 800b79e:	2301      	movs	r3, #1
 800b7a0:	e028      	b.n	800b7f4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	68b9      	ldr	r1, [r7, #8]
 800b7a6:	69b8      	ldr	r0, [r7, #24]
 800b7a8:	f7ff fed7 	bl	800b55a <put_fat>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b7b0:	7ffb      	ldrb	r3, [r7, #31]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d001      	beq.n	800b7ba <remove_chain+0x88>
 800b7b6:	7ffb      	ldrb	r3, [r7, #31]
 800b7b8:	e01c      	b.n	800b7f4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b7ba:	69bb      	ldr	r3, [r7, #24]
 800b7bc:	691a      	ldr	r2, [r3, #16]
 800b7be:	69bb      	ldr	r3, [r7, #24]
 800b7c0:	695b      	ldr	r3, [r3, #20]
 800b7c2:	3b02      	subs	r3, #2
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d20b      	bcs.n	800b7e0 <remove_chain+0xae>
			fs->free_clst++;
 800b7c8:	69bb      	ldr	r3, [r7, #24]
 800b7ca:	691b      	ldr	r3, [r3, #16]
 800b7cc:	1c5a      	adds	r2, r3, #1
 800b7ce:	69bb      	ldr	r3, [r7, #24]
 800b7d0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800b7d2:	69bb      	ldr	r3, [r7, #24]
 800b7d4:	791b      	ldrb	r3, [r3, #4]
 800b7d6:	f043 0301 	orr.w	r3, r3, #1
 800b7da:	b2da      	uxtb	r2, r3
 800b7dc:	69bb      	ldr	r3, [r7, #24]
 800b7de:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b7e4:	69bb      	ldr	r3, [r7, #24]
 800b7e6:	695b      	ldr	r3, [r3, #20]
 800b7e8:	68ba      	ldr	r2, [r7, #8]
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d3c6      	bcc.n	800b77c <remove_chain+0x4a>
 800b7ee:	e000      	b.n	800b7f2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b7f0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b7f2:	2300      	movs	r3, #0
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3720      	adds	r7, #32
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b088      	sub	sp, #32
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d10d      	bne.n	800b82e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	68db      	ldr	r3, [r3, #12]
 800b816:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b818:	69bb      	ldr	r3, [r7, #24]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d004      	beq.n	800b828 <create_chain+0x2c>
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	695b      	ldr	r3, [r3, #20]
 800b822:	69ba      	ldr	r2, [r7, #24]
 800b824:	429a      	cmp	r2, r3
 800b826:	d31b      	bcc.n	800b860 <create_chain+0x64>
 800b828:	2301      	movs	r3, #1
 800b82a:	61bb      	str	r3, [r7, #24]
 800b82c:	e018      	b.n	800b860 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b82e:	6839      	ldr	r1, [r7, #0]
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f7ff fdea 	bl	800b40a <get_fat>
 800b836:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	d801      	bhi.n	800b842 <create_chain+0x46>
 800b83e:	2301      	movs	r3, #1
 800b840:	e070      	b.n	800b924 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b848:	d101      	bne.n	800b84e <create_chain+0x52>
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	e06a      	b.n	800b924 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	695b      	ldr	r3, [r3, #20]
 800b852:	68fa      	ldr	r2, [r7, #12]
 800b854:	429a      	cmp	r2, r3
 800b856:	d201      	bcs.n	800b85c <create_chain+0x60>
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	e063      	b.n	800b924 <create_chain+0x128>
		scl = clst;
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b860:	69bb      	ldr	r3, [r7, #24]
 800b862:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b864:	69fb      	ldr	r3, [r7, #28]
 800b866:	3301      	adds	r3, #1
 800b868:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	695b      	ldr	r3, [r3, #20]
 800b86e:	69fa      	ldr	r2, [r7, #28]
 800b870:	429a      	cmp	r2, r3
 800b872:	d307      	bcc.n	800b884 <create_chain+0x88>
				ncl = 2;
 800b874:	2302      	movs	r3, #2
 800b876:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b878:	69fa      	ldr	r2, [r7, #28]
 800b87a:	69bb      	ldr	r3, [r7, #24]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d901      	bls.n	800b884 <create_chain+0x88>
 800b880:	2300      	movs	r3, #0
 800b882:	e04f      	b.n	800b924 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b884:	69f9      	ldr	r1, [r7, #28]
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f7ff fdbf 	bl	800b40a <get_fat>
 800b88c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d00e      	beq.n	800b8b2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2b01      	cmp	r3, #1
 800b898:	d003      	beq.n	800b8a2 <create_chain+0xa6>
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8a0:	d101      	bne.n	800b8a6 <create_chain+0xaa>
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	e03e      	b.n	800b924 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b8a6:	69fa      	ldr	r2, [r7, #28]
 800b8a8:	69bb      	ldr	r3, [r7, #24]
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	d1da      	bne.n	800b864 <create_chain+0x68>
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	e038      	b.n	800b924 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b8b2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b8b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b8b8:	69f9      	ldr	r1, [r7, #28]
 800b8ba:	6938      	ldr	r0, [r7, #16]
 800b8bc:	f7ff fe4d 	bl	800b55a <put_fat>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b8c4:	7dfb      	ldrb	r3, [r7, #23]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d109      	bne.n	800b8de <create_chain+0xe2>
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d006      	beq.n	800b8de <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b8d0:	69fa      	ldr	r2, [r7, #28]
 800b8d2:	6839      	ldr	r1, [r7, #0]
 800b8d4:	6938      	ldr	r0, [r7, #16]
 800b8d6:	f7ff fe40 	bl	800b55a <put_fat>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b8de:	7dfb      	ldrb	r3, [r7, #23]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d116      	bne.n	800b912 <create_chain+0x116>
		fs->last_clst = ncl;
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	69fa      	ldr	r2, [r7, #28]
 800b8e8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	691a      	ldr	r2, [r3, #16]
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	695b      	ldr	r3, [r3, #20]
 800b8f2:	3b02      	subs	r3, #2
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d804      	bhi.n	800b902 <create_chain+0x106>
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	691b      	ldr	r3, [r3, #16]
 800b8fc:	1e5a      	subs	r2, r3, #1
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	791b      	ldrb	r3, [r3, #4]
 800b906:	f043 0301 	orr.w	r3, r3, #1
 800b90a:	b2da      	uxtb	r2, r3
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	711a      	strb	r2, [r3, #4]
 800b910:	e007      	b.n	800b922 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b912:	7dfb      	ldrb	r3, [r7, #23]
 800b914:	2b01      	cmp	r3, #1
 800b916:	d102      	bne.n	800b91e <create_chain+0x122>
 800b918:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b91c:	e000      	b.n	800b920 <create_chain+0x124>
 800b91e:	2301      	movs	r3, #1
 800b920:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b922:	69fb      	ldr	r3, [r7, #28]
}
 800b924:	4618      	mov	r0, r3
 800b926:	3720      	adds	r7, #32
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}

0800b92c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b087      	sub	sp, #28
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b940:	3304      	adds	r3, #4
 800b942:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	0a5b      	lsrs	r3, r3, #9
 800b948:	68fa      	ldr	r2, [r7, #12]
 800b94a:	8952      	ldrh	r2, [r2, #10]
 800b94c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b950:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	1d1a      	adds	r2, r3, #4
 800b956:	613a      	str	r2, [r7, #16]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d101      	bne.n	800b966 <clmt_clust+0x3a>
 800b962:	2300      	movs	r3, #0
 800b964:	e010      	b.n	800b988 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b966:	697a      	ldr	r2, [r7, #20]
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d307      	bcc.n	800b97e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b96e:	697a      	ldr	r2, [r7, #20]
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	1ad3      	subs	r3, r2, r3
 800b974:	617b      	str	r3, [r7, #20]
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	3304      	adds	r3, #4
 800b97a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b97c:	e7e9      	b.n	800b952 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b97e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	681a      	ldr	r2, [r3, #0]
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	4413      	add	r3, r2
}
 800b988:	4618      	mov	r0, r3
 800b98a:	371c      	adds	r7, #28
 800b98c:	46bd      	mov	sp, r7
 800b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b992:	4770      	bx	lr

0800b994 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b086      	sub	sp, #24
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
 800b99c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9aa:	d204      	bcs.n	800b9b6 <dir_sdi+0x22>
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	f003 031f 	and.w	r3, r3, #31
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d001      	beq.n	800b9ba <dir_sdi+0x26>
		return FR_INT_ERR;
 800b9b6:	2302      	movs	r3, #2
 800b9b8:	e063      	b.n	800ba82 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	683a      	ldr	r2, [r7, #0]
 800b9be:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	689b      	ldr	r3, [r3, #8]
 800b9c4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d106      	bne.n	800b9da <dir_sdi+0x46>
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	2b02      	cmp	r3, #2
 800b9d2:	d902      	bls.n	800b9da <dir_sdi+0x46>
		clst = fs->dirbase;
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d10c      	bne.n	800b9fa <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	095b      	lsrs	r3, r3, #5
 800b9e4:	693a      	ldr	r2, [r7, #16]
 800b9e6:	8912      	ldrh	r2, [r2, #8]
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d301      	bcc.n	800b9f0 <dir_sdi+0x5c>
 800b9ec:	2302      	movs	r3, #2
 800b9ee:	e048      	b.n	800ba82 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	61da      	str	r2, [r3, #28]
 800b9f8:	e029      	b.n	800ba4e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	895b      	ldrh	r3, [r3, #10]
 800b9fe:	025b      	lsls	r3, r3, #9
 800ba00:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ba02:	e019      	b.n	800ba38 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6979      	ldr	r1, [r7, #20]
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7ff fcfe 	bl	800b40a <get_fat>
 800ba0e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba16:	d101      	bne.n	800ba1c <dir_sdi+0x88>
 800ba18:	2301      	movs	r3, #1
 800ba1a:	e032      	b.n	800ba82 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	2b01      	cmp	r3, #1
 800ba20:	d904      	bls.n	800ba2c <dir_sdi+0x98>
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	695b      	ldr	r3, [r3, #20]
 800ba26:	697a      	ldr	r2, [r7, #20]
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d301      	bcc.n	800ba30 <dir_sdi+0x9c>
 800ba2c:	2302      	movs	r3, #2
 800ba2e:	e028      	b.n	800ba82 <dir_sdi+0xee>
			ofs -= csz;
 800ba30:	683a      	ldr	r2, [r7, #0]
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	1ad3      	subs	r3, r2, r3
 800ba36:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ba38:	683a      	ldr	r2, [r7, #0]
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d2e1      	bcs.n	800ba04 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ba40:	6979      	ldr	r1, [r7, #20]
 800ba42:	6938      	ldr	r0, [r7, #16]
 800ba44:	f7ff fcc2 	bl	800b3cc <clust2sect>
 800ba48:	4602      	mov	r2, r0
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	697a      	ldr	r2, [r7, #20]
 800ba52:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	69db      	ldr	r3, [r3, #28]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d101      	bne.n	800ba60 <dir_sdi+0xcc>
 800ba5c:	2302      	movs	r3, #2
 800ba5e:	e010      	b.n	800ba82 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	69da      	ldr	r2, [r3, #28]
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	0a5b      	lsrs	r3, r3, #9
 800ba68:	441a      	add	r2, r3
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba7a:	441a      	add	r2, r3
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ba80:	2300      	movs	r3, #0
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3718      	adds	r7, #24
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ba8a:	b580      	push	{r7, lr}
 800ba8c:	b086      	sub	sp, #24
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	6078      	str	r0, [r7, #4]
 800ba92:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	695b      	ldr	r3, [r3, #20]
 800ba9e:	3320      	adds	r3, #32
 800baa0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	69db      	ldr	r3, [r3, #28]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d003      	beq.n	800bab2 <dir_next+0x28>
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bab0:	d301      	bcc.n	800bab6 <dir_next+0x2c>
 800bab2:	2304      	movs	r3, #4
 800bab4:	e0aa      	b.n	800bc0c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800babc:	2b00      	cmp	r3, #0
 800babe:	f040 8098 	bne.w	800bbf2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	69db      	ldr	r3, [r3, #28]
 800bac6:	1c5a      	adds	r2, r3, #1
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	699b      	ldr	r3, [r3, #24]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d10b      	bne.n	800baec <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	095b      	lsrs	r3, r3, #5
 800bad8:	68fa      	ldr	r2, [r7, #12]
 800bada:	8912      	ldrh	r2, [r2, #8]
 800badc:	4293      	cmp	r3, r2
 800bade:	f0c0 8088 	bcc.w	800bbf2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2200      	movs	r2, #0
 800bae6:	61da      	str	r2, [r3, #28]
 800bae8:	2304      	movs	r3, #4
 800baea:	e08f      	b.n	800bc0c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	0a5b      	lsrs	r3, r3, #9
 800baf0:	68fa      	ldr	r2, [r7, #12]
 800baf2:	8952      	ldrh	r2, [r2, #10]
 800baf4:	3a01      	subs	r2, #1
 800baf6:	4013      	ands	r3, r2
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d17a      	bne.n	800bbf2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bafc:	687a      	ldr	r2, [r7, #4]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	699b      	ldr	r3, [r3, #24]
 800bb02:	4619      	mov	r1, r3
 800bb04:	4610      	mov	r0, r2
 800bb06:	f7ff fc80 	bl	800b40a <get_fat>
 800bb0a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	2b01      	cmp	r3, #1
 800bb10:	d801      	bhi.n	800bb16 <dir_next+0x8c>
 800bb12:	2302      	movs	r3, #2
 800bb14:	e07a      	b.n	800bc0c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb1c:	d101      	bne.n	800bb22 <dir_next+0x98>
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e074      	b.n	800bc0c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	695b      	ldr	r3, [r3, #20]
 800bb26:	697a      	ldr	r2, [r7, #20]
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d358      	bcc.n	800bbde <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d104      	bne.n	800bb3c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2200      	movs	r2, #0
 800bb36:	61da      	str	r2, [r3, #28]
 800bb38:	2304      	movs	r3, #4
 800bb3a:	e067      	b.n	800bc0c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bb3c:	687a      	ldr	r2, [r7, #4]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	699b      	ldr	r3, [r3, #24]
 800bb42:	4619      	mov	r1, r3
 800bb44:	4610      	mov	r0, r2
 800bb46:	f7ff fe59 	bl	800b7fc <create_chain>
 800bb4a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d101      	bne.n	800bb56 <dir_next+0xcc>
 800bb52:	2307      	movs	r3, #7
 800bb54:	e05a      	b.n	800bc0c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d101      	bne.n	800bb60 <dir_next+0xd6>
 800bb5c:	2302      	movs	r3, #2
 800bb5e:	e055      	b.n	800bc0c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb66:	d101      	bne.n	800bb6c <dir_next+0xe2>
 800bb68:	2301      	movs	r3, #1
 800bb6a:	e04f      	b.n	800bc0c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bb6c:	68f8      	ldr	r0, [r7, #12]
 800bb6e:	f7ff fb4d 	bl	800b20c <sync_window>
 800bb72:	4603      	mov	r3, r0
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d001      	beq.n	800bb7c <dir_next+0xf2>
 800bb78:	2301      	movs	r3, #1
 800bb7a:	e047      	b.n	800bc0c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	3330      	adds	r3, #48	; 0x30
 800bb80:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb84:	2100      	movs	r1, #0
 800bb86:	4618      	mov	r0, r3
 800bb88:	f7ff f977 	bl	800ae7a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	613b      	str	r3, [r7, #16]
 800bb90:	6979      	ldr	r1, [r7, #20]
 800bb92:	68f8      	ldr	r0, [r7, #12]
 800bb94:	f7ff fc1a 	bl	800b3cc <clust2sect>
 800bb98:	4602      	mov	r2, r0
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	62da      	str	r2, [r3, #44]	; 0x2c
 800bb9e:	e012      	b.n	800bbc6 <dir_next+0x13c>
						fs->wflag = 1;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2201      	movs	r2, #1
 800bba4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bba6:	68f8      	ldr	r0, [r7, #12]
 800bba8:	f7ff fb30 	bl	800b20c <sync_window>
 800bbac:	4603      	mov	r3, r0
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d001      	beq.n	800bbb6 <dir_next+0x12c>
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	e02a      	b.n	800bc0c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	3301      	adds	r3, #1
 800bbba:	613b      	str	r3, [r7, #16]
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbc0:	1c5a      	adds	r2, r3, #1
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	62da      	str	r2, [r3, #44]	; 0x2c
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	895b      	ldrh	r3, [r3, #10]
 800bbca:	461a      	mov	r2, r3
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d3e6      	bcc.n	800bba0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	1ad2      	subs	r2, r2, r3
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	697a      	ldr	r2, [r7, #20]
 800bbe2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bbe4:	6979      	ldr	r1, [r7, #20]
 800bbe6:	68f8      	ldr	r0, [r7, #12]
 800bbe8:	f7ff fbf0 	bl	800b3cc <clust2sect>
 800bbec:	4602      	mov	r2, r0
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	68ba      	ldr	r2, [r7, #8]
 800bbf6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc04:	441a      	add	r2, r3
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bc0a:	2300      	movs	r3, #0
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3718      	adds	r7, #24
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b086      	sub	sp, #24
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bc24:	2100      	movs	r1, #0
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f7ff feb4 	bl	800b994 <dir_sdi>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bc30:	7dfb      	ldrb	r3, [r7, #23]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d12b      	bne.n	800bc8e <dir_alloc+0x7a>
		n = 0;
 800bc36:	2300      	movs	r3, #0
 800bc38:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	69db      	ldr	r3, [r3, #28]
 800bc3e:	4619      	mov	r1, r3
 800bc40:	68f8      	ldr	r0, [r7, #12]
 800bc42:	f7ff fb27 	bl	800b294 <move_window>
 800bc46:	4603      	mov	r3, r0
 800bc48:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bc4a:	7dfb      	ldrb	r3, [r7, #23]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d11d      	bne.n	800bc8c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6a1b      	ldr	r3, [r3, #32]
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	2be5      	cmp	r3, #229	; 0xe5
 800bc58:	d004      	beq.n	800bc64 <dir_alloc+0x50>
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6a1b      	ldr	r3, [r3, #32]
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d107      	bne.n	800bc74 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	3301      	adds	r3, #1
 800bc68:	613b      	str	r3, [r7, #16]
 800bc6a:	693a      	ldr	r2, [r7, #16]
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d102      	bne.n	800bc78 <dir_alloc+0x64>
 800bc72:	e00c      	b.n	800bc8e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bc74:	2300      	movs	r3, #0
 800bc76:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bc78:	2101      	movs	r1, #1
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f7ff ff05 	bl	800ba8a <dir_next>
 800bc80:	4603      	mov	r3, r0
 800bc82:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bc84:	7dfb      	ldrb	r3, [r7, #23]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d0d7      	beq.n	800bc3a <dir_alloc+0x26>
 800bc8a:	e000      	b.n	800bc8e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bc8c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bc8e:	7dfb      	ldrb	r3, [r7, #23]
 800bc90:	2b04      	cmp	r3, #4
 800bc92:	d101      	bne.n	800bc98 <dir_alloc+0x84>
 800bc94:	2307      	movs	r3, #7
 800bc96:	75fb      	strb	r3, [r7, #23]
	return res;
 800bc98:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3718      	adds	r7, #24
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}

0800bca2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bca2:	b580      	push	{r7, lr}
 800bca4:	b084      	sub	sp, #16
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	6078      	str	r0, [r7, #4]
 800bcaa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	331a      	adds	r3, #26
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f7ff f83f 	bl	800ad34 <ld_word>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	2b03      	cmp	r3, #3
 800bcc0:	d109      	bne.n	800bcd6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	3314      	adds	r3, #20
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f7ff f834 	bl	800ad34 <ld_word>
 800bccc:	4603      	mov	r3, r0
 800bcce:	041b      	lsls	r3, r3, #16
 800bcd0:	68fa      	ldr	r2, [r7, #12]
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3710      	adds	r7, #16
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}

0800bce0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b084      	sub	sp, #16
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	60b9      	str	r1, [r7, #8]
 800bcea:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	331a      	adds	r3, #26
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	b292      	uxth	r2, r2
 800bcf4:	4611      	mov	r1, r2
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7ff f857 	bl	800adaa <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	781b      	ldrb	r3, [r3, #0]
 800bd00:	2b03      	cmp	r3, #3
 800bd02:	d109      	bne.n	800bd18 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	f103 0214 	add.w	r2, r3, #20
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	0c1b      	lsrs	r3, r3, #16
 800bd0e:	b29b      	uxth	r3, r3
 800bd10:	4619      	mov	r1, r3
 800bd12:	4610      	mov	r0, r2
 800bd14:	f7ff f849 	bl	800adaa <st_word>
	}
}
 800bd18:	bf00      	nop
 800bd1a:	3710      	adds	r7, #16
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b086      	sub	sp, #24
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bd2e:	2100      	movs	r1, #0
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f7ff fe2f 	bl	800b994 <dir_sdi>
 800bd36:	4603      	mov	r3, r0
 800bd38:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bd3a:	7dfb      	ldrb	r3, [r7, #23]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d001      	beq.n	800bd44 <dir_find+0x24>
 800bd40:	7dfb      	ldrb	r3, [r7, #23]
 800bd42:	e03e      	b.n	800bdc2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	69db      	ldr	r3, [r3, #28]
 800bd48:	4619      	mov	r1, r3
 800bd4a:	6938      	ldr	r0, [r7, #16]
 800bd4c:	f7ff faa2 	bl	800b294 <move_window>
 800bd50:	4603      	mov	r3, r0
 800bd52:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bd54:	7dfb      	ldrb	r3, [r7, #23]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d12f      	bne.n	800bdba <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6a1b      	ldr	r3, [r3, #32]
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bd62:	7bfb      	ldrb	r3, [r7, #15]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d102      	bne.n	800bd6e <dir_find+0x4e>
 800bd68:	2304      	movs	r3, #4
 800bd6a:	75fb      	strb	r3, [r7, #23]
 800bd6c:	e028      	b.n	800bdc0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6a1b      	ldr	r3, [r3, #32]
 800bd72:	330b      	adds	r3, #11
 800bd74:	781b      	ldrb	r3, [r3, #0]
 800bd76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd7a:	b2da      	uxtb	r2, r3
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6a1b      	ldr	r3, [r3, #32]
 800bd84:	330b      	adds	r3, #11
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	f003 0308 	and.w	r3, r3, #8
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d10a      	bne.n	800bda6 <dir_find+0x86>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6a18      	ldr	r0, [r3, #32]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	3324      	adds	r3, #36	; 0x24
 800bd98:	220b      	movs	r2, #11
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	f7ff f888 	bl	800aeb0 <mem_cmp>
 800bda0:	4603      	mov	r3, r0
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d00b      	beq.n	800bdbe <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bda6:	2100      	movs	r1, #0
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f7ff fe6e 	bl	800ba8a <dir_next>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bdb2:	7dfb      	ldrb	r3, [r7, #23]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d0c5      	beq.n	800bd44 <dir_find+0x24>
 800bdb8:	e002      	b.n	800bdc0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800bdba:	bf00      	nop
 800bdbc:	e000      	b.n	800bdc0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bdbe:	bf00      	nop

	return res;
 800bdc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3718      	adds	r7, #24
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}

0800bdca <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bdca:	b580      	push	{r7, lr}
 800bdcc:	b084      	sub	sp, #16
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800bdd8:	2101      	movs	r1, #1
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f7ff ff1a 	bl	800bc14 <dir_alloc>
 800bde0:	4603      	mov	r3, r0
 800bde2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bde4:	7bfb      	ldrb	r3, [r7, #15]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d11c      	bne.n	800be24 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	69db      	ldr	r3, [r3, #28]
 800bdee:	4619      	mov	r1, r3
 800bdf0:	68b8      	ldr	r0, [r7, #8]
 800bdf2:	f7ff fa4f 	bl	800b294 <move_window>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bdfa:	7bfb      	ldrb	r3, [r7, #15]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d111      	bne.n	800be24 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6a1b      	ldr	r3, [r3, #32]
 800be04:	2220      	movs	r2, #32
 800be06:	2100      	movs	r1, #0
 800be08:	4618      	mov	r0, r3
 800be0a:	f7ff f836 	bl	800ae7a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6a18      	ldr	r0, [r3, #32]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	3324      	adds	r3, #36	; 0x24
 800be16:	220b      	movs	r2, #11
 800be18:	4619      	mov	r1, r3
 800be1a:	f7ff f80d 	bl	800ae38 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	2201      	movs	r2, #1
 800be22:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800be24:	7bfb      	ldrb	r3, [r7, #15]
}
 800be26:	4618      	mov	r0, r3
 800be28:	3710      	adds	r7, #16
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
	...

0800be30 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b088      	sub	sp, #32
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	60fb      	str	r3, [r7, #12]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	3324      	adds	r3, #36	; 0x24
 800be44:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800be46:	220b      	movs	r2, #11
 800be48:	2120      	movs	r1, #32
 800be4a:	68b8      	ldr	r0, [r7, #8]
 800be4c:	f7ff f815 	bl	800ae7a <mem_set>
	si = i = 0; ni = 8;
 800be50:	2300      	movs	r3, #0
 800be52:	613b      	str	r3, [r7, #16]
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	61fb      	str	r3, [r7, #28]
 800be58:	2308      	movs	r3, #8
 800be5a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800be5c:	69fb      	ldr	r3, [r7, #28]
 800be5e:	1c5a      	adds	r2, r3, #1
 800be60:	61fa      	str	r2, [r7, #28]
 800be62:	68fa      	ldr	r2, [r7, #12]
 800be64:	4413      	add	r3, r2
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800be6a:	7efb      	ldrb	r3, [r7, #27]
 800be6c:	2b20      	cmp	r3, #32
 800be6e:	d94e      	bls.n	800bf0e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800be70:	7efb      	ldrb	r3, [r7, #27]
 800be72:	2b2f      	cmp	r3, #47	; 0x2f
 800be74:	d006      	beq.n	800be84 <create_name+0x54>
 800be76:	7efb      	ldrb	r3, [r7, #27]
 800be78:	2b5c      	cmp	r3, #92	; 0x5c
 800be7a:	d110      	bne.n	800be9e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800be7c:	e002      	b.n	800be84 <create_name+0x54>
 800be7e:	69fb      	ldr	r3, [r7, #28]
 800be80:	3301      	adds	r3, #1
 800be82:	61fb      	str	r3, [r7, #28]
 800be84:	68fa      	ldr	r2, [r7, #12]
 800be86:	69fb      	ldr	r3, [r7, #28]
 800be88:	4413      	add	r3, r2
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	2b2f      	cmp	r3, #47	; 0x2f
 800be8e:	d0f6      	beq.n	800be7e <create_name+0x4e>
 800be90:	68fa      	ldr	r2, [r7, #12]
 800be92:	69fb      	ldr	r3, [r7, #28]
 800be94:	4413      	add	r3, r2
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	2b5c      	cmp	r3, #92	; 0x5c
 800be9a:	d0f0      	beq.n	800be7e <create_name+0x4e>
			break;
 800be9c:	e038      	b.n	800bf10 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800be9e:	7efb      	ldrb	r3, [r7, #27]
 800bea0:	2b2e      	cmp	r3, #46	; 0x2e
 800bea2:	d003      	beq.n	800beac <create_name+0x7c>
 800bea4:	693a      	ldr	r2, [r7, #16]
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d30c      	bcc.n	800bec6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	2b0b      	cmp	r3, #11
 800beb0:	d002      	beq.n	800beb8 <create_name+0x88>
 800beb2:	7efb      	ldrb	r3, [r7, #27]
 800beb4:	2b2e      	cmp	r3, #46	; 0x2e
 800beb6:	d001      	beq.n	800bebc <create_name+0x8c>
 800beb8:	2306      	movs	r3, #6
 800beba:	e044      	b.n	800bf46 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800bebc:	2308      	movs	r3, #8
 800bebe:	613b      	str	r3, [r7, #16]
 800bec0:	230b      	movs	r3, #11
 800bec2:	617b      	str	r3, [r7, #20]
			continue;
 800bec4:	e022      	b.n	800bf0c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800bec6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800beca:	2b00      	cmp	r3, #0
 800becc:	da04      	bge.n	800bed8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800bece:	7efb      	ldrb	r3, [r7, #27]
 800bed0:	3b80      	subs	r3, #128	; 0x80
 800bed2:	4a1f      	ldr	r2, [pc, #124]	; (800bf50 <create_name+0x120>)
 800bed4:	5cd3      	ldrb	r3, [r2, r3]
 800bed6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800bed8:	7efb      	ldrb	r3, [r7, #27]
 800beda:	4619      	mov	r1, r3
 800bedc:	481d      	ldr	r0, [pc, #116]	; (800bf54 <create_name+0x124>)
 800bede:	f7ff f80e 	bl	800aefe <chk_chr>
 800bee2:	4603      	mov	r3, r0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d001      	beq.n	800beec <create_name+0xbc>
 800bee8:	2306      	movs	r3, #6
 800beea:	e02c      	b.n	800bf46 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800beec:	7efb      	ldrb	r3, [r7, #27]
 800beee:	2b60      	cmp	r3, #96	; 0x60
 800bef0:	d905      	bls.n	800befe <create_name+0xce>
 800bef2:	7efb      	ldrb	r3, [r7, #27]
 800bef4:	2b7a      	cmp	r3, #122	; 0x7a
 800bef6:	d802      	bhi.n	800befe <create_name+0xce>
 800bef8:	7efb      	ldrb	r3, [r7, #27]
 800befa:	3b20      	subs	r3, #32
 800befc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	1c5a      	adds	r2, r3, #1
 800bf02:	613a      	str	r2, [r7, #16]
 800bf04:	68ba      	ldr	r2, [r7, #8]
 800bf06:	4413      	add	r3, r2
 800bf08:	7efa      	ldrb	r2, [r7, #27]
 800bf0a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800bf0c:	e7a6      	b.n	800be5c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bf0e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800bf10:	68fa      	ldr	r2, [r7, #12]
 800bf12:	69fb      	ldr	r3, [r7, #28]
 800bf14:	441a      	add	r2, r3
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d101      	bne.n	800bf24 <create_name+0xf4>
 800bf20:	2306      	movs	r3, #6
 800bf22:	e010      	b.n	800bf46 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	781b      	ldrb	r3, [r3, #0]
 800bf28:	2be5      	cmp	r3, #229	; 0xe5
 800bf2a:	d102      	bne.n	800bf32 <create_name+0x102>
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	2205      	movs	r2, #5
 800bf30:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bf32:	7efb      	ldrb	r3, [r7, #27]
 800bf34:	2b20      	cmp	r3, #32
 800bf36:	d801      	bhi.n	800bf3c <create_name+0x10c>
 800bf38:	2204      	movs	r2, #4
 800bf3a:	e000      	b.n	800bf3e <create_name+0x10e>
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	330b      	adds	r3, #11
 800bf42:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800bf44:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3720      	adds	r7, #32
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	0800dce4 	.word	0x0800dce4
 800bf54:	0800dc0c 	.word	0x0800dc0c

0800bf58 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b086      	sub	sp, #24
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bf6c:	e002      	b.n	800bf74 <follow_path+0x1c>
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	3301      	adds	r3, #1
 800bf72:	603b      	str	r3, [r7, #0]
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	2b2f      	cmp	r3, #47	; 0x2f
 800bf7a:	d0f8      	beq.n	800bf6e <follow_path+0x16>
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	781b      	ldrb	r3, [r3, #0]
 800bf80:	2b5c      	cmp	r3, #92	; 0x5c
 800bf82:	d0f4      	beq.n	800bf6e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	2200      	movs	r2, #0
 800bf88:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	2b1f      	cmp	r3, #31
 800bf90:	d80a      	bhi.n	800bfa8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2280      	movs	r2, #128	; 0x80
 800bf96:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800bf9a:	2100      	movs	r1, #0
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f7ff fcf9 	bl	800b994 <dir_sdi>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	75fb      	strb	r3, [r7, #23]
 800bfa6:	e043      	b.n	800c030 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bfa8:	463b      	mov	r3, r7
 800bfaa:	4619      	mov	r1, r3
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f7ff ff3f 	bl	800be30 <create_name>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bfb6:	7dfb      	ldrb	r3, [r7, #23]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d134      	bne.n	800c026 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f7ff feaf 	bl	800bd20 <dir_find>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bfcc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bfce:	7dfb      	ldrb	r3, [r7, #23]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d00a      	beq.n	800bfea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bfd4:	7dfb      	ldrb	r3, [r7, #23]
 800bfd6:	2b04      	cmp	r3, #4
 800bfd8:	d127      	bne.n	800c02a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bfda:	7afb      	ldrb	r3, [r7, #11]
 800bfdc:	f003 0304 	and.w	r3, r3, #4
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d122      	bne.n	800c02a <follow_path+0xd2>
 800bfe4:	2305      	movs	r3, #5
 800bfe6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bfe8:	e01f      	b.n	800c02a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bfea:	7afb      	ldrb	r3, [r7, #11]
 800bfec:	f003 0304 	and.w	r3, r3, #4
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d11c      	bne.n	800c02e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	799b      	ldrb	r3, [r3, #6]
 800bff8:	f003 0310 	and.w	r3, r3, #16
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d102      	bne.n	800c006 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c000:	2305      	movs	r3, #5
 800c002:	75fb      	strb	r3, [r7, #23]
 800c004:	e014      	b.n	800c030 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	695b      	ldr	r3, [r3, #20]
 800c010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c014:	4413      	add	r3, r2
 800c016:	4619      	mov	r1, r3
 800c018:	68f8      	ldr	r0, [r7, #12]
 800c01a:	f7ff fe42 	bl	800bca2 <ld_clust>
 800c01e:	4602      	mov	r2, r0
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c024:	e7c0      	b.n	800bfa8 <follow_path+0x50>
			if (res != FR_OK) break;
 800c026:	bf00      	nop
 800c028:	e002      	b.n	800c030 <follow_path+0xd8>
				break;
 800c02a:	bf00      	nop
 800c02c:	e000      	b.n	800c030 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c02e:	bf00      	nop
			}
		}
	}

	return res;
 800c030:	7dfb      	ldrb	r3, [r7, #23]
}
 800c032:	4618      	mov	r0, r3
 800c034:	3718      	adds	r7, #24
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}

0800c03a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c03a:	b480      	push	{r7}
 800c03c:	b087      	sub	sp, #28
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c046:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d031      	beq.n	800c0b4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	617b      	str	r3, [r7, #20]
 800c056:	e002      	b.n	800c05e <get_ldnumber+0x24>
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	3301      	adds	r3, #1
 800c05c:	617b      	str	r3, [r7, #20]
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	781b      	ldrb	r3, [r3, #0]
 800c062:	2b20      	cmp	r3, #32
 800c064:	d903      	bls.n	800c06e <get_ldnumber+0x34>
 800c066:	697b      	ldr	r3, [r7, #20]
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	2b3a      	cmp	r3, #58	; 0x3a
 800c06c:	d1f4      	bne.n	800c058 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	2b3a      	cmp	r3, #58	; 0x3a
 800c074:	d11c      	bne.n	800c0b0 <get_ldnumber+0x76>
			tp = *path;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	1c5a      	adds	r2, r3, #1
 800c080:	60fa      	str	r2, [r7, #12]
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	3b30      	subs	r3, #48	; 0x30
 800c086:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	2b09      	cmp	r3, #9
 800c08c:	d80e      	bhi.n	800c0ac <get_ldnumber+0x72>
 800c08e:	68fa      	ldr	r2, [r7, #12]
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	429a      	cmp	r2, r3
 800c094:	d10a      	bne.n	800c0ac <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d107      	bne.n	800c0ac <get_ldnumber+0x72>
					vol = (int)i;
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	3301      	adds	r3, #1
 800c0a4:	617b      	str	r3, [r7, #20]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	697a      	ldr	r2, [r7, #20]
 800c0aa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	e002      	b.n	800c0b6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c0b4:	693b      	ldr	r3, [r7, #16]
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	371c      	adds	r7, #28
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr
	...

0800c0c4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	70da      	strb	r2, [r3, #3]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c0da:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c0dc:	6839      	ldr	r1, [r7, #0]
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f7ff f8d8 	bl	800b294 <move_window>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d001      	beq.n	800c0ee <check_fs+0x2a>
 800c0ea:	2304      	movs	r3, #4
 800c0ec:	e038      	b.n	800c160 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	3330      	adds	r3, #48	; 0x30
 800c0f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f7fe fe1c 	bl	800ad34 <ld_word>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	461a      	mov	r2, r3
 800c100:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c104:	429a      	cmp	r2, r3
 800c106:	d001      	beq.n	800c10c <check_fs+0x48>
 800c108:	2303      	movs	r3, #3
 800c10a:	e029      	b.n	800c160 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c112:	2be9      	cmp	r3, #233	; 0xe9
 800c114:	d009      	beq.n	800c12a <check_fs+0x66>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c11c:	2beb      	cmp	r3, #235	; 0xeb
 800c11e:	d11e      	bne.n	800c15e <check_fs+0x9a>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c126:	2b90      	cmp	r3, #144	; 0x90
 800c128:	d119      	bne.n	800c15e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	3330      	adds	r3, #48	; 0x30
 800c12e:	3336      	adds	r3, #54	; 0x36
 800c130:	4618      	mov	r0, r3
 800c132:	f7fe fe17 	bl	800ad64 <ld_dword>
 800c136:	4603      	mov	r3, r0
 800c138:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c13c:	4a0a      	ldr	r2, [pc, #40]	; (800c168 <check_fs+0xa4>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d101      	bne.n	800c146 <check_fs+0x82>
 800c142:	2300      	movs	r3, #0
 800c144:	e00c      	b.n	800c160 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	3330      	adds	r3, #48	; 0x30
 800c14a:	3352      	adds	r3, #82	; 0x52
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7fe fe09 	bl	800ad64 <ld_dword>
 800c152:	4603      	mov	r3, r0
 800c154:	4a05      	ldr	r2, [pc, #20]	; (800c16c <check_fs+0xa8>)
 800c156:	4293      	cmp	r3, r2
 800c158:	d101      	bne.n	800c15e <check_fs+0x9a>
 800c15a:	2300      	movs	r3, #0
 800c15c:	e000      	b.n	800c160 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c15e:	2302      	movs	r3, #2
}
 800c160:	4618      	mov	r0, r3
 800c162:	3708      	adds	r7, #8
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}
 800c168:	00544146 	.word	0x00544146
 800c16c:	33544146 	.word	0x33544146

0800c170 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b096      	sub	sp, #88	; 0x58
 800c174:	af00      	add	r7, sp, #0
 800c176:	60f8      	str	r0, [r7, #12]
 800c178:	60b9      	str	r1, [r7, #8]
 800c17a:	4613      	mov	r3, r2
 800c17c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	2200      	movs	r2, #0
 800c182:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c184:	68f8      	ldr	r0, [r7, #12]
 800c186:	f7ff ff58 	bl	800c03a <get_ldnumber>
 800c18a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c18c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c18e:	2b00      	cmp	r3, #0
 800c190:	da01      	bge.n	800c196 <find_volume+0x26>
 800c192:	230b      	movs	r3, #11
 800c194:	e22d      	b.n	800c5f2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c196:	4aa1      	ldr	r2, [pc, #644]	; (800c41c <find_volume+0x2ac>)
 800c198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c19a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c19e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d101      	bne.n	800c1aa <find_volume+0x3a>
 800c1a6:	230c      	movs	r3, #12
 800c1a8:	e223      	b.n	800c5f2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1ae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c1b0:	79fb      	ldrb	r3, [r7, #7]
 800c1b2:	f023 0301 	bic.w	r3, r3, #1
 800c1b6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d01a      	beq.n	800c1f6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c2:	785b      	ldrb	r3, [r3, #1]
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f7fe fd17 	bl	800abf8 <disk_status>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c1d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c1d4:	f003 0301 	and.w	r3, r3, #1
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d10c      	bne.n	800c1f6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c1dc:	79fb      	ldrb	r3, [r7, #7]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d007      	beq.n	800c1f2 <find_volume+0x82>
 800c1e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c1e6:	f003 0304 	and.w	r3, r3, #4
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d001      	beq.n	800c1f2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c1ee:	230a      	movs	r3, #10
 800c1f0:	e1ff      	b.n	800c5f2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	e1fd      	b.n	800c5f2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c1fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1fe:	b2da      	uxtb	r2, r3
 800c200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c202:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c206:	785b      	ldrb	r3, [r3, #1]
 800c208:	4618      	mov	r0, r3
 800c20a:	f7fe fd0f 	bl	800ac2c <disk_initialize>
 800c20e:	4603      	mov	r3, r0
 800c210:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c214:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c218:	f003 0301 	and.w	r3, r3, #1
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d001      	beq.n	800c224 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c220:	2303      	movs	r3, #3
 800c222:	e1e6      	b.n	800c5f2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c224:	79fb      	ldrb	r3, [r7, #7]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d007      	beq.n	800c23a <find_volume+0xca>
 800c22a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c22e:	f003 0304 	and.w	r3, r3, #4
 800c232:	2b00      	cmp	r3, #0
 800c234:	d001      	beq.n	800c23a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c236:	230a      	movs	r3, #10
 800c238:	e1db      	b.n	800c5f2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c23a:	2300      	movs	r3, #0
 800c23c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c23e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c240:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c242:	f7ff ff3f 	bl	800c0c4 <check_fs>
 800c246:	4603      	mov	r3, r0
 800c248:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c24c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c250:	2b02      	cmp	r3, #2
 800c252:	d149      	bne.n	800c2e8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c254:	2300      	movs	r3, #0
 800c256:	643b      	str	r3, [r7, #64]	; 0x40
 800c258:	e01e      	b.n	800c298 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c25c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c262:	011b      	lsls	r3, r3, #4
 800c264:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c268:	4413      	add	r3, r2
 800c26a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26e:	3304      	adds	r3, #4
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d006      	beq.n	800c284 <find_volume+0x114>
 800c276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c278:	3308      	adds	r3, #8
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7fe fd72 	bl	800ad64 <ld_dword>
 800c280:	4602      	mov	r2, r0
 800c282:	e000      	b.n	800c286 <find_volume+0x116>
 800c284:	2200      	movs	r2, #0
 800c286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c288:	009b      	lsls	r3, r3, #2
 800c28a:	3358      	adds	r3, #88	; 0x58
 800c28c:	443b      	add	r3, r7
 800c28e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c294:	3301      	adds	r3, #1
 800c296:	643b      	str	r3, [r7, #64]	; 0x40
 800c298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c29a:	2b03      	cmp	r3, #3
 800c29c:	d9dd      	bls.n	800c25a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c29e:	2300      	movs	r3, #0
 800c2a0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c2a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d002      	beq.n	800c2ae <find_volume+0x13e>
 800c2a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2aa:	3b01      	subs	r3, #1
 800c2ac:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c2ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2b0:	009b      	lsls	r3, r3, #2
 800c2b2:	3358      	adds	r3, #88	; 0x58
 800c2b4:	443b      	add	r3, r7
 800c2b6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c2ba:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c2bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d005      	beq.n	800c2ce <find_volume+0x15e>
 800c2c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c2c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c2c6:	f7ff fefd 	bl	800c0c4 <check_fs>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	e000      	b.n	800c2d0 <find_volume+0x160>
 800c2ce:	2303      	movs	r3, #3
 800c2d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c2d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d905      	bls.n	800c2e8 <find_volume+0x178>
 800c2dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2de:	3301      	adds	r3, #1
 800c2e0:	643b      	str	r3, [r7, #64]	; 0x40
 800c2e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2e4:	2b03      	cmp	r3, #3
 800c2e6:	d9e2      	bls.n	800c2ae <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c2e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c2ec:	2b04      	cmp	r3, #4
 800c2ee:	d101      	bne.n	800c2f4 <find_volume+0x184>
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	e17e      	b.n	800c5f2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c2f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c2f8:	2b01      	cmp	r3, #1
 800c2fa:	d901      	bls.n	800c300 <find_volume+0x190>
 800c2fc:	230d      	movs	r3, #13
 800c2fe:	e178      	b.n	800c5f2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c302:	3330      	adds	r3, #48	; 0x30
 800c304:	330b      	adds	r3, #11
 800c306:	4618      	mov	r0, r3
 800c308:	f7fe fd14 	bl	800ad34 <ld_word>
 800c30c:	4603      	mov	r3, r0
 800c30e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c312:	d001      	beq.n	800c318 <find_volume+0x1a8>
 800c314:	230d      	movs	r3, #13
 800c316:	e16c      	b.n	800c5f2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c31a:	3330      	adds	r3, #48	; 0x30
 800c31c:	3316      	adds	r3, #22
 800c31e:	4618      	mov	r0, r3
 800c320:	f7fe fd08 	bl	800ad34 <ld_word>
 800c324:	4603      	mov	r3, r0
 800c326:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d106      	bne.n	800c33c <find_volume+0x1cc>
 800c32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c330:	3330      	adds	r3, #48	; 0x30
 800c332:	3324      	adds	r3, #36	; 0x24
 800c334:	4618      	mov	r0, r3
 800c336:	f7fe fd15 	bl	800ad64 <ld_dword>
 800c33a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c33e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c340:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c344:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800c348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c34a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c34e:	789b      	ldrb	r3, [r3, #2]
 800c350:	2b01      	cmp	r3, #1
 800c352:	d005      	beq.n	800c360 <find_volume+0x1f0>
 800c354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c356:	789b      	ldrb	r3, [r3, #2]
 800c358:	2b02      	cmp	r3, #2
 800c35a:	d001      	beq.n	800c360 <find_volume+0x1f0>
 800c35c:	230d      	movs	r3, #13
 800c35e:	e148      	b.n	800c5f2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c362:	789b      	ldrb	r3, [r3, #2]
 800c364:	461a      	mov	r2, r3
 800c366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c368:	fb02 f303 	mul.w	r3, r2, r3
 800c36c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c374:	b29a      	uxth	r2, r3
 800c376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c378:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c37c:	895b      	ldrh	r3, [r3, #10]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d008      	beq.n	800c394 <find_volume+0x224>
 800c382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c384:	895b      	ldrh	r3, [r3, #10]
 800c386:	461a      	mov	r2, r3
 800c388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38a:	895b      	ldrh	r3, [r3, #10]
 800c38c:	3b01      	subs	r3, #1
 800c38e:	4013      	ands	r3, r2
 800c390:	2b00      	cmp	r3, #0
 800c392:	d001      	beq.n	800c398 <find_volume+0x228>
 800c394:	230d      	movs	r3, #13
 800c396:	e12c      	b.n	800c5f2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c39a:	3330      	adds	r3, #48	; 0x30
 800c39c:	3311      	adds	r3, #17
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7fe fcc8 	bl	800ad34 <ld_word>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3aa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ae:	891b      	ldrh	r3, [r3, #8]
 800c3b0:	f003 030f 	and.w	r3, r3, #15
 800c3b4:	b29b      	uxth	r3, r3
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d001      	beq.n	800c3be <find_volume+0x24e>
 800c3ba:	230d      	movs	r3, #13
 800c3bc:	e119      	b.n	800c5f2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c0:	3330      	adds	r3, #48	; 0x30
 800c3c2:	3313      	adds	r3, #19
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f7fe fcb5 	bl	800ad34 <ld_word>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c3ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d106      	bne.n	800c3e2 <find_volume+0x272>
 800c3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d6:	3330      	adds	r3, #48	; 0x30
 800c3d8:	3320      	adds	r3, #32
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f7fe fcc2 	bl	800ad64 <ld_dword>
 800c3e0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e4:	3330      	adds	r3, #48	; 0x30
 800c3e6:	330e      	adds	r3, #14
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7fe fca3 	bl	800ad34 <ld_word>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c3f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d101      	bne.n	800c3fc <find_volume+0x28c>
 800c3f8:	230d      	movs	r3, #13
 800c3fa:	e0fa      	b.n	800c5f2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c3fc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c3fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c400:	4413      	add	r3, r2
 800c402:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c404:	8912      	ldrh	r2, [r2, #8]
 800c406:	0912      	lsrs	r2, r2, #4
 800c408:	b292      	uxth	r2, r2
 800c40a:	4413      	add	r3, r2
 800c40c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c40e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c412:	429a      	cmp	r2, r3
 800c414:	d204      	bcs.n	800c420 <find_volume+0x2b0>
 800c416:	230d      	movs	r3, #13
 800c418:	e0eb      	b.n	800c5f2 <find_volume+0x482>
 800c41a:	bf00      	nop
 800c41c:	20001684 	.word	0x20001684
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c420:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c424:	1ad3      	subs	r3, r2, r3
 800c426:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c428:	8952      	ldrh	r2, [r2, #10]
 800c42a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c42e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c432:	2b00      	cmp	r3, #0
 800c434:	d101      	bne.n	800c43a <find_volume+0x2ca>
 800c436:	230d      	movs	r3, #13
 800c438:	e0db      	b.n	800c5f2 <find_volume+0x482>
		fmt = FS_FAT32;
 800c43a:	2303      	movs	r3, #3
 800c43c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c442:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c446:	4293      	cmp	r3, r2
 800c448:	d802      	bhi.n	800c450 <find_volume+0x2e0>
 800c44a:	2302      	movs	r3, #2
 800c44c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c452:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c456:	4293      	cmp	r3, r2
 800c458:	d802      	bhi.n	800c460 <find_volume+0x2f0>
 800c45a:	2301      	movs	r3, #1
 800c45c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c462:	1c9a      	adds	r2, r3, #2
 800c464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c466:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800c468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c46a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c46c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c46e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c472:	441a      	add	r2, r3
 800c474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c476:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800c478:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c47c:	441a      	add	r2, r3
 800c47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c480:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800c482:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c486:	2b03      	cmp	r3, #3
 800c488:	d11e      	bne.n	800c4c8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c48c:	3330      	adds	r3, #48	; 0x30
 800c48e:	332a      	adds	r3, #42	; 0x2a
 800c490:	4618      	mov	r0, r3
 800c492:	f7fe fc4f 	bl	800ad34 <ld_word>
 800c496:	4603      	mov	r3, r0
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d001      	beq.n	800c4a0 <find_volume+0x330>
 800c49c:	230d      	movs	r3, #13
 800c49e:	e0a8      	b.n	800c5f2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a2:	891b      	ldrh	r3, [r3, #8]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d001      	beq.n	800c4ac <find_volume+0x33c>
 800c4a8:	230d      	movs	r3, #13
 800c4aa:	e0a2      	b.n	800c5f2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ae:	3330      	adds	r3, #48	; 0x30
 800c4b0:	332c      	adds	r3, #44	; 0x2c
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f7fe fc56 	bl	800ad64 <ld_dword>
 800c4b8:	4602      	mov	r2, r0
 800c4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4bc:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4c0:	695b      	ldr	r3, [r3, #20]
 800c4c2:	009b      	lsls	r3, r3, #2
 800c4c4:	647b      	str	r3, [r7, #68]	; 0x44
 800c4c6:	e01f      	b.n	800c508 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ca:	891b      	ldrh	r3, [r3, #8]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d101      	bne.n	800c4d4 <find_volume+0x364>
 800c4d0:	230d      	movs	r3, #13
 800c4d2:	e08e      	b.n	800c5f2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d6:	6a1a      	ldr	r2, [r3, #32]
 800c4d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4da:	441a      	add	r2, r3
 800c4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4de:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c4e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c4e4:	2b02      	cmp	r3, #2
 800c4e6:	d103      	bne.n	800c4f0 <find_volume+0x380>
 800c4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ea:	695b      	ldr	r3, [r3, #20]
 800c4ec:	005b      	lsls	r3, r3, #1
 800c4ee:	e00a      	b.n	800c506 <find_volume+0x396>
 800c4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f2:	695a      	ldr	r2, [r3, #20]
 800c4f4:	4613      	mov	r3, r2
 800c4f6:	005b      	lsls	r3, r3, #1
 800c4f8:	4413      	add	r3, r2
 800c4fa:	085a      	lsrs	r2, r3, #1
 800c4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4fe:	695b      	ldr	r3, [r3, #20]
 800c500:	f003 0301 	and.w	r3, r3, #1
 800c504:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c506:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c50a:	699a      	ldr	r2, [r3, #24]
 800c50c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c50e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c512:	0a5b      	lsrs	r3, r3, #9
 800c514:	429a      	cmp	r2, r3
 800c516:	d201      	bcs.n	800c51c <find_volume+0x3ac>
 800c518:	230d      	movs	r3, #13
 800c51a:	e06a      	b.n	800c5f2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c51e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c522:	611a      	str	r2, [r3, #16]
 800c524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c526:	691a      	ldr	r2, [r3, #16]
 800c528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c52a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800c52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c52e:	2280      	movs	r2, #128	; 0x80
 800c530:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c532:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c536:	2b03      	cmp	r3, #3
 800c538:	d149      	bne.n	800c5ce <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c53c:	3330      	adds	r3, #48	; 0x30
 800c53e:	3330      	adds	r3, #48	; 0x30
 800c540:	4618      	mov	r0, r3
 800c542:	f7fe fbf7 	bl	800ad34 <ld_word>
 800c546:	4603      	mov	r3, r0
 800c548:	2b01      	cmp	r3, #1
 800c54a:	d140      	bne.n	800c5ce <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c54c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c54e:	3301      	adds	r3, #1
 800c550:	4619      	mov	r1, r3
 800c552:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c554:	f7fe fe9e 	bl	800b294 <move_window>
 800c558:	4603      	mov	r3, r0
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d137      	bne.n	800c5ce <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800c55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c560:	2200      	movs	r2, #0
 800c562:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c566:	3330      	adds	r3, #48	; 0x30
 800c568:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c56c:	4618      	mov	r0, r3
 800c56e:	f7fe fbe1 	bl	800ad34 <ld_word>
 800c572:	4603      	mov	r3, r0
 800c574:	461a      	mov	r2, r3
 800c576:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d127      	bne.n	800c5ce <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c580:	3330      	adds	r3, #48	; 0x30
 800c582:	4618      	mov	r0, r3
 800c584:	f7fe fbee 	bl	800ad64 <ld_dword>
 800c588:	4603      	mov	r3, r0
 800c58a:	4a1c      	ldr	r2, [pc, #112]	; (800c5fc <find_volume+0x48c>)
 800c58c:	4293      	cmp	r3, r2
 800c58e:	d11e      	bne.n	800c5ce <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c592:	3330      	adds	r3, #48	; 0x30
 800c594:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c598:	4618      	mov	r0, r3
 800c59a:	f7fe fbe3 	bl	800ad64 <ld_dword>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	4a17      	ldr	r2, [pc, #92]	; (800c600 <find_volume+0x490>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d113      	bne.n	800c5ce <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a8:	3330      	adds	r3, #48	; 0x30
 800c5aa:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7fe fbd8 	bl	800ad64 <ld_dword>
 800c5b4:	4602      	mov	r2, r0
 800c5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5bc:	3330      	adds	r3, #48	; 0x30
 800c5be:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7fe fbce 	bl	800ad64 <ld_dword>
 800c5c8:	4602      	mov	r2, r0
 800c5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5cc:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c5d4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c5d6:	4b0b      	ldr	r3, [pc, #44]	; (800c604 <find_volume+0x494>)
 800c5d8:	881b      	ldrh	r3, [r3, #0]
 800c5da:	3301      	adds	r3, #1
 800c5dc:	b29a      	uxth	r2, r3
 800c5de:	4b09      	ldr	r3, [pc, #36]	; (800c604 <find_volume+0x494>)
 800c5e0:	801a      	strh	r2, [r3, #0]
 800c5e2:	4b08      	ldr	r3, [pc, #32]	; (800c604 <find_volume+0x494>)
 800c5e4:	881a      	ldrh	r2, [r3, #0]
 800c5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c5ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c5ec:	f7fe fdea 	bl	800b1c4 <clear_lock>
#endif
	return FR_OK;
 800c5f0:	2300      	movs	r3, #0
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3758      	adds	r7, #88	; 0x58
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	41615252 	.word	0x41615252
 800c600:	61417272 	.word	0x61417272
 800c604:	20001688 	.word	0x20001688

0800c608 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b084      	sub	sp, #16
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c612:	2309      	movs	r3, #9
 800c614:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d01c      	beq.n	800c656 <validate+0x4e>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d018      	beq.n	800c656 <validate+0x4e>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	781b      	ldrb	r3, [r3, #0]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d013      	beq.n	800c656 <validate+0x4e>
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	889a      	ldrh	r2, [r3, #4]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	88db      	ldrh	r3, [r3, #6]
 800c638:	429a      	cmp	r2, r3
 800c63a:	d10c      	bne.n	800c656 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	785b      	ldrb	r3, [r3, #1]
 800c642:	4618      	mov	r0, r3
 800c644:	f7fe fad8 	bl	800abf8 <disk_status>
 800c648:	4603      	mov	r3, r0
 800c64a:	f003 0301 	and.w	r3, r3, #1
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d101      	bne.n	800c656 <validate+0x4e>
			res = FR_OK;
 800c652:	2300      	movs	r3, #0
 800c654:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c656:	7bfb      	ldrb	r3, [r7, #15]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d102      	bne.n	800c662 <validate+0x5a>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	e000      	b.n	800c664 <validate+0x5c>
 800c662:	2300      	movs	r3, #0
 800c664:	683a      	ldr	r2, [r7, #0]
 800c666:	6013      	str	r3, [r2, #0]
	return res;
 800c668:	7bfb      	ldrb	r3, [r7, #15]
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3710      	adds	r7, #16
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
	...

0800c674 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b088      	sub	sp, #32
 800c678:	af00      	add	r7, sp, #0
 800c67a:	60f8      	str	r0, [r7, #12]
 800c67c:	60b9      	str	r1, [r7, #8]
 800c67e:	4613      	mov	r3, r2
 800c680:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c686:	f107 0310 	add.w	r3, r7, #16
 800c68a:	4618      	mov	r0, r3
 800c68c:	f7ff fcd5 	bl	800c03a <get_ldnumber>
 800c690:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c692:	69fb      	ldr	r3, [r7, #28]
 800c694:	2b00      	cmp	r3, #0
 800c696:	da01      	bge.n	800c69c <f_mount+0x28>
 800c698:	230b      	movs	r3, #11
 800c69a:	e02b      	b.n	800c6f4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c69c:	4a17      	ldr	r2, [pc, #92]	; (800c6fc <f_mount+0x88>)
 800c69e:	69fb      	ldr	r3, [r7, #28]
 800c6a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6a4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c6a6:	69bb      	ldr	r3, [r7, #24]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d005      	beq.n	800c6b8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c6ac:	69b8      	ldr	r0, [r7, #24]
 800c6ae:	f7fe fd89 	bl	800b1c4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c6b2:	69bb      	ldr	r3, [r7, #24]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d002      	beq.n	800c6c4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c6c4:	68fa      	ldr	r2, [r7, #12]
 800c6c6:	490d      	ldr	r1, [pc, #52]	; (800c6fc <f_mount+0x88>)
 800c6c8:	69fb      	ldr	r3, [r7, #28]
 800c6ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d002      	beq.n	800c6da <f_mount+0x66>
 800c6d4:	79fb      	ldrb	r3, [r7, #7]
 800c6d6:	2b01      	cmp	r3, #1
 800c6d8:	d001      	beq.n	800c6de <f_mount+0x6a>
 800c6da:	2300      	movs	r3, #0
 800c6dc:	e00a      	b.n	800c6f4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c6de:	f107 010c 	add.w	r1, r7, #12
 800c6e2:	f107 0308 	add.w	r3, r7, #8
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f7ff fd41 	bl	800c170 <find_volume>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c6f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3720      	adds	r7, #32
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}
 800c6fc:	20001684 	.word	0x20001684

0800c700 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b098      	sub	sp, #96	; 0x60
 800c704:	af00      	add	r7, sp, #0
 800c706:	60f8      	str	r0, [r7, #12]
 800c708:	60b9      	str	r1, [r7, #8]
 800c70a:	4613      	mov	r3, r2
 800c70c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d101      	bne.n	800c718 <f_open+0x18>
 800c714:	2309      	movs	r3, #9
 800c716:	e1ad      	b.n	800ca74 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c718:	79fb      	ldrb	r3, [r7, #7]
 800c71a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c71e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c720:	79fa      	ldrb	r2, [r7, #7]
 800c722:	f107 0110 	add.w	r1, r7, #16
 800c726:	f107 0308 	add.w	r3, r7, #8
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7ff fd20 	bl	800c170 <find_volume>
 800c730:	4603      	mov	r3, r0
 800c732:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800c736:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	f040 8191 	bne.w	800ca62 <f_open+0x362>
		dj.obj.fs = fs;
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c744:	68ba      	ldr	r2, [r7, #8]
 800c746:	f107 0314 	add.w	r3, r7, #20
 800c74a:	4611      	mov	r1, r2
 800c74c:	4618      	mov	r0, r3
 800c74e:	f7ff fc03 	bl	800bf58 <follow_path>
 800c752:	4603      	mov	r3, r0
 800c754:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c758:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d11a      	bne.n	800c796 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c760:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c764:	b25b      	sxtb	r3, r3
 800c766:	2b00      	cmp	r3, #0
 800c768:	da03      	bge.n	800c772 <f_open+0x72>
				res = FR_INVALID_NAME;
 800c76a:	2306      	movs	r3, #6
 800c76c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c770:	e011      	b.n	800c796 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c772:	79fb      	ldrb	r3, [r7, #7]
 800c774:	f023 0301 	bic.w	r3, r3, #1
 800c778:	2b00      	cmp	r3, #0
 800c77a:	bf14      	ite	ne
 800c77c:	2301      	movne	r3, #1
 800c77e:	2300      	moveq	r3, #0
 800c780:	b2db      	uxtb	r3, r3
 800c782:	461a      	mov	r2, r3
 800c784:	f107 0314 	add.w	r3, r7, #20
 800c788:	4611      	mov	r1, r2
 800c78a:	4618      	mov	r0, r3
 800c78c:	f7fe fbd2 	bl	800af34 <chk_lock>
 800c790:	4603      	mov	r3, r0
 800c792:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c796:	79fb      	ldrb	r3, [r7, #7]
 800c798:	f003 031c 	and.w	r3, r3, #28
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d07f      	beq.n	800c8a0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c7a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d017      	beq.n	800c7d8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c7a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7ac:	2b04      	cmp	r3, #4
 800c7ae:	d10e      	bne.n	800c7ce <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c7b0:	f7fe fc1c 	bl	800afec <enq_lock>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d006      	beq.n	800c7c8 <f_open+0xc8>
 800c7ba:	f107 0314 	add.w	r3, r7, #20
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f7ff fb03 	bl	800bdca <dir_register>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	e000      	b.n	800c7ca <f_open+0xca>
 800c7c8:	2312      	movs	r3, #18
 800c7ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c7ce:	79fb      	ldrb	r3, [r7, #7]
 800c7d0:	f043 0308 	orr.w	r3, r3, #8
 800c7d4:	71fb      	strb	r3, [r7, #7]
 800c7d6:	e010      	b.n	800c7fa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c7d8:	7ebb      	ldrb	r3, [r7, #26]
 800c7da:	f003 0311 	and.w	r3, r3, #17
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d003      	beq.n	800c7ea <f_open+0xea>
					res = FR_DENIED;
 800c7e2:	2307      	movs	r3, #7
 800c7e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c7e8:	e007      	b.n	800c7fa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c7ea:	79fb      	ldrb	r3, [r7, #7]
 800c7ec:	f003 0304 	and.w	r3, r3, #4
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d002      	beq.n	800c7fa <f_open+0xfa>
 800c7f4:	2308      	movs	r3, #8
 800c7f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c7fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d168      	bne.n	800c8d4 <f_open+0x1d4>
 800c802:	79fb      	ldrb	r3, [r7, #7]
 800c804:	f003 0308 	and.w	r3, r3, #8
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d063      	beq.n	800c8d4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800c80c:	f7fb f8e6 	bl	80079dc <get_fattime>
 800c810:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c814:	330e      	adds	r3, #14
 800c816:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c818:	4618      	mov	r0, r3
 800c81a:	f7fe fae1 	bl	800ade0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c81e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c820:	3316      	adds	r3, #22
 800c822:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c824:	4618      	mov	r0, r3
 800c826:	f7fe fadb 	bl	800ade0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c82a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c82c:	330b      	adds	r3, #11
 800c82e:	2220      	movs	r2, #32
 800c830:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c836:	4611      	mov	r1, r2
 800c838:	4618      	mov	r0, r3
 800c83a:	f7ff fa32 	bl	800bca2 <ld_clust>
 800c83e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c844:	2200      	movs	r2, #0
 800c846:	4618      	mov	r0, r3
 800c848:	f7ff fa4a 	bl	800bce0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c84e:	331c      	adds	r3, #28
 800c850:	2100      	movs	r1, #0
 800c852:	4618      	mov	r0, r3
 800c854:	f7fe fac4 	bl	800ade0 <st_dword>
					fs->wflag = 1;
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	2201      	movs	r2, #1
 800c85c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c85e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c860:	2b00      	cmp	r3, #0
 800c862:	d037      	beq.n	800c8d4 <f_open+0x1d4>
						dw = fs->winsect;
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c868:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c86a:	f107 0314 	add.w	r3, r7, #20
 800c86e:	2200      	movs	r2, #0
 800c870:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c872:	4618      	mov	r0, r3
 800c874:	f7fe ff5d 	bl	800b732 <remove_chain>
 800c878:	4603      	mov	r3, r0
 800c87a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800c87e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c882:	2b00      	cmp	r3, #0
 800c884:	d126      	bne.n	800c8d4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7fe fd02 	bl	800b294 <move_window>
 800c890:	4603      	mov	r3, r0
 800c892:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c89a:	3a01      	subs	r2, #1
 800c89c:	60da      	str	r2, [r3, #12]
 800c89e:	e019      	b.n	800c8d4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c8a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d115      	bne.n	800c8d4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c8a8:	7ebb      	ldrb	r3, [r7, #26]
 800c8aa:	f003 0310 	and.w	r3, r3, #16
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d003      	beq.n	800c8ba <f_open+0x1ba>
					res = FR_NO_FILE;
 800c8b2:	2304      	movs	r3, #4
 800c8b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c8b8:	e00c      	b.n	800c8d4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c8ba:	79fb      	ldrb	r3, [r7, #7]
 800c8bc:	f003 0302 	and.w	r3, r3, #2
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d007      	beq.n	800c8d4 <f_open+0x1d4>
 800c8c4:	7ebb      	ldrb	r3, [r7, #26]
 800c8c6:	f003 0301 	and.w	r3, r3, #1
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d002      	beq.n	800c8d4 <f_open+0x1d4>
						res = FR_DENIED;
 800c8ce:	2307      	movs	r3, #7
 800c8d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c8d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d128      	bne.n	800c92e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c8dc:	79fb      	ldrb	r3, [r7, #7]
 800c8de:	f003 0308 	and.w	r3, r3, #8
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d003      	beq.n	800c8ee <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c8e6:	79fb      	ldrb	r3, [r7, #7]
 800c8e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8ec:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c8f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c8fc:	79fb      	ldrb	r3, [r7, #7]
 800c8fe:	f023 0301 	bic.w	r3, r3, #1
 800c902:	2b00      	cmp	r3, #0
 800c904:	bf14      	ite	ne
 800c906:	2301      	movne	r3, #1
 800c908:	2300      	moveq	r3, #0
 800c90a:	b2db      	uxtb	r3, r3
 800c90c:	461a      	mov	r2, r3
 800c90e:	f107 0314 	add.w	r3, r7, #20
 800c912:	4611      	mov	r1, r2
 800c914:	4618      	mov	r0, r3
 800c916:	f7fe fb8b 	bl	800b030 <inc_lock>
 800c91a:	4602      	mov	r2, r0
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	691b      	ldr	r3, [r3, #16]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d102      	bne.n	800c92e <f_open+0x22e>
 800c928:	2302      	movs	r3, #2
 800c92a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c92e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c932:	2b00      	cmp	r3, #0
 800c934:	f040 8095 	bne.w	800ca62 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c93c:	4611      	mov	r1, r2
 800c93e:	4618      	mov	r0, r3
 800c940:	f7ff f9af 	bl	800bca2 <ld_clust>
 800c944:	4602      	mov	r2, r0
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c94a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c94c:	331c      	adds	r3, #28
 800c94e:	4618      	mov	r0, r3
 800c950:	f7fe fa08 	bl	800ad64 <ld_dword>
 800c954:	4602      	mov	r2, r0
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	2200      	movs	r2, #0
 800c95e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c960:	693a      	ldr	r2, [r7, #16]
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	88da      	ldrh	r2, [r3, #6]
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	79fa      	ldrb	r2, [r7, #7]
 800c972:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	2200      	movs	r2, #0
 800c978:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2200      	movs	r2, #0
 800c97e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	2200      	movs	r2, #0
 800c984:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	3330      	adds	r3, #48	; 0x30
 800c98a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c98e:	2100      	movs	r1, #0
 800c990:	4618      	mov	r0, r3
 800c992:	f7fe fa72 	bl	800ae7a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c996:	79fb      	ldrb	r3, [r7, #7]
 800c998:	f003 0320 	and.w	r3, r3, #32
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d060      	beq.n	800ca62 <f_open+0x362>
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	68db      	ldr	r3, [r3, #12]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d05c      	beq.n	800ca62 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	68da      	ldr	r2, [r3, #12]
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	895b      	ldrh	r3, [r3, #10]
 800c9b4:	025b      	lsls	r3, r3, #9
 800c9b6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	689b      	ldr	r3, [r3, #8]
 800c9bc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	68db      	ldr	r3, [r3, #12]
 800c9c2:	657b      	str	r3, [r7, #84]	; 0x54
 800c9c4:	e016      	b.n	800c9f4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f7fe fd1d 	bl	800b40a <get_fat>
 800c9d0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c9d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9d4:	2b01      	cmp	r3, #1
 800c9d6:	d802      	bhi.n	800c9de <f_open+0x2de>
 800c9d8:	2302      	movs	r3, #2
 800c9da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c9de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9e4:	d102      	bne.n	800c9ec <f_open+0x2ec>
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c9ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c9ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9f0:	1ad3      	subs	r3, r2, r3
 800c9f2:	657b      	str	r3, [r7, #84]	; 0x54
 800c9f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d103      	bne.n	800ca04 <f_open+0x304>
 800c9fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c9fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d8e0      	bhi.n	800c9c6 <f_open+0x2c6>
				}
				fp->clust = clst;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca08:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ca0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d127      	bne.n	800ca62 <f_open+0x362>
 800ca12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d022      	beq.n	800ca62 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7fe fcd3 	bl	800b3cc <clust2sect>
 800ca26:	6478      	str	r0, [r7, #68]	; 0x44
 800ca28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d103      	bne.n	800ca36 <f_open+0x336>
						res = FR_INT_ERR;
 800ca2e:	2302      	movs	r3, #2
 800ca30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ca34:	e015      	b.n	800ca62 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ca36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca38:	0a5a      	lsrs	r2, r3, #9
 800ca3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca3c:	441a      	add	r2, r3
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	7858      	ldrb	r0, [r3, #1]
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	6a1a      	ldr	r2, [r3, #32]
 800ca50:	2301      	movs	r3, #1
 800ca52:	f7fe f911 	bl	800ac78 <disk_read>
 800ca56:	4603      	mov	r3, r0
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d002      	beq.n	800ca62 <f_open+0x362>
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ca62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d002      	beq.n	800ca70 <f_open+0x370>
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ca70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3760      	adds	r7, #96	; 0x60
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b08e      	sub	sp, #56	; 0x38
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	60f8      	str	r0, [r7, #12]
 800ca84:	60b9      	str	r1, [r7, #8]
 800ca86:	607a      	str	r2, [r7, #4]
 800ca88:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	2200      	movs	r2, #0
 800ca92:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	f107 0214 	add.w	r2, r7, #20
 800ca9a:	4611      	mov	r1, r2
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7ff fdb3 	bl	800c608 <validate>
 800caa2:	4603      	mov	r3, r0
 800caa4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800caa8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800caac:	2b00      	cmp	r3, #0
 800caae:	d107      	bne.n	800cac0 <f_read+0x44>
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	7d5b      	ldrb	r3, [r3, #21]
 800cab4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800cab8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d002      	beq.n	800cac6 <f_read+0x4a>
 800cac0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cac4:	e115      	b.n	800ccf2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	7d1b      	ldrb	r3, [r3, #20]
 800caca:	f003 0301 	and.w	r3, r3, #1
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d101      	bne.n	800cad6 <f_read+0x5a>
 800cad2:	2307      	movs	r3, #7
 800cad4:	e10d      	b.n	800ccf2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	68da      	ldr	r2, [r3, #12]
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	699b      	ldr	r3, [r3, #24]
 800cade:	1ad3      	subs	r3, r2, r3
 800cae0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800cae2:	687a      	ldr	r2, [r7, #4]
 800cae4:	6a3b      	ldr	r3, [r7, #32]
 800cae6:	429a      	cmp	r2, r3
 800cae8:	f240 80fe 	bls.w	800cce8 <f_read+0x26c>
 800caec:	6a3b      	ldr	r3, [r7, #32]
 800caee:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800caf0:	e0fa      	b.n	800cce8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	699b      	ldr	r3, [r3, #24]
 800caf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	f040 80c6 	bne.w	800cc8c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	699b      	ldr	r3, [r3, #24]
 800cb04:	0a5b      	lsrs	r3, r3, #9
 800cb06:	697a      	ldr	r2, [r7, #20]
 800cb08:	8952      	ldrh	r2, [r2, #10]
 800cb0a:	3a01      	subs	r2, #1
 800cb0c:	4013      	ands	r3, r2
 800cb0e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800cb10:	69fb      	ldr	r3, [r7, #28]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d12f      	bne.n	800cb76 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	699b      	ldr	r3, [r3, #24]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d103      	bne.n	800cb26 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	689b      	ldr	r3, [r3, #8]
 800cb22:	633b      	str	r3, [r7, #48]	; 0x30
 800cb24:	e013      	b.n	800cb4e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d007      	beq.n	800cb3e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	699b      	ldr	r3, [r3, #24]
 800cb32:	4619      	mov	r1, r3
 800cb34:	68f8      	ldr	r0, [r7, #12]
 800cb36:	f7fe fef9 	bl	800b92c <clmt_clust>
 800cb3a:	6338      	str	r0, [r7, #48]	; 0x30
 800cb3c:	e007      	b.n	800cb4e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800cb3e:	68fa      	ldr	r2, [r7, #12]
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	69db      	ldr	r3, [r3, #28]
 800cb44:	4619      	mov	r1, r3
 800cb46:	4610      	mov	r0, r2
 800cb48:	f7fe fc5f 	bl	800b40a <get_fat>
 800cb4c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800cb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	d804      	bhi.n	800cb5e <f_read+0xe2>
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2202      	movs	r2, #2
 800cb58:	755a      	strb	r2, [r3, #21]
 800cb5a:	2302      	movs	r3, #2
 800cb5c:	e0c9      	b.n	800ccf2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb64:	d104      	bne.n	800cb70 <f_read+0xf4>
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	2201      	movs	r2, #1
 800cb6a:	755a      	strb	r2, [r3, #21]
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	e0c0      	b.n	800ccf2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb74:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cb76:	697a      	ldr	r2, [r7, #20]
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	69db      	ldr	r3, [r3, #28]
 800cb7c:	4619      	mov	r1, r3
 800cb7e:	4610      	mov	r0, r2
 800cb80:	f7fe fc24 	bl	800b3cc <clust2sect>
 800cb84:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cb86:	69bb      	ldr	r3, [r7, #24]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d104      	bne.n	800cb96 <f_read+0x11a>
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2202      	movs	r2, #2
 800cb90:	755a      	strb	r2, [r3, #21]
 800cb92:	2302      	movs	r3, #2
 800cb94:	e0ad      	b.n	800ccf2 <f_read+0x276>
			sect += csect;
 800cb96:	69ba      	ldr	r2, [r7, #24]
 800cb98:	69fb      	ldr	r3, [r7, #28]
 800cb9a:	4413      	add	r3, r2
 800cb9c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	0a5b      	lsrs	r3, r3, #9
 800cba2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800cba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d039      	beq.n	800cc1e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cbaa:	69fa      	ldr	r2, [r7, #28]
 800cbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbae:	4413      	add	r3, r2
 800cbb0:	697a      	ldr	r2, [r7, #20]
 800cbb2:	8952      	ldrh	r2, [r2, #10]
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d905      	bls.n	800cbc4 <f_read+0x148>
					cc = fs->csize - csect;
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	895b      	ldrh	r3, [r3, #10]
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	69fb      	ldr	r3, [r7, #28]
 800cbc0:	1ad3      	subs	r3, r2, r3
 800cbc2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	7858      	ldrb	r0, [r3, #1]
 800cbc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbca:	69ba      	ldr	r2, [r7, #24]
 800cbcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cbce:	f7fe f853 	bl	800ac78 <disk_read>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d004      	beq.n	800cbe2 <f_read+0x166>
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	2201      	movs	r2, #1
 800cbdc:	755a      	strb	r2, [r3, #21]
 800cbde:	2301      	movs	r3, #1
 800cbe0:	e087      	b.n	800ccf2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	7d1b      	ldrb	r3, [r3, #20]
 800cbe6:	b25b      	sxtb	r3, r3
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	da14      	bge.n	800cc16 <f_read+0x19a>
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	6a1a      	ldr	r2, [r3, #32]
 800cbf0:	69bb      	ldr	r3, [r7, #24]
 800cbf2:	1ad3      	subs	r3, r2, r3
 800cbf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	d90d      	bls.n	800cc16 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	6a1a      	ldr	r2, [r3, #32]
 800cbfe:	69bb      	ldr	r3, [r7, #24]
 800cc00:	1ad3      	subs	r3, r2, r3
 800cc02:	025b      	lsls	r3, r3, #9
 800cc04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc06:	18d0      	adds	r0, r2, r3
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	3330      	adds	r3, #48	; 0x30
 800cc0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc10:	4619      	mov	r1, r3
 800cc12:	f7fe f911 	bl	800ae38 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800cc16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc18:	025b      	lsls	r3, r3, #9
 800cc1a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800cc1c:	e050      	b.n	800ccc0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	6a1b      	ldr	r3, [r3, #32]
 800cc22:	69ba      	ldr	r2, [r7, #24]
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d02e      	beq.n	800cc86 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	7d1b      	ldrb	r3, [r3, #20]
 800cc2c:	b25b      	sxtb	r3, r3
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	da18      	bge.n	800cc64 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	7858      	ldrb	r0, [r3, #1]
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	6a1a      	ldr	r2, [r3, #32]
 800cc40:	2301      	movs	r3, #1
 800cc42:	f7fe f839 	bl	800acb8 <disk_write>
 800cc46:	4603      	mov	r3, r0
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d004      	beq.n	800cc56 <f_read+0x1da>
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2201      	movs	r2, #1
 800cc50:	755a      	strb	r2, [r3, #21]
 800cc52:	2301      	movs	r3, #1
 800cc54:	e04d      	b.n	800ccf2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	7d1b      	ldrb	r3, [r3, #20]
 800cc5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc5e:	b2da      	uxtb	r2, r3
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	7858      	ldrb	r0, [r3, #1]
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cc6e:	2301      	movs	r3, #1
 800cc70:	69ba      	ldr	r2, [r7, #24]
 800cc72:	f7fe f801 	bl	800ac78 <disk_read>
 800cc76:	4603      	mov	r3, r0
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d004      	beq.n	800cc86 <f_read+0x20a>
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	2201      	movs	r2, #1
 800cc80:	755a      	strb	r2, [r3, #21]
 800cc82:	2301      	movs	r3, #1
 800cc84:	e035      	b.n	800ccf2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	69ba      	ldr	r2, [r7, #24]
 800cc8a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	699b      	ldr	r3, [r3, #24]
 800cc90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc94:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800cc98:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800cc9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d901      	bls.n	800cca6 <f_read+0x22a>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	699b      	ldr	r3, [r3, #24]
 800ccb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccb4:	4413      	add	r3, r2
 800ccb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccb8:	4619      	mov	r1, r3
 800ccba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ccbc:	f7fe f8bc 	bl	800ae38 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ccc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc4:	4413      	add	r3, r2
 800ccc6:	627b      	str	r3, [r7, #36]	; 0x24
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	699a      	ldr	r2, [r3, #24]
 800cccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccce:	441a      	add	r2, r3
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	619a      	str	r2, [r3, #24]
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	681a      	ldr	r2, [r3, #0]
 800ccd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccda:	441a      	add	r2, r3
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	601a      	str	r2, [r3, #0]
 800cce0:	687a      	ldr	r2, [r7, #4]
 800cce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce4:	1ad3      	subs	r3, r2, r3
 800cce6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	f47f af01 	bne.w	800caf2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ccf0:	2300      	movs	r3, #0
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3738      	adds	r7, #56	; 0x38
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}

0800ccfa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ccfa:	b580      	push	{r7, lr}
 800ccfc:	b086      	sub	sp, #24
 800ccfe:	af00      	add	r7, sp, #0
 800cd00:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f107 0208 	add.w	r2, r7, #8
 800cd08:	4611      	mov	r1, r2
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7ff fc7c 	bl	800c608 <validate>
 800cd10:	4603      	mov	r3, r0
 800cd12:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cd14:	7dfb      	ldrb	r3, [r7, #23]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d168      	bne.n	800cdec <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	7d1b      	ldrb	r3, [r3, #20]
 800cd1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d062      	beq.n	800cdec <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	7d1b      	ldrb	r3, [r3, #20]
 800cd2a:	b25b      	sxtb	r3, r3
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	da15      	bge.n	800cd5c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	7858      	ldrb	r0, [r3, #1]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6a1a      	ldr	r2, [r3, #32]
 800cd3e:	2301      	movs	r3, #1
 800cd40:	f7fd ffba 	bl	800acb8 <disk_write>
 800cd44:	4603      	mov	r3, r0
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d001      	beq.n	800cd4e <f_sync+0x54>
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	e04f      	b.n	800cdee <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	7d1b      	ldrb	r3, [r3, #20]
 800cd52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd56:	b2da      	uxtb	r2, r3
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cd5c:	f7fa fe3e 	bl	80079dc <get_fattime>
 800cd60:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800cd62:	68ba      	ldr	r2, [r7, #8]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd68:	4619      	mov	r1, r3
 800cd6a:	4610      	mov	r0, r2
 800cd6c:	f7fe fa92 	bl	800b294 <move_window>
 800cd70:	4603      	mov	r3, r0
 800cd72:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800cd74:	7dfb      	ldrb	r3, [r7, #23]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d138      	bne.n	800cdec <f_sync+0xf2>
					dir = fp->dir_ptr;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd7e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	330b      	adds	r3, #11
 800cd84:	781a      	ldrb	r2, [r3, #0]
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	330b      	adds	r3, #11
 800cd8a:	f042 0220 	orr.w	r2, r2, #32
 800cd8e:	b2d2      	uxtb	r2, r2
 800cd90:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6818      	ldr	r0, [r3, #0]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	689b      	ldr	r3, [r3, #8]
 800cd9a:	461a      	mov	r2, r3
 800cd9c:	68f9      	ldr	r1, [r7, #12]
 800cd9e:	f7fe ff9f 	bl	800bce0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	f103 021c 	add.w	r2, r3, #28
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	68db      	ldr	r3, [r3, #12]
 800cdac:	4619      	mov	r1, r3
 800cdae:	4610      	mov	r0, r2
 800cdb0:	f7fe f816 	bl	800ade0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	3316      	adds	r3, #22
 800cdb8:	6939      	ldr	r1, [r7, #16]
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f7fe f810 	bl	800ade0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	3312      	adds	r3, #18
 800cdc4:	2100      	movs	r1, #0
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f7fd ffef 	bl	800adaa <st_word>
					fs->wflag = 1;
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	2201      	movs	r2, #1
 800cdd0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f7fe fa8b 	bl	800b2f0 <sync_fs>
 800cdda:	4603      	mov	r3, r0
 800cddc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	7d1b      	ldrb	r3, [r3, #20]
 800cde2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cde6:	b2da      	uxtb	r2, r3
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cdec:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3718      	adds	r7, #24
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}

0800cdf6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cdf6:	b580      	push	{r7, lr}
 800cdf8:	b084      	sub	sp, #16
 800cdfa:	af00      	add	r7, sp, #0
 800cdfc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f7ff ff7b 	bl	800ccfa <f_sync>
 800ce04:	4603      	mov	r3, r0
 800ce06:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ce08:	7bfb      	ldrb	r3, [r7, #15]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d118      	bne.n	800ce40 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f107 0208 	add.w	r2, r7, #8
 800ce14:	4611      	mov	r1, r2
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7ff fbf6 	bl	800c608 <validate>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ce20:	7bfb      	ldrb	r3, [r7, #15]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d10c      	bne.n	800ce40 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	691b      	ldr	r3, [r3, #16]
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f7fe f98e 	bl	800b14c <dec_lock>
 800ce30:	4603      	mov	r3, r0
 800ce32:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ce34:	7bfb      	ldrb	r3, [r7, #15]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d102      	bne.n	800ce40 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ce40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3710      	adds	r7, #16
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}

0800ce4a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800ce4a:	b580      	push	{r7, lr}
 800ce4c:	b090      	sub	sp, #64	; 0x40
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	6078      	str	r0, [r7, #4]
 800ce52:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f107 0208 	add.w	r2, r7, #8
 800ce5a:	4611      	mov	r1, r2
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f7ff fbd3 	bl	800c608 <validate>
 800ce62:	4603      	mov	r3, r0
 800ce64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ce68:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d103      	bne.n	800ce78 <f_lseek+0x2e>
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	7d5b      	ldrb	r3, [r3, #21]
 800ce74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ce78:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d002      	beq.n	800ce86 <f_lseek+0x3c>
 800ce80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ce84:	e1e6      	b.n	800d254 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	f000 80d1 	beq.w	800d032 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce96:	d15a      	bne.n	800cf4e <f_lseek+0x104>
			tbl = fp->cltbl;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce9c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ce9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea0:	1d1a      	adds	r2, r3, #4
 800cea2:	627a      	str	r2, [r7, #36]	; 0x24
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	617b      	str	r3, [r7, #20]
 800cea8:	2302      	movs	r3, #2
 800ceaa:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	689b      	ldr	r3, [r3, #8]
 800ceb0:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800ceb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d03a      	beq.n	800cf2e <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ceb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceba:	613b      	str	r3, [r7, #16]
 800cebc:	2300      	movs	r3, #0
 800cebe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec2:	3302      	adds	r3, #2
 800cec4:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800cec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec8:	60fb      	str	r3, [r7, #12]
 800ceca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cecc:	3301      	adds	r3, #1
 800cece:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ced4:	4618      	mov	r0, r3
 800ced6:	f7fe fa98 	bl	800b40a <get_fat>
 800ceda:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800cedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cede:	2b01      	cmp	r3, #1
 800cee0:	d804      	bhi.n	800ceec <f_lseek+0xa2>
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2202      	movs	r2, #2
 800cee6:	755a      	strb	r2, [r3, #21]
 800cee8:	2302      	movs	r3, #2
 800ceea:	e1b3      	b.n	800d254 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ceec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cef2:	d104      	bne.n	800cefe <f_lseek+0xb4>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2201      	movs	r2, #1
 800cef8:	755a      	strb	r2, [r3, #21]
 800cefa:	2301      	movs	r3, #1
 800cefc:	e1aa      	b.n	800d254 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	3301      	adds	r3, #1
 800cf02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d0de      	beq.n	800cec6 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800cf08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d809      	bhi.n	800cf24 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800cf10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf12:	1d1a      	adds	r2, r3, #4
 800cf14:	627a      	str	r2, [r7, #36]	; 0x24
 800cf16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf18:	601a      	str	r2, [r3, #0]
 800cf1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1c:	1d1a      	adds	r2, r3, #4
 800cf1e:	627a      	str	r2, [r7, #36]	; 0x24
 800cf20:	693a      	ldr	r2, [r7, #16]
 800cf22:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	695b      	ldr	r3, [r3, #20]
 800cf28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d3c4      	bcc.n	800ceb8 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf34:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800cf36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d803      	bhi.n	800cf46 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800cf3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf40:	2200      	movs	r2, #0
 800cf42:	601a      	str	r2, [r3, #0]
 800cf44:	e184      	b.n	800d250 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800cf46:	2311      	movs	r3, #17
 800cf48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800cf4c:	e180      	b.n	800d250 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	68db      	ldr	r3, [r3, #12]
 800cf52:	683a      	ldr	r2, [r7, #0]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d902      	bls.n	800cf5e <f_lseek+0x114>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	68db      	ldr	r3, [r3, #12]
 800cf5c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	683a      	ldr	r2, [r7, #0]
 800cf62:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	f000 8172 	beq.w	800d250 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	3b01      	subs	r3, #1
 800cf70:	4619      	mov	r1, r3
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f7fe fcda 	bl	800b92c <clmt_clust>
 800cf78:	4602      	mov	r2, r0
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800cf7e:	68ba      	ldr	r2, [r7, #8]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	69db      	ldr	r3, [r3, #28]
 800cf84:	4619      	mov	r1, r3
 800cf86:	4610      	mov	r0, r2
 800cf88:	f7fe fa20 	bl	800b3cc <clust2sect>
 800cf8c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800cf8e:	69bb      	ldr	r3, [r7, #24]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d104      	bne.n	800cf9e <f_lseek+0x154>
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2202      	movs	r2, #2
 800cf98:	755a      	strb	r2, [r3, #21]
 800cf9a:	2302      	movs	r3, #2
 800cf9c:	e15a      	b.n	800d254 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	3b01      	subs	r3, #1
 800cfa2:	0a5b      	lsrs	r3, r3, #9
 800cfa4:	68ba      	ldr	r2, [r7, #8]
 800cfa6:	8952      	ldrh	r2, [r2, #10]
 800cfa8:	3a01      	subs	r2, #1
 800cfaa:	4013      	ands	r3, r2
 800cfac:	69ba      	ldr	r2, [r7, #24]
 800cfae:	4413      	add	r3, r2
 800cfb0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	699b      	ldr	r3, [r3, #24]
 800cfb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	f000 8148 	beq.w	800d250 <f_lseek+0x406>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6a1b      	ldr	r3, [r3, #32]
 800cfc4:	69ba      	ldr	r2, [r7, #24]
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	f000 8142 	beq.w	800d250 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	7d1b      	ldrb	r3, [r3, #20]
 800cfd0:	b25b      	sxtb	r3, r3
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	da18      	bge.n	800d008 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	7858      	ldrb	r0, [r3, #1]
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6a1a      	ldr	r2, [r3, #32]
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	f7fd fe67 	bl	800acb8 <disk_write>
 800cfea:	4603      	mov	r3, r0
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d004      	beq.n	800cffa <f_lseek+0x1b0>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2201      	movs	r2, #1
 800cff4:	755a      	strb	r2, [r3, #21]
 800cff6:	2301      	movs	r3, #1
 800cff8:	e12c      	b.n	800d254 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	7d1b      	ldrb	r3, [r3, #20]
 800cffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d002:	b2da      	uxtb	r2, r3
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	7858      	ldrb	r0, [r3, #1]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d012:	2301      	movs	r3, #1
 800d014:	69ba      	ldr	r2, [r7, #24]
 800d016:	f7fd fe2f 	bl	800ac78 <disk_read>
 800d01a:	4603      	mov	r3, r0
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d004      	beq.n	800d02a <f_lseek+0x1e0>
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2201      	movs	r2, #1
 800d024:	755a      	strb	r2, [r3, #21]
 800d026:	2301      	movs	r3, #1
 800d028:	e114      	b.n	800d254 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	69ba      	ldr	r2, [r7, #24]
 800d02e:	621a      	str	r2, [r3, #32]
 800d030:	e10e      	b.n	800d250 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	68db      	ldr	r3, [r3, #12]
 800d036:	683a      	ldr	r2, [r7, #0]
 800d038:	429a      	cmp	r2, r3
 800d03a:	d908      	bls.n	800d04e <f_lseek+0x204>
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	7d1b      	ldrb	r3, [r3, #20]
 800d040:	f003 0302 	and.w	r3, r3, #2
 800d044:	2b00      	cmp	r3, #0
 800d046:	d102      	bne.n	800d04e <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	68db      	ldr	r3, [r3, #12]
 800d04c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	699b      	ldr	r3, [r3, #24]
 800d052:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d054:	2300      	movs	r3, #0
 800d056:	637b      	str	r3, [r7, #52]	; 0x34
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d05c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	2b00      	cmp	r3, #0
 800d062:	f000 80a7 	beq.w	800d1b4 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	895b      	ldrh	r3, [r3, #10]
 800d06a:	025b      	lsls	r3, r3, #9
 800d06c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d06e:	6a3b      	ldr	r3, [r7, #32]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d01b      	beq.n	800d0ac <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	1e5a      	subs	r2, r3, #1
 800d078:	69fb      	ldr	r3, [r7, #28]
 800d07a:	fbb2 f2f3 	udiv	r2, r2, r3
 800d07e:	6a3b      	ldr	r3, [r7, #32]
 800d080:	1e59      	subs	r1, r3, #1
 800d082:	69fb      	ldr	r3, [r7, #28]
 800d084:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d088:	429a      	cmp	r2, r3
 800d08a:	d30f      	bcc.n	800d0ac <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800d08c:	6a3b      	ldr	r3, [r7, #32]
 800d08e:	1e5a      	subs	r2, r3, #1
 800d090:	69fb      	ldr	r3, [r7, #28]
 800d092:	425b      	negs	r3, r3
 800d094:	401a      	ands	r2, r3
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	699b      	ldr	r3, [r3, #24]
 800d09e:	683a      	ldr	r2, [r7, #0]
 800d0a0:	1ad3      	subs	r3, r2, r3
 800d0a2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	69db      	ldr	r3, [r3, #28]
 800d0a8:	63bb      	str	r3, [r7, #56]	; 0x38
 800d0aa:	e022      	b.n	800d0f2 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	689b      	ldr	r3, [r3, #8]
 800d0b0:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d119      	bne.n	800d0ec <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2100      	movs	r1, #0
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f7fe fb9d 	bl	800b7fc <create_chain>
 800d0c2:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c6:	2b01      	cmp	r3, #1
 800d0c8:	d104      	bne.n	800d0d4 <f_lseek+0x28a>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2202      	movs	r2, #2
 800d0ce:	755a      	strb	r2, [r3, #21]
 800d0d0:	2302      	movs	r3, #2
 800d0d2:	e0bf      	b.n	800d254 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d0da:	d104      	bne.n	800d0e6 <f_lseek+0x29c>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2201      	movs	r2, #1
 800d0e0:	755a      	strb	r2, [r3, #21]
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	e0b6      	b.n	800d254 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0ea:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0f0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800d0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d05d      	beq.n	800d1b4 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800d0f8:	e03a      	b.n	800d170 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800d0fa:	683a      	ldr	r2, [r7, #0]
 800d0fc:	69fb      	ldr	r3, [r7, #28]
 800d0fe:	1ad3      	subs	r3, r2, r3
 800d100:	603b      	str	r3, [r7, #0]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	699a      	ldr	r2, [r3, #24]
 800d106:	69fb      	ldr	r3, [r7, #28]
 800d108:	441a      	add	r2, r3
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	7d1b      	ldrb	r3, [r3, #20]
 800d112:	f003 0302 	and.w	r3, r3, #2
 800d116:	2b00      	cmp	r3, #0
 800d118:	d00b      	beq.n	800d132 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d11e:	4618      	mov	r0, r3
 800d120:	f7fe fb6c 	bl	800b7fc <create_chain>
 800d124:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d108      	bne.n	800d13e <f_lseek+0x2f4>
							ofs = 0; break;
 800d12c:	2300      	movs	r3, #0
 800d12e:	603b      	str	r3, [r7, #0]
 800d130:	e022      	b.n	800d178 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d136:	4618      	mov	r0, r3
 800d138:	f7fe f967 	bl	800b40a <get_fat>
 800d13c:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d140:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d144:	d104      	bne.n	800d150 <f_lseek+0x306>
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2201      	movs	r2, #1
 800d14a:	755a      	strb	r2, [r3, #21]
 800d14c:	2301      	movs	r3, #1
 800d14e:	e081      	b.n	800d254 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d152:	2b01      	cmp	r3, #1
 800d154:	d904      	bls.n	800d160 <f_lseek+0x316>
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	695b      	ldr	r3, [r3, #20]
 800d15a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d15c:	429a      	cmp	r2, r3
 800d15e:	d304      	bcc.n	800d16a <f_lseek+0x320>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2202      	movs	r2, #2
 800d164:	755a      	strb	r2, [r3, #21]
 800d166:	2302      	movs	r3, #2
 800d168:	e074      	b.n	800d254 <f_lseek+0x40a>
					fp->clust = clst;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d16e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800d170:	683a      	ldr	r2, [r7, #0]
 800d172:	69fb      	ldr	r3, [r7, #28]
 800d174:	429a      	cmp	r2, r3
 800d176:	d8c0      	bhi.n	800d0fa <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	699a      	ldr	r2, [r3, #24]
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	441a      	add	r2, r3
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d012      	beq.n	800d1b4 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d192:	4618      	mov	r0, r3
 800d194:	f7fe f91a 	bl	800b3cc <clust2sect>
 800d198:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d19a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d104      	bne.n	800d1aa <f_lseek+0x360>
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2202      	movs	r2, #2
 800d1a4:	755a      	strb	r2, [r3, #21]
 800d1a6:	2302      	movs	r3, #2
 800d1a8:	e054      	b.n	800d254 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	0a5b      	lsrs	r3, r3, #9
 800d1ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1b0:	4413      	add	r3, r2
 800d1b2:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	699a      	ldr	r2, [r3, #24]
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	68db      	ldr	r3, [r3, #12]
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d90a      	bls.n	800d1d6 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	699a      	ldr	r2, [r3, #24]
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	7d1b      	ldrb	r3, [r3, #20]
 800d1cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1d0:	b2da      	uxtb	r2, r3
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	699b      	ldr	r3, [r3, #24]
 800d1da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d036      	beq.n	800d250 <f_lseek+0x406>
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6a1b      	ldr	r3, [r3, #32]
 800d1e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	d031      	beq.n	800d250 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	7d1b      	ldrb	r3, [r3, #20]
 800d1f0:	b25b      	sxtb	r3, r3
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	da18      	bge.n	800d228 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	7858      	ldrb	r0, [r3, #1]
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6a1a      	ldr	r2, [r3, #32]
 800d204:	2301      	movs	r3, #1
 800d206:	f7fd fd57 	bl	800acb8 <disk_write>
 800d20a:	4603      	mov	r3, r0
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d004      	beq.n	800d21a <f_lseek+0x3d0>
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2201      	movs	r2, #1
 800d214:	755a      	strb	r2, [r3, #21]
 800d216:	2301      	movs	r3, #1
 800d218:	e01c      	b.n	800d254 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	7d1b      	ldrb	r3, [r3, #20]
 800d21e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d222:	b2da      	uxtb	r2, r3
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	7858      	ldrb	r0, [r3, #1]
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d232:	2301      	movs	r3, #1
 800d234:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d236:	f7fd fd1f 	bl	800ac78 <disk_read>
 800d23a:	4603      	mov	r3, r0
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d004      	beq.n	800d24a <f_lseek+0x400>
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2201      	movs	r2, #1
 800d244:	755a      	strb	r2, [r3, #21]
 800d246:	2301      	movs	r3, #1
 800d248:	e004      	b.n	800d254 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d24e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800d250:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d254:	4618      	mov	r0, r3
 800d256:	3740      	adds	r7, #64	; 0x40
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d25c:	b480      	push	{r7}
 800d25e:	b087      	sub	sp, #28
 800d260:	af00      	add	r7, sp, #0
 800d262:	60f8      	str	r0, [r7, #12]
 800d264:	60b9      	str	r1, [r7, #8]
 800d266:	4613      	mov	r3, r2
 800d268:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d26a:	2301      	movs	r3, #1
 800d26c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d26e:	2300      	movs	r3, #0
 800d270:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d272:	4b1f      	ldr	r3, [pc, #124]	; (800d2f0 <FATFS_LinkDriverEx+0x94>)
 800d274:	7a5b      	ldrb	r3, [r3, #9]
 800d276:	b2db      	uxtb	r3, r3
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d131      	bne.n	800d2e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d27c:	4b1c      	ldr	r3, [pc, #112]	; (800d2f0 <FATFS_LinkDriverEx+0x94>)
 800d27e:	7a5b      	ldrb	r3, [r3, #9]
 800d280:	b2db      	uxtb	r3, r3
 800d282:	461a      	mov	r2, r3
 800d284:	4b1a      	ldr	r3, [pc, #104]	; (800d2f0 <FATFS_LinkDriverEx+0x94>)
 800d286:	2100      	movs	r1, #0
 800d288:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d28a:	4b19      	ldr	r3, [pc, #100]	; (800d2f0 <FATFS_LinkDriverEx+0x94>)
 800d28c:	7a5b      	ldrb	r3, [r3, #9]
 800d28e:	b2db      	uxtb	r3, r3
 800d290:	4a17      	ldr	r2, [pc, #92]	; (800d2f0 <FATFS_LinkDriverEx+0x94>)
 800d292:	009b      	lsls	r3, r3, #2
 800d294:	4413      	add	r3, r2
 800d296:	68fa      	ldr	r2, [r7, #12]
 800d298:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d29a:	4b15      	ldr	r3, [pc, #84]	; (800d2f0 <FATFS_LinkDriverEx+0x94>)
 800d29c:	7a5b      	ldrb	r3, [r3, #9]
 800d29e:	b2db      	uxtb	r3, r3
 800d2a0:	461a      	mov	r2, r3
 800d2a2:	4b13      	ldr	r3, [pc, #76]	; (800d2f0 <FATFS_LinkDriverEx+0x94>)
 800d2a4:	4413      	add	r3, r2
 800d2a6:	79fa      	ldrb	r2, [r7, #7]
 800d2a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d2aa:	4b11      	ldr	r3, [pc, #68]	; (800d2f0 <FATFS_LinkDriverEx+0x94>)
 800d2ac:	7a5b      	ldrb	r3, [r3, #9]
 800d2ae:	b2db      	uxtb	r3, r3
 800d2b0:	1c5a      	adds	r2, r3, #1
 800d2b2:	b2d1      	uxtb	r1, r2
 800d2b4:	4a0e      	ldr	r2, [pc, #56]	; (800d2f0 <FATFS_LinkDriverEx+0x94>)
 800d2b6:	7251      	strb	r1, [r2, #9]
 800d2b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d2ba:	7dbb      	ldrb	r3, [r7, #22]
 800d2bc:	3330      	adds	r3, #48	; 0x30
 800d2be:	b2da      	uxtb	r2, r3
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	223a      	movs	r2, #58	; 0x3a
 800d2ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	3302      	adds	r3, #2
 800d2d0:	222f      	movs	r2, #47	; 0x2f
 800d2d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	3303      	adds	r3, #3
 800d2d8:	2200      	movs	r2, #0
 800d2da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d2e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	371c      	adds	r7, #28
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ec:	4770      	bx	lr
 800d2ee:	bf00      	nop
 800d2f0:	200016ac 	.word	0x200016ac

0800d2f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d2fe:	2200      	movs	r2, #0
 800d300:	6839      	ldr	r1, [r7, #0]
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f7ff ffaa 	bl	800d25c <FATFS_LinkDriverEx>
 800d308:	4603      	mov	r3, r0
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3708      	adds	r7, #8
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
	...

0800d314 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d318:	2201      	movs	r2, #1
 800d31a:	490e      	ldr	r1, [pc, #56]	; (800d354 <MX_USB_HOST_Init+0x40>)
 800d31c:	480e      	ldr	r0, [pc, #56]	; (800d358 <MX_USB_HOST_Init+0x44>)
 800d31e:	f7fc f819 	bl	8009354 <USBH_Init>
 800d322:	4603      	mov	r3, r0
 800d324:	2b00      	cmp	r3, #0
 800d326:	d001      	beq.n	800d32c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d328:	f7f3 fff8 	bl	800131c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800d32c:	490b      	ldr	r1, [pc, #44]	; (800d35c <MX_USB_HOST_Init+0x48>)
 800d32e:	480a      	ldr	r0, [pc, #40]	; (800d358 <MX_USB_HOST_Init+0x44>)
 800d330:	f7fc f89e 	bl	8009470 <USBH_RegisterClass>
 800d334:	4603      	mov	r3, r0
 800d336:	2b00      	cmp	r3, #0
 800d338:	d001      	beq.n	800d33e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d33a:	f7f3 ffef 	bl	800131c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d33e:	4806      	ldr	r0, [pc, #24]	; (800d358 <MX_USB_HOST_Init+0x44>)
 800d340:	f7fc f922 	bl	8009588 <USBH_Start>
 800d344:	4603      	mov	r3, r0
 800d346:	2b00      	cmp	r3, #0
 800d348:	d001      	beq.n	800d34e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d34a:	f7f3 ffe7 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d34e:	bf00      	nop
 800d350:	bd80      	pop	{r7, pc}
 800d352:	bf00      	nop
 800d354:	0800d375 	.word	0x0800d375
 800d358:	200016b8 	.word	0x200016b8
 800d35c:	2000000c 	.word	0x2000000c

0800d360 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800d364:	4802      	ldr	r0, [pc, #8]	; (800d370 <MX_USB_HOST_Process+0x10>)
 800d366:	f7fc f91f 	bl	80095a8 <USBH_Process>
}
 800d36a:	bf00      	nop
 800d36c:	bd80      	pop	{r7, pc}
 800d36e:	bf00      	nop
 800d370:	200016b8 	.word	0x200016b8

0800d374 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d374:	b480      	push	{r7}
 800d376:	b083      	sub	sp, #12
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	460b      	mov	r3, r1
 800d37e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d380:	78fb      	ldrb	r3, [r7, #3]
 800d382:	3b01      	subs	r3, #1
 800d384:	2b04      	cmp	r3, #4
 800d386:	d819      	bhi.n	800d3bc <USBH_UserProcess+0x48>
 800d388:	a201      	add	r2, pc, #4	; (adr r2, 800d390 <USBH_UserProcess+0x1c>)
 800d38a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d38e:	bf00      	nop
 800d390:	0800d3bd 	.word	0x0800d3bd
 800d394:	0800d3ad 	.word	0x0800d3ad
 800d398:	0800d3bd 	.word	0x0800d3bd
 800d39c:	0800d3b5 	.word	0x0800d3b5
 800d3a0:	0800d3a5 	.word	0x0800d3a5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d3a4:	4b09      	ldr	r3, [pc, #36]	; (800d3cc <USBH_UserProcess+0x58>)
 800d3a6:	2203      	movs	r2, #3
 800d3a8:	701a      	strb	r2, [r3, #0]
  break;
 800d3aa:	e008      	b.n	800d3be <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d3ac:	4b07      	ldr	r3, [pc, #28]	; (800d3cc <USBH_UserProcess+0x58>)
 800d3ae:	2202      	movs	r2, #2
 800d3b0:	701a      	strb	r2, [r3, #0]
  break;
 800d3b2:	e004      	b.n	800d3be <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d3b4:	4b05      	ldr	r3, [pc, #20]	; (800d3cc <USBH_UserProcess+0x58>)
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	701a      	strb	r2, [r3, #0]
  break;
 800d3ba:	e000      	b.n	800d3be <USBH_UserProcess+0x4a>

  default:
  break;
 800d3bc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d3be:	bf00      	nop
 800d3c0:	370c      	adds	r7, #12
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c8:	4770      	bx	lr
 800d3ca:	bf00      	nop
 800d3cc:	20001a90 	.word	0x20001a90

0800d3d0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b08a      	sub	sp, #40	; 0x28
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d3d8:	f107 0314 	add.w	r3, r7, #20
 800d3dc:	2200      	movs	r2, #0
 800d3de:	601a      	str	r2, [r3, #0]
 800d3e0:	605a      	str	r2, [r3, #4]
 800d3e2:	609a      	str	r2, [r3, #8]
 800d3e4:	60da      	str	r2, [r3, #12]
 800d3e6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d3f0:	d147      	bne.n	800d482 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	613b      	str	r3, [r7, #16]
 800d3f6:	4b25      	ldr	r3, [pc, #148]	; (800d48c <HAL_HCD_MspInit+0xbc>)
 800d3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3fa:	4a24      	ldr	r2, [pc, #144]	; (800d48c <HAL_HCD_MspInit+0xbc>)
 800d3fc:	f043 0301 	orr.w	r3, r3, #1
 800d400:	6313      	str	r3, [r2, #48]	; 0x30
 800d402:	4b22      	ldr	r3, [pc, #136]	; (800d48c <HAL_HCD_MspInit+0xbc>)
 800d404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d406:	f003 0301 	and.w	r3, r3, #1
 800d40a:	613b      	str	r3, [r7, #16]
 800d40c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800d40e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d414:	2300      	movs	r3, #0
 800d416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d418:	2300      	movs	r3, #0
 800d41a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d41c:	f107 0314 	add.w	r3, r7, #20
 800d420:	4619      	mov	r1, r3
 800d422:	481b      	ldr	r0, [pc, #108]	; (800d490 <HAL_HCD_MspInit+0xc0>)
 800d424:	f7f4 fee8 	bl	80021f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d428:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d42c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d42e:	2302      	movs	r3, #2
 800d430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d432:	2300      	movs	r3, #0
 800d434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d436:	2303      	movs	r3, #3
 800d438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d43a:	230a      	movs	r3, #10
 800d43c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d43e:	f107 0314 	add.w	r3, r7, #20
 800d442:	4619      	mov	r1, r3
 800d444:	4812      	ldr	r0, [pc, #72]	; (800d490 <HAL_HCD_MspInit+0xc0>)
 800d446:	f7f4 fed7 	bl	80021f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d44a:	4b10      	ldr	r3, [pc, #64]	; (800d48c <HAL_HCD_MspInit+0xbc>)
 800d44c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d44e:	4a0f      	ldr	r2, [pc, #60]	; (800d48c <HAL_HCD_MspInit+0xbc>)
 800d450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d454:	6353      	str	r3, [r2, #52]	; 0x34
 800d456:	2300      	movs	r3, #0
 800d458:	60fb      	str	r3, [r7, #12]
 800d45a:	4b0c      	ldr	r3, [pc, #48]	; (800d48c <HAL_HCD_MspInit+0xbc>)
 800d45c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d45e:	4a0b      	ldr	r2, [pc, #44]	; (800d48c <HAL_HCD_MspInit+0xbc>)
 800d460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d464:	6453      	str	r3, [r2, #68]	; 0x44
 800d466:	4b09      	ldr	r3, [pc, #36]	; (800d48c <HAL_HCD_MspInit+0xbc>)
 800d468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d46a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d46e:	60fb      	str	r3, [r7, #12]
 800d470:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d472:	2200      	movs	r2, #0
 800d474:	2100      	movs	r1, #0
 800d476:	2043      	movs	r0, #67	; 0x43
 800d478:	f7f4 faa7 	bl	80019ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d47c:	2043      	movs	r0, #67	; 0x43
 800d47e:	f7f4 fac0 	bl	8001a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d482:	bf00      	nop
 800d484:	3728      	adds	r7, #40	; 0x28
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}
 800d48a:	bf00      	nop
 800d48c:	40023800 	.word	0x40023800
 800d490:	40020000 	.word	0x40020000

0800d494 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b082      	sub	sp, #8
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f7fc fc5f 	bl	8009d66 <USBH_LL_IncTimer>
}
 800d4a8:	bf00      	nop
 800d4aa:	3708      	adds	r7, #8
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}

0800d4b0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b082      	sub	sp, #8
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f7fc fc97 	bl	8009df2 <USBH_LL_Connect>
}
 800d4c4:	bf00      	nop
 800d4c6:	3708      	adds	r7, #8
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b082      	sub	sp, #8
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f7fc fca0 	bl	8009e20 <USBH_LL_Disconnect>
}
 800d4e0:	bf00      	nop
 800d4e2:	3708      	adds	r7, #8
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}

0800d4e8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b083      	sub	sp, #12
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	460b      	mov	r3, r1
 800d4f2:	70fb      	strb	r3, [r7, #3]
 800d4f4:	4613      	mov	r3, r2
 800d4f6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800d4f8:	bf00      	nop
 800d4fa:	370c      	adds	r7, #12
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d502:	4770      	bx	lr

0800d504 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b082      	sub	sp, #8
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d512:	4618      	mov	r0, r3
 800d514:	f7fc fc51 	bl	8009dba <USBH_LL_PortEnabled>
}
 800d518:	bf00      	nop
 800d51a:	3708      	adds	r7, #8
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}

0800d520 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b082      	sub	sp, #8
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d52e:	4618      	mov	r0, r3
 800d530:	f7fc fc51 	bl	8009dd6 <USBH_LL_PortDisabled>
}
 800d534:	bf00      	nop
 800d536:	3708      	adds	r7, #8
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}

0800d53c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b082      	sub	sp, #8
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d54a:	2b01      	cmp	r3, #1
 800d54c:	d12a      	bne.n	800d5a4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d54e:	4a18      	ldr	r2, [pc, #96]	; (800d5b0 <USBH_LL_Init+0x74>)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	4a15      	ldr	r2, [pc, #84]	; (800d5b0 <USBH_LL_Init+0x74>)
 800d55a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d55e:	4b14      	ldr	r3, [pc, #80]	; (800d5b0 <USBH_LL_Init+0x74>)
 800d560:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d564:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800d566:	4b12      	ldr	r3, [pc, #72]	; (800d5b0 <USBH_LL_Init+0x74>)
 800d568:	2208      	movs	r2, #8
 800d56a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800d56c:	4b10      	ldr	r3, [pc, #64]	; (800d5b0 <USBH_LL_Init+0x74>)
 800d56e:	2201      	movs	r2, #1
 800d570:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d572:	4b0f      	ldr	r3, [pc, #60]	; (800d5b0 <USBH_LL_Init+0x74>)
 800d574:	2200      	movs	r2, #0
 800d576:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d578:	4b0d      	ldr	r3, [pc, #52]	; (800d5b0 <USBH_LL_Init+0x74>)
 800d57a:	2202      	movs	r2, #2
 800d57c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d57e:	4b0c      	ldr	r3, [pc, #48]	; (800d5b0 <USBH_LL_Init+0x74>)
 800d580:	2200      	movs	r2, #0
 800d582:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d584:	480a      	ldr	r0, [pc, #40]	; (800d5b0 <USBH_LL_Init+0x74>)
 800d586:	f7f5 f804 	bl	8002592 <HAL_HCD_Init>
 800d58a:	4603      	mov	r3, r0
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d001      	beq.n	800d594 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800d590:	f7f3 fec4 	bl	800131c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d594:	4806      	ldr	r0, [pc, #24]	; (800d5b0 <USBH_LL_Init+0x74>)
 800d596:	f7f5 fbe8 	bl	8002d6a <HAL_HCD_GetCurrentFrame>
 800d59a:	4603      	mov	r3, r0
 800d59c:	4619      	mov	r1, r3
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f7fc fbd2 	bl	8009d48 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d5a4:	2300      	movs	r3, #0
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3708      	adds	r7, #8
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}
 800d5ae:	bf00      	nop
 800d5b0:	20001a94 	.word	0x20001a94

0800d5b4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b084      	sub	sp, #16
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f7f5 fb57 	bl	8002c7e <HAL_HCD_Start>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d5d4:	7bfb      	ldrb	r3, [r7, #15]
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f000 f982 	bl	800d8e0 <USBH_Get_USB_Status>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3710      	adds	r7, #16
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}

0800d5ea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d5ea:	b580      	push	{r7, lr}
 800d5ec:	b084      	sub	sp, #16
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d600:	4618      	mov	r0, r3
 800d602:	f7f5 fb5f 	bl	8002cc4 <HAL_HCD_Stop>
 800d606:	4603      	mov	r3, r0
 800d608:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d60a:	7bfb      	ldrb	r3, [r7, #15]
 800d60c:	4618      	mov	r0, r3
 800d60e:	f000 f967 	bl	800d8e0 <USBH_Get_USB_Status>
 800d612:	4603      	mov	r3, r0
 800d614:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d616:	7bbb      	ldrb	r3, [r7, #14]
}
 800d618:	4618      	mov	r0, r3
 800d61a:	3710      	adds	r7, #16
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}

0800d620 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d628:	2301      	movs	r3, #1
 800d62a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d632:	4618      	mov	r0, r3
 800d634:	f7f5 fba7 	bl	8002d86 <HAL_HCD_GetCurrentSpeed>
 800d638:	4603      	mov	r3, r0
 800d63a:	2b02      	cmp	r3, #2
 800d63c:	d00c      	beq.n	800d658 <USBH_LL_GetSpeed+0x38>
 800d63e:	2b02      	cmp	r3, #2
 800d640:	d80d      	bhi.n	800d65e <USBH_LL_GetSpeed+0x3e>
 800d642:	2b00      	cmp	r3, #0
 800d644:	d002      	beq.n	800d64c <USBH_LL_GetSpeed+0x2c>
 800d646:	2b01      	cmp	r3, #1
 800d648:	d003      	beq.n	800d652 <USBH_LL_GetSpeed+0x32>
 800d64a:	e008      	b.n	800d65e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d64c:	2300      	movs	r3, #0
 800d64e:	73fb      	strb	r3, [r7, #15]
    break;
 800d650:	e008      	b.n	800d664 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d652:	2301      	movs	r3, #1
 800d654:	73fb      	strb	r3, [r7, #15]
    break;
 800d656:	e005      	b.n	800d664 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d658:	2302      	movs	r3, #2
 800d65a:	73fb      	strb	r3, [r7, #15]
    break;
 800d65c:	e002      	b.n	800d664 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d65e:	2301      	movs	r3, #1
 800d660:	73fb      	strb	r3, [r7, #15]
    break;
 800d662:	bf00      	nop
  }
  return  speed;
 800d664:	7bfb      	ldrb	r3, [r7, #15]
}
 800d666:	4618      	mov	r0, r3
 800d668:	3710      	adds	r7, #16
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}

0800d66e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d66e:	b580      	push	{r7, lr}
 800d670:	b084      	sub	sp, #16
 800d672:	af00      	add	r7, sp, #0
 800d674:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d676:	2300      	movs	r3, #0
 800d678:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d67a:	2300      	movs	r3, #0
 800d67c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d684:	4618      	mov	r0, r3
 800d686:	f7f5 fb3a 	bl	8002cfe <HAL_HCD_ResetPort>
 800d68a:	4603      	mov	r3, r0
 800d68c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d68e:	7bfb      	ldrb	r3, [r7, #15]
 800d690:	4618      	mov	r0, r3
 800d692:	f000 f925 	bl	800d8e0 <USBH_Get_USB_Status>
 800d696:	4603      	mov	r3, r0
 800d698:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d69a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3710      	adds	r7, #16
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}

0800d6a4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b082      	sub	sp, #8
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
 800d6ac:	460b      	mov	r3, r1
 800d6ae:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d6b6:	78fa      	ldrb	r2, [r7, #3]
 800d6b8:	4611      	mov	r1, r2
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7f5 fb41 	bl	8002d42 <HAL_HCD_HC_GetXferCount>
 800d6c0:	4603      	mov	r3, r0
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3708      	adds	r7, #8
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}

0800d6ca <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d6ca:	b590      	push	{r4, r7, lr}
 800d6cc:	b089      	sub	sp, #36	; 0x24
 800d6ce:	af04      	add	r7, sp, #16
 800d6d0:	6078      	str	r0, [r7, #4]
 800d6d2:	4608      	mov	r0, r1
 800d6d4:	4611      	mov	r1, r2
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	4603      	mov	r3, r0
 800d6da:	70fb      	strb	r3, [r7, #3]
 800d6dc:	460b      	mov	r3, r1
 800d6de:	70bb      	strb	r3, [r7, #2]
 800d6e0:	4613      	mov	r3, r2
 800d6e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d6f2:	787c      	ldrb	r4, [r7, #1]
 800d6f4:	78ba      	ldrb	r2, [r7, #2]
 800d6f6:	78f9      	ldrb	r1, [r7, #3]
 800d6f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d6fa:	9302      	str	r3, [sp, #8]
 800d6fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d700:	9301      	str	r3, [sp, #4]
 800d702:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d706:	9300      	str	r3, [sp, #0]
 800d708:	4623      	mov	r3, r4
 800d70a:	f7f4 ffa4 	bl	8002656 <HAL_HCD_HC_Init>
 800d70e:	4603      	mov	r3, r0
 800d710:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d712:	7bfb      	ldrb	r3, [r7, #15]
 800d714:	4618      	mov	r0, r3
 800d716:	f000 f8e3 	bl	800d8e0 <USBH_Get_USB_Status>
 800d71a:	4603      	mov	r3, r0
 800d71c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d71e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d720:	4618      	mov	r0, r3
 800d722:	3714      	adds	r7, #20
 800d724:	46bd      	mov	sp, r7
 800d726:	bd90      	pop	{r4, r7, pc}

0800d728 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b084      	sub	sp, #16
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
 800d730:	460b      	mov	r3, r1
 800d732:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d734:	2300      	movs	r3, #0
 800d736:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d738:	2300      	movs	r3, #0
 800d73a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d742:	78fa      	ldrb	r2, [r7, #3]
 800d744:	4611      	mov	r1, r2
 800d746:	4618      	mov	r0, r3
 800d748:	f7f5 f814 	bl	8002774 <HAL_HCD_HC_Halt>
 800d74c:	4603      	mov	r3, r0
 800d74e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d750:	7bfb      	ldrb	r3, [r7, #15]
 800d752:	4618      	mov	r0, r3
 800d754:	f000 f8c4 	bl	800d8e0 <USBH_Get_USB_Status>
 800d758:	4603      	mov	r3, r0
 800d75a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d75c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3710      	adds	r7, #16
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}

0800d766 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d766:	b590      	push	{r4, r7, lr}
 800d768:	b089      	sub	sp, #36	; 0x24
 800d76a:	af04      	add	r7, sp, #16
 800d76c:	6078      	str	r0, [r7, #4]
 800d76e:	4608      	mov	r0, r1
 800d770:	4611      	mov	r1, r2
 800d772:	461a      	mov	r2, r3
 800d774:	4603      	mov	r3, r0
 800d776:	70fb      	strb	r3, [r7, #3]
 800d778:	460b      	mov	r3, r1
 800d77a:	70bb      	strb	r3, [r7, #2]
 800d77c:	4613      	mov	r3, r2
 800d77e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d780:	2300      	movs	r3, #0
 800d782:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d784:	2300      	movs	r3, #0
 800d786:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d78e:	787c      	ldrb	r4, [r7, #1]
 800d790:	78ba      	ldrb	r2, [r7, #2]
 800d792:	78f9      	ldrb	r1, [r7, #3]
 800d794:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d798:	9303      	str	r3, [sp, #12]
 800d79a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d79c:	9302      	str	r3, [sp, #8]
 800d79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a0:	9301      	str	r3, [sp, #4]
 800d7a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d7a6:	9300      	str	r3, [sp, #0]
 800d7a8:	4623      	mov	r3, r4
 800d7aa:	f7f5 f807 	bl	80027bc <HAL_HCD_HC_SubmitRequest>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d7b2:	7bfb      	ldrb	r3, [r7, #15]
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f000 f893 	bl	800d8e0 <USBH_Get_USB_Status>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7be:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	3714      	adds	r7, #20
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd90      	pop	{r4, r7, pc}

0800d7c8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b082      	sub	sp, #8
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
 800d7d0:	460b      	mov	r3, r1
 800d7d2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d7da:	78fa      	ldrb	r2, [r7, #3]
 800d7dc:	4611      	mov	r1, r2
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7f5 fa9b 	bl	8002d1a <HAL_HCD_HC_GetURBState>
 800d7e4:	4603      	mov	r3, r0
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3708      	adds	r7, #8
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}

0800d7ee <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d7ee:	b580      	push	{r7, lr}
 800d7f0:	b082      	sub	sp, #8
 800d7f2:	af00      	add	r7, sp, #0
 800d7f4:	6078      	str	r0, [r7, #4]
 800d7f6:	460b      	mov	r3, r1
 800d7f8:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800d7fa:	20c8      	movs	r0, #200	; 0xc8
 800d7fc:	f7f3 ffe6 	bl	80017cc <HAL_Delay>
  return USBH_OK;
 800d800:	2300      	movs	r3, #0
}
 800d802:	4618      	mov	r0, r3
 800d804:	3708      	adds	r7, #8
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}

0800d80a <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d80a:	b480      	push	{r7}
 800d80c:	b085      	sub	sp, #20
 800d80e:	af00      	add	r7, sp, #0
 800d810:	6078      	str	r0, [r7, #4]
 800d812:	460b      	mov	r3, r1
 800d814:	70fb      	strb	r3, [r7, #3]
 800d816:	4613      	mov	r3, r2
 800d818:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d820:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d822:	78fb      	ldrb	r3, [r7, #3]
 800d824:	68fa      	ldr	r2, [r7, #12]
 800d826:	212c      	movs	r1, #44	; 0x2c
 800d828:	fb01 f303 	mul.w	r3, r1, r3
 800d82c:	4413      	add	r3, r2
 800d82e:	333b      	adds	r3, #59	; 0x3b
 800d830:	781b      	ldrb	r3, [r3, #0]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d009      	beq.n	800d84a <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d836:	78fb      	ldrb	r3, [r7, #3]
 800d838:	68fa      	ldr	r2, [r7, #12]
 800d83a:	212c      	movs	r1, #44	; 0x2c
 800d83c:	fb01 f303 	mul.w	r3, r1, r3
 800d840:	4413      	add	r3, r2
 800d842:	3354      	adds	r3, #84	; 0x54
 800d844:	78ba      	ldrb	r2, [r7, #2]
 800d846:	701a      	strb	r2, [r3, #0]
 800d848:	e008      	b.n	800d85c <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d84a:	78fb      	ldrb	r3, [r7, #3]
 800d84c:	68fa      	ldr	r2, [r7, #12]
 800d84e:	212c      	movs	r1, #44	; 0x2c
 800d850:	fb01 f303 	mul.w	r3, r1, r3
 800d854:	4413      	add	r3, r2
 800d856:	3355      	adds	r3, #85	; 0x55
 800d858:	78ba      	ldrb	r2, [r7, #2]
 800d85a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d85c:	2300      	movs	r3, #0
}
 800d85e:	4618      	mov	r0, r3
 800d860:	3714      	adds	r7, #20
 800d862:	46bd      	mov	sp, r7
 800d864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d868:	4770      	bx	lr

0800d86a <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d86a:	b480      	push	{r7}
 800d86c:	b085      	sub	sp, #20
 800d86e:	af00      	add	r7, sp, #0
 800d870:	6078      	str	r0, [r7, #4]
 800d872:	460b      	mov	r3, r1
 800d874:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800d876:	2300      	movs	r3, #0
 800d878:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d880:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800d882:	78fb      	ldrb	r3, [r7, #3]
 800d884:	68ba      	ldr	r2, [r7, #8]
 800d886:	212c      	movs	r1, #44	; 0x2c
 800d888:	fb01 f303 	mul.w	r3, r1, r3
 800d88c:	4413      	add	r3, r2
 800d88e:	333b      	adds	r3, #59	; 0x3b
 800d890:	781b      	ldrb	r3, [r3, #0]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d009      	beq.n	800d8aa <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800d896:	78fb      	ldrb	r3, [r7, #3]
 800d898:	68ba      	ldr	r2, [r7, #8]
 800d89a:	212c      	movs	r1, #44	; 0x2c
 800d89c:	fb01 f303 	mul.w	r3, r1, r3
 800d8a0:	4413      	add	r3, r2
 800d8a2:	3354      	adds	r3, #84	; 0x54
 800d8a4:	781b      	ldrb	r3, [r3, #0]
 800d8a6:	73fb      	strb	r3, [r7, #15]
 800d8a8:	e008      	b.n	800d8bc <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800d8aa:	78fb      	ldrb	r3, [r7, #3]
 800d8ac:	68ba      	ldr	r2, [r7, #8]
 800d8ae:	212c      	movs	r1, #44	; 0x2c
 800d8b0:	fb01 f303 	mul.w	r3, r1, r3
 800d8b4:	4413      	add	r3, r2
 800d8b6:	3355      	adds	r3, #85	; 0x55
 800d8b8:	781b      	ldrb	r3, [r3, #0]
 800d8ba:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800d8bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3714      	adds	r7, #20
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c8:	4770      	bx	lr

0800d8ca <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d8ca:	b580      	push	{r7, lr}
 800d8cc:	b082      	sub	sp, #8
 800d8ce:	af00      	add	r7, sp, #0
 800d8d0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f7f3 ff7a 	bl	80017cc <HAL_Delay>
}
 800d8d8:	bf00      	nop
 800d8da:	3708      	adds	r7, #8
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}

0800d8e0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b085      	sub	sp, #20
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d8ee:	79fb      	ldrb	r3, [r7, #7]
 800d8f0:	2b03      	cmp	r3, #3
 800d8f2:	d817      	bhi.n	800d924 <USBH_Get_USB_Status+0x44>
 800d8f4:	a201      	add	r2, pc, #4	; (adr r2, 800d8fc <USBH_Get_USB_Status+0x1c>)
 800d8f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8fa:	bf00      	nop
 800d8fc:	0800d90d 	.word	0x0800d90d
 800d900:	0800d913 	.word	0x0800d913
 800d904:	0800d919 	.word	0x0800d919
 800d908:	0800d91f 	.word	0x0800d91f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d90c:	2300      	movs	r3, #0
 800d90e:	73fb      	strb	r3, [r7, #15]
    break;
 800d910:	e00b      	b.n	800d92a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d912:	2302      	movs	r3, #2
 800d914:	73fb      	strb	r3, [r7, #15]
    break;
 800d916:	e008      	b.n	800d92a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d918:	2301      	movs	r3, #1
 800d91a:	73fb      	strb	r3, [r7, #15]
    break;
 800d91c:	e005      	b.n	800d92a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d91e:	2302      	movs	r3, #2
 800d920:	73fb      	strb	r3, [r7, #15]
    break;
 800d922:	e002      	b.n	800d92a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d924:	2302      	movs	r3, #2
 800d926:	73fb      	strb	r3, [r7, #15]
    break;
 800d928:	bf00      	nop
  }
  return usb_status;
 800d92a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	3714      	adds	r7, #20
 800d930:	46bd      	mov	sp, r7
 800d932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d936:	4770      	bx	lr

0800d938 <__errno>:
 800d938:	4b01      	ldr	r3, [pc, #4]	; (800d940 <__errno+0x8>)
 800d93a:	6818      	ldr	r0, [r3, #0]
 800d93c:	4770      	bx	lr
 800d93e:	bf00      	nop
 800d940:	2000002c 	.word	0x2000002c

0800d944 <__libc_init_array>:
 800d944:	b570      	push	{r4, r5, r6, lr}
 800d946:	4d0d      	ldr	r5, [pc, #52]	; (800d97c <__libc_init_array+0x38>)
 800d948:	4c0d      	ldr	r4, [pc, #52]	; (800d980 <__libc_init_array+0x3c>)
 800d94a:	1b64      	subs	r4, r4, r5
 800d94c:	10a4      	asrs	r4, r4, #2
 800d94e:	2600      	movs	r6, #0
 800d950:	42a6      	cmp	r6, r4
 800d952:	d109      	bne.n	800d968 <__libc_init_array+0x24>
 800d954:	4d0b      	ldr	r5, [pc, #44]	; (800d984 <__libc_init_array+0x40>)
 800d956:	4c0c      	ldr	r4, [pc, #48]	; (800d988 <__libc_init_array+0x44>)
 800d958:	f000 f93c 	bl	800dbd4 <_init>
 800d95c:	1b64      	subs	r4, r4, r5
 800d95e:	10a4      	asrs	r4, r4, #2
 800d960:	2600      	movs	r6, #0
 800d962:	42a6      	cmp	r6, r4
 800d964:	d105      	bne.n	800d972 <__libc_init_array+0x2e>
 800d966:	bd70      	pop	{r4, r5, r6, pc}
 800d968:	f855 3b04 	ldr.w	r3, [r5], #4
 800d96c:	4798      	blx	r3
 800d96e:	3601      	adds	r6, #1
 800d970:	e7ee      	b.n	800d950 <__libc_init_array+0xc>
 800d972:	f855 3b04 	ldr.w	r3, [r5], #4
 800d976:	4798      	blx	r3
 800d978:	3601      	adds	r6, #1
 800d97a:	e7f2      	b.n	800d962 <__libc_init_array+0x1e>
 800d97c:	0800dd6c 	.word	0x0800dd6c
 800d980:	0800dd6c 	.word	0x0800dd6c
 800d984:	0800dd6c 	.word	0x0800dd6c
 800d988:	0800dd70 	.word	0x0800dd70

0800d98c <malloc>:
 800d98c:	4b02      	ldr	r3, [pc, #8]	; (800d998 <malloc+0xc>)
 800d98e:	4601      	mov	r1, r0
 800d990:	6818      	ldr	r0, [r3, #0]
 800d992:	f000 b88d 	b.w	800dab0 <_malloc_r>
 800d996:	bf00      	nop
 800d998:	2000002c 	.word	0x2000002c

0800d99c <free>:
 800d99c:	4b02      	ldr	r3, [pc, #8]	; (800d9a8 <free+0xc>)
 800d99e:	4601      	mov	r1, r0
 800d9a0:	6818      	ldr	r0, [r3, #0]
 800d9a2:	f000 b819 	b.w	800d9d8 <_free_r>
 800d9a6:	bf00      	nop
 800d9a8:	2000002c 	.word	0x2000002c

0800d9ac <memcpy>:
 800d9ac:	440a      	add	r2, r1
 800d9ae:	4291      	cmp	r1, r2
 800d9b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d9b4:	d100      	bne.n	800d9b8 <memcpy+0xc>
 800d9b6:	4770      	bx	lr
 800d9b8:	b510      	push	{r4, lr}
 800d9ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9c2:	4291      	cmp	r1, r2
 800d9c4:	d1f9      	bne.n	800d9ba <memcpy+0xe>
 800d9c6:	bd10      	pop	{r4, pc}

0800d9c8 <memset>:
 800d9c8:	4402      	add	r2, r0
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	d100      	bne.n	800d9d2 <memset+0xa>
 800d9d0:	4770      	bx	lr
 800d9d2:	f803 1b01 	strb.w	r1, [r3], #1
 800d9d6:	e7f9      	b.n	800d9cc <memset+0x4>

0800d9d8 <_free_r>:
 800d9d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d9da:	2900      	cmp	r1, #0
 800d9dc:	d044      	beq.n	800da68 <_free_r+0x90>
 800d9de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9e2:	9001      	str	r0, [sp, #4]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	f1a1 0404 	sub.w	r4, r1, #4
 800d9ea:	bfb8      	it	lt
 800d9ec:	18e4      	addlt	r4, r4, r3
 800d9ee:	f000 f8e3 	bl	800dbb8 <__malloc_lock>
 800d9f2:	4a1e      	ldr	r2, [pc, #120]	; (800da6c <_free_r+0x94>)
 800d9f4:	9801      	ldr	r0, [sp, #4]
 800d9f6:	6813      	ldr	r3, [r2, #0]
 800d9f8:	b933      	cbnz	r3, 800da08 <_free_r+0x30>
 800d9fa:	6063      	str	r3, [r4, #4]
 800d9fc:	6014      	str	r4, [r2, #0]
 800d9fe:	b003      	add	sp, #12
 800da00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da04:	f000 b8de 	b.w	800dbc4 <__malloc_unlock>
 800da08:	42a3      	cmp	r3, r4
 800da0a:	d908      	bls.n	800da1e <_free_r+0x46>
 800da0c:	6825      	ldr	r5, [r4, #0]
 800da0e:	1961      	adds	r1, r4, r5
 800da10:	428b      	cmp	r3, r1
 800da12:	bf01      	itttt	eq
 800da14:	6819      	ldreq	r1, [r3, #0]
 800da16:	685b      	ldreq	r3, [r3, #4]
 800da18:	1949      	addeq	r1, r1, r5
 800da1a:	6021      	streq	r1, [r4, #0]
 800da1c:	e7ed      	b.n	800d9fa <_free_r+0x22>
 800da1e:	461a      	mov	r2, r3
 800da20:	685b      	ldr	r3, [r3, #4]
 800da22:	b10b      	cbz	r3, 800da28 <_free_r+0x50>
 800da24:	42a3      	cmp	r3, r4
 800da26:	d9fa      	bls.n	800da1e <_free_r+0x46>
 800da28:	6811      	ldr	r1, [r2, #0]
 800da2a:	1855      	adds	r5, r2, r1
 800da2c:	42a5      	cmp	r5, r4
 800da2e:	d10b      	bne.n	800da48 <_free_r+0x70>
 800da30:	6824      	ldr	r4, [r4, #0]
 800da32:	4421      	add	r1, r4
 800da34:	1854      	adds	r4, r2, r1
 800da36:	42a3      	cmp	r3, r4
 800da38:	6011      	str	r1, [r2, #0]
 800da3a:	d1e0      	bne.n	800d9fe <_free_r+0x26>
 800da3c:	681c      	ldr	r4, [r3, #0]
 800da3e:	685b      	ldr	r3, [r3, #4]
 800da40:	6053      	str	r3, [r2, #4]
 800da42:	4421      	add	r1, r4
 800da44:	6011      	str	r1, [r2, #0]
 800da46:	e7da      	b.n	800d9fe <_free_r+0x26>
 800da48:	d902      	bls.n	800da50 <_free_r+0x78>
 800da4a:	230c      	movs	r3, #12
 800da4c:	6003      	str	r3, [r0, #0]
 800da4e:	e7d6      	b.n	800d9fe <_free_r+0x26>
 800da50:	6825      	ldr	r5, [r4, #0]
 800da52:	1961      	adds	r1, r4, r5
 800da54:	428b      	cmp	r3, r1
 800da56:	bf04      	itt	eq
 800da58:	6819      	ldreq	r1, [r3, #0]
 800da5a:	685b      	ldreq	r3, [r3, #4]
 800da5c:	6063      	str	r3, [r4, #4]
 800da5e:	bf04      	itt	eq
 800da60:	1949      	addeq	r1, r1, r5
 800da62:	6021      	streq	r1, [r4, #0]
 800da64:	6054      	str	r4, [r2, #4]
 800da66:	e7ca      	b.n	800d9fe <_free_r+0x26>
 800da68:	b003      	add	sp, #12
 800da6a:	bd30      	pop	{r4, r5, pc}
 800da6c:	20001d98 	.word	0x20001d98

0800da70 <sbrk_aligned>:
 800da70:	b570      	push	{r4, r5, r6, lr}
 800da72:	4e0e      	ldr	r6, [pc, #56]	; (800daac <sbrk_aligned+0x3c>)
 800da74:	460c      	mov	r4, r1
 800da76:	6831      	ldr	r1, [r6, #0]
 800da78:	4605      	mov	r5, r0
 800da7a:	b911      	cbnz	r1, 800da82 <sbrk_aligned+0x12>
 800da7c:	f000 f88c 	bl	800db98 <_sbrk_r>
 800da80:	6030      	str	r0, [r6, #0]
 800da82:	4621      	mov	r1, r4
 800da84:	4628      	mov	r0, r5
 800da86:	f000 f887 	bl	800db98 <_sbrk_r>
 800da8a:	1c43      	adds	r3, r0, #1
 800da8c:	d00a      	beq.n	800daa4 <sbrk_aligned+0x34>
 800da8e:	1cc4      	adds	r4, r0, #3
 800da90:	f024 0403 	bic.w	r4, r4, #3
 800da94:	42a0      	cmp	r0, r4
 800da96:	d007      	beq.n	800daa8 <sbrk_aligned+0x38>
 800da98:	1a21      	subs	r1, r4, r0
 800da9a:	4628      	mov	r0, r5
 800da9c:	f000 f87c 	bl	800db98 <_sbrk_r>
 800daa0:	3001      	adds	r0, #1
 800daa2:	d101      	bne.n	800daa8 <sbrk_aligned+0x38>
 800daa4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800daa8:	4620      	mov	r0, r4
 800daaa:	bd70      	pop	{r4, r5, r6, pc}
 800daac:	20001d9c 	.word	0x20001d9c

0800dab0 <_malloc_r>:
 800dab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dab4:	1ccd      	adds	r5, r1, #3
 800dab6:	f025 0503 	bic.w	r5, r5, #3
 800daba:	3508      	adds	r5, #8
 800dabc:	2d0c      	cmp	r5, #12
 800dabe:	bf38      	it	cc
 800dac0:	250c      	movcc	r5, #12
 800dac2:	2d00      	cmp	r5, #0
 800dac4:	4607      	mov	r7, r0
 800dac6:	db01      	blt.n	800dacc <_malloc_r+0x1c>
 800dac8:	42a9      	cmp	r1, r5
 800daca:	d905      	bls.n	800dad8 <_malloc_r+0x28>
 800dacc:	230c      	movs	r3, #12
 800dace:	603b      	str	r3, [r7, #0]
 800dad0:	2600      	movs	r6, #0
 800dad2:	4630      	mov	r0, r6
 800dad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dad8:	4e2e      	ldr	r6, [pc, #184]	; (800db94 <_malloc_r+0xe4>)
 800dada:	f000 f86d 	bl	800dbb8 <__malloc_lock>
 800dade:	6833      	ldr	r3, [r6, #0]
 800dae0:	461c      	mov	r4, r3
 800dae2:	bb34      	cbnz	r4, 800db32 <_malloc_r+0x82>
 800dae4:	4629      	mov	r1, r5
 800dae6:	4638      	mov	r0, r7
 800dae8:	f7ff ffc2 	bl	800da70 <sbrk_aligned>
 800daec:	1c43      	adds	r3, r0, #1
 800daee:	4604      	mov	r4, r0
 800daf0:	d14d      	bne.n	800db8e <_malloc_r+0xde>
 800daf2:	6834      	ldr	r4, [r6, #0]
 800daf4:	4626      	mov	r6, r4
 800daf6:	2e00      	cmp	r6, #0
 800daf8:	d140      	bne.n	800db7c <_malloc_r+0xcc>
 800dafa:	6823      	ldr	r3, [r4, #0]
 800dafc:	4631      	mov	r1, r6
 800dafe:	4638      	mov	r0, r7
 800db00:	eb04 0803 	add.w	r8, r4, r3
 800db04:	f000 f848 	bl	800db98 <_sbrk_r>
 800db08:	4580      	cmp	r8, r0
 800db0a:	d13a      	bne.n	800db82 <_malloc_r+0xd2>
 800db0c:	6821      	ldr	r1, [r4, #0]
 800db0e:	3503      	adds	r5, #3
 800db10:	1a6d      	subs	r5, r5, r1
 800db12:	f025 0503 	bic.w	r5, r5, #3
 800db16:	3508      	adds	r5, #8
 800db18:	2d0c      	cmp	r5, #12
 800db1a:	bf38      	it	cc
 800db1c:	250c      	movcc	r5, #12
 800db1e:	4629      	mov	r1, r5
 800db20:	4638      	mov	r0, r7
 800db22:	f7ff ffa5 	bl	800da70 <sbrk_aligned>
 800db26:	3001      	adds	r0, #1
 800db28:	d02b      	beq.n	800db82 <_malloc_r+0xd2>
 800db2a:	6823      	ldr	r3, [r4, #0]
 800db2c:	442b      	add	r3, r5
 800db2e:	6023      	str	r3, [r4, #0]
 800db30:	e00e      	b.n	800db50 <_malloc_r+0xa0>
 800db32:	6822      	ldr	r2, [r4, #0]
 800db34:	1b52      	subs	r2, r2, r5
 800db36:	d41e      	bmi.n	800db76 <_malloc_r+0xc6>
 800db38:	2a0b      	cmp	r2, #11
 800db3a:	d916      	bls.n	800db6a <_malloc_r+0xba>
 800db3c:	1961      	adds	r1, r4, r5
 800db3e:	42a3      	cmp	r3, r4
 800db40:	6025      	str	r5, [r4, #0]
 800db42:	bf18      	it	ne
 800db44:	6059      	strne	r1, [r3, #4]
 800db46:	6863      	ldr	r3, [r4, #4]
 800db48:	bf08      	it	eq
 800db4a:	6031      	streq	r1, [r6, #0]
 800db4c:	5162      	str	r2, [r4, r5]
 800db4e:	604b      	str	r3, [r1, #4]
 800db50:	4638      	mov	r0, r7
 800db52:	f104 060b 	add.w	r6, r4, #11
 800db56:	f000 f835 	bl	800dbc4 <__malloc_unlock>
 800db5a:	f026 0607 	bic.w	r6, r6, #7
 800db5e:	1d23      	adds	r3, r4, #4
 800db60:	1af2      	subs	r2, r6, r3
 800db62:	d0b6      	beq.n	800dad2 <_malloc_r+0x22>
 800db64:	1b9b      	subs	r3, r3, r6
 800db66:	50a3      	str	r3, [r4, r2]
 800db68:	e7b3      	b.n	800dad2 <_malloc_r+0x22>
 800db6a:	6862      	ldr	r2, [r4, #4]
 800db6c:	42a3      	cmp	r3, r4
 800db6e:	bf0c      	ite	eq
 800db70:	6032      	streq	r2, [r6, #0]
 800db72:	605a      	strne	r2, [r3, #4]
 800db74:	e7ec      	b.n	800db50 <_malloc_r+0xa0>
 800db76:	4623      	mov	r3, r4
 800db78:	6864      	ldr	r4, [r4, #4]
 800db7a:	e7b2      	b.n	800dae2 <_malloc_r+0x32>
 800db7c:	4634      	mov	r4, r6
 800db7e:	6876      	ldr	r6, [r6, #4]
 800db80:	e7b9      	b.n	800daf6 <_malloc_r+0x46>
 800db82:	230c      	movs	r3, #12
 800db84:	603b      	str	r3, [r7, #0]
 800db86:	4638      	mov	r0, r7
 800db88:	f000 f81c 	bl	800dbc4 <__malloc_unlock>
 800db8c:	e7a1      	b.n	800dad2 <_malloc_r+0x22>
 800db8e:	6025      	str	r5, [r4, #0]
 800db90:	e7de      	b.n	800db50 <_malloc_r+0xa0>
 800db92:	bf00      	nop
 800db94:	20001d98 	.word	0x20001d98

0800db98 <_sbrk_r>:
 800db98:	b538      	push	{r3, r4, r5, lr}
 800db9a:	4d06      	ldr	r5, [pc, #24]	; (800dbb4 <_sbrk_r+0x1c>)
 800db9c:	2300      	movs	r3, #0
 800db9e:	4604      	mov	r4, r0
 800dba0:	4608      	mov	r0, r1
 800dba2:	602b      	str	r3, [r5, #0]
 800dba4:	f7f3 fd2e 	bl	8001604 <_sbrk>
 800dba8:	1c43      	adds	r3, r0, #1
 800dbaa:	d102      	bne.n	800dbb2 <_sbrk_r+0x1a>
 800dbac:	682b      	ldr	r3, [r5, #0]
 800dbae:	b103      	cbz	r3, 800dbb2 <_sbrk_r+0x1a>
 800dbb0:	6023      	str	r3, [r4, #0]
 800dbb2:	bd38      	pop	{r3, r4, r5, pc}
 800dbb4:	20001da0 	.word	0x20001da0

0800dbb8 <__malloc_lock>:
 800dbb8:	4801      	ldr	r0, [pc, #4]	; (800dbc0 <__malloc_lock+0x8>)
 800dbba:	f000 b809 	b.w	800dbd0 <__retarget_lock_acquire_recursive>
 800dbbe:	bf00      	nop
 800dbc0:	20001da4 	.word	0x20001da4

0800dbc4 <__malloc_unlock>:
 800dbc4:	4801      	ldr	r0, [pc, #4]	; (800dbcc <__malloc_unlock+0x8>)
 800dbc6:	f000 b804 	b.w	800dbd2 <__retarget_lock_release_recursive>
 800dbca:	bf00      	nop
 800dbcc:	20001da4 	.word	0x20001da4

0800dbd0 <__retarget_lock_acquire_recursive>:
 800dbd0:	4770      	bx	lr

0800dbd2 <__retarget_lock_release_recursive>:
 800dbd2:	4770      	bx	lr

0800dbd4 <_init>:
 800dbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbd6:	bf00      	nop
 800dbd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbda:	bc08      	pop	{r3}
 800dbdc:	469e      	mov	lr, r3
 800dbde:	4770      	bx	lr

0800dbe0 <_fini>:
 800dbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbe2:	bf00      	nop
 800dbe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbe6:	bc08      	pop	{r3}
 800dbe8:	469e      	mov	lr, r3
 800dbea:	4770      	bx	lr
